!function(e){var t={};function s(a){if(t[a])return t[a].exports;var i=t[a]={i:a,l:!1,exports:{}};return e[a].call(i.exports,i,i.exports,s),i.l=!0,i.exports}s.m=e,s.c=t,s.d=function(e,t,a){s.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:a})},s.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},s.t=function(e,t){if(1&t&&(e=s(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var a=Object.create(null);if(s.r(a),Object.defineProperty(a,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)s.d(a,i,function(t){return e[t]}.bind(null,i));return a},s.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return s.d(t,"a",t),t},s.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},s.p="",s(s.s=5)}([function(e,t,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const a=s(7);class i extends Phaser.State{preload(){super.preload(),i.gameManager||(i.gameManager=new a.GameManager(this.game))}create(){super.create();for(const e of i.gameManager.pendingOnCreate)e();i.gameManager.pendingOnCreate.length=0}update(){super.update(),i.gameManager.update()}}i.gameManager=null,t.GameState=i},function(e,t,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){e[e.up=0]="up",e[e.down=1]="down",e[e.right=2]="right",e[e.left=3]="left"}(t.Direction||(t.Direction={})),function(e){e[e.stop=0]="stop",e[e.move=1]="move"}(t.BoulderState||(t.BoulderState={})),function(e){e[e.none=0]="none",e[e.bushes=1]="bushes",e[e.cave=2]="cave",e[e.haystack=3]="haystack"}(t.HidingType||(t.HidingType={})),t.CharacterState={dead:0,run:1,stand:2,walk:3},t.PlayerState=Object.assign({},t.CharacterState,{hidden:4}),t.EnemyState=Object.assign({},t.CharacterState,{onRoute:4,pursuit:5})},function(e,t,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const a=s(9);class i extends Phaser.Sprite{constructor(e,t,s,a,i){super(e.game,t,s,a,i),this.gameManager=e,this.game.add.existing(this),this.game.physics.arcade.enable(this),this.gameManager.gameObjects.add(this),this.gameManager.gameObjectsGroup.add(this),this.body.collideWorldBounds=!0,this.body.allowRotation=!1,this.body.allowGravity=!1,this.body.immovable=!0,this.smoothed=!1}destroy(e){super.destroy(e),this.gameManager.gameObjects.delete(this)}collides(e){if(!(e instanceof i))throw new TypeError('"gameObject" must be an instance of GameObject.');return!0}setPosition(e,t){return this.position.x=e,this.position.y=t,this}setVelocity(e,t){return this.body.velocity.x=e,this.body.velocity.y=t,this}interact(e){return e.interaction(this),this}interaction(e){if(!(e instanceof i))throw new TypeError("Expected gameObject to be a GameObject instance")}fromJSON(e){return this.name=e.name,this.setVelocity(e.velocity.x,e.velocity.y),this}toJSON(){return{frame:this.frame,key:this.key,name:this.name,position:{x:this.position.x,y:this.position.y},type:"GameObject",velocity:{x:this.body.velocity.x,y:this.body.velocity.y}}}}i.factory=new a.GameObjectFactory,t.GameObject=i;const r=s(3),o=s(11),n=s(13),c=s(14),h=s(15),d=s(4);i.factory.set("GameObject",i),i.factory.set("Character",r.Character),i.factory.set("Player",n.Player),i.factory.set("Enemy",o.Enemy),i.factory.set("HidingSpot",c.HidingSpot),i.factory.set("Boulder",h.Boulder),i.factory.set("Trap",d.Trap)},function(e,t,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const a=s(1),i=s(2);t.Character=class extends i.GameObject{constructor(e,t,s,i,r){super(e,t,s,i,r),this.walkSpeed=0,this.runSpeed=0,this.state=a.CharacterState.stand,this.direction=a.Direction.down,this.strength=0,this.attackCooldown=1e3,this.attackRefresh=0,this.body.setSize(this.width,.7*this.height,0,.3*this.height),this.animations.add("stand.down",[0]),this.animations.add("move.down",[1,2,3,4,5]),this.animations.add("kill.down",[6,7]),this.animations.add("dead.down",[8,9,10]),this.animations.add("stand.right",[11]),this.animations.add("move.right",[12,13,14,15,16]),this.animations.add("kill.right",[17,18]),this.animations.add("dead.right",[19,20,21]),this.animations.add("stand.up",[22]),this.animations.add("move.up",[23,24,25,26,27]),this.animations.add("kill.up",[28,29]),this.animations.add("dead.up",[30,31,32]),this.animations.add("stand.left",[33]),this.animations.add("move.left",[34,35,36,37,38]),this.animations.add("kill.left",[39,40]),this.animations.add("dead.left",[41,42,43])}setStrength(e){return this.strength=e,this}setState(e){return this.state=e,this}attack(e){Date.now()<this.attackRefresh||(this.attackRefresh=Date.now()+this.attackCooldown,e.damage(this.strength),this.animations.play(`kill.${a.Direction[this.direction]}`,this.attackCooldown/1e3*2))}kill(){return this.setState(a.CharacterState.dead),this.animations.play(`dead.${a.Direction[this.direction]}`,1.5),this.game.time.events.add(3*Phaser.Timer.SECOND,()=>super.kill()),this}walk(){this.setState(a.CharacterState.walk),this.animations.play(`move.${a.Direction[this.direction]}`,5),this.updateVelocity(this.walkSpeed)}run(){this.setState(a.CharacterState.run),this.animations.play(`move.${a.Direction[this.direction]}`,8),this.updateVelocity(this.runSpeed)}stand(){this.setState(a.CharacterState.stand),this.animations.play(`stand.${a.Direction[this.direction]}`,0),this.animations.stop(),this.setVelocity(0,0)}changeDirection(e){this.direction=e}fromJSON(e){return super.fromJSON(e),this.direction=e.direction,this.runSpeed=e.runSpeed,this.walkSpeed=e.walkSpeed,this.setStrength(e.strength),this}toJSON(){return Object.assign({},super.toJSON(),{direction:this.direction,runSpeed:this.runSpeed,strength:this.strength,walkSpeed:this.walkSpeed})}triggerWalk(){this.updateVelocity(this.walkSpeed)}updateVelocity(e){switch(this.direction){case a.Direction.down:this.setVelocity(0,e);break;case a.Direction.up:this.setVelocity(0,-e);break;case a.Direction.left:this.setVelocity(-e,0);break;default:this.setVelocity(e,0)}}}},function(e,t,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const a=s(2);t.Trap=class extends a.GameObject{constructor(){super(...arguments),this.active=!1,this.damageStrength=0,this.lethal=!1}setDamageStrength(e){return this.damageStrength=e,this}setLethal(e){return this.lethal=e,this}setActive(e){return this.active=e,this}onContact(e){this.lethal?e.kill():e.damage(this.damageStrength)}}},function(e,t,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const a=s(6),i=s(16),r=s(17),o=s(19),n=s(20),c=s(21);window.onload=function(){const e=new Phaser.Game(c.WIN_WIDTH,c.WIN_HEIGHT,Phaser.AUTO,"game");e.state.add("boot",a.BootState),e.state.add("preloader",n.PreloaderState),e.state.add("play",o.PlayState),e.state.add("menu",i.MenuState),e.state.add("newGame",r.NewGameState),e.state.start("boot")}},function(e,t,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const a=s(0);t.BootState=class extends a.GameState{preload(){super.preload(),this.game.load.image("preloader_bar","images/preloader_bar.png"),this.game.load.spritesheet("player","images/player.png",16,32),this.game.load.spritesheet("enemy","images/enemy.png",16,32)}create(){super.create(),this.game.state.start("preloader")}}},function(e,t,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const a=s(8);var i;t.GameManager=class{constructor(e){this.game=e,this.mapManager=null,this.storageManager=new a.StorageManager(this),this.gameObjects=new Set,this.gameObjectsGroup=null,this.player=null,this.playerName=null,this.level=i.First,this.pendingOnCreate=[],this.gameObjectsGroup=e.add.group(e.world,"gameObjectsGroup",!0,!1,Phaser.Physics.ARCADE)}clear(){for(const e of this.gameObjects)e.destroy(!0);return this.gameObjects.clear(),this}update(){for(const e of this.gameObjects)e.update();this.game.physics.arcade.collide(this.gameObjectsGroup,void 0,(e,t)=>e.collides(t)&&t.collides(e))}},function(e){e[e.First=0]="First"}(i=t.GameLevels||(t.GameLevels={}))},function(e,t,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const a=s(2);t.StorageManager=class{constructor(e){this.gameManager=e}save(){localStorage.clear(),localStorage.setItem("gameObjects",JSON.stringify(this.gameManager.gameObjects)),localStorage.setItem("level",this.gameManager.level.toString()),localStorage.setItem("playerName",this.gameManager.playerName)}load(){this.gameManager.clear();const e=localStorage.getItem("level");if(null===e)throw new Error("Could not find a saved file.");const t=Number(e);this.gameManager.level=t;const s=JSON.parse(localStorage.getItem("gameObjects"));s&&this.loadGameObjects(s);const a=localStorage.getItem("playerName");a&&this.loadPlayerName(a)}loadGameObjects(e){for(const t of e){const e=a.GameObject.factory.get(t.type);if(!e)throw new Error(`Could not find a constructor for ${t.type||"unknown"}. Aborting.`);const s=new e(this.gameManager,t.position.x,t.position.y,t.key,t.frame).fromJSON(t);"Player"===t.type&&(this.gameManager.player=s)}}loadPlayerName(e){this.gameManager.playerName=e}}},function(e,t,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const a=s(10);t.GameObjectFactory=class extends a.Factory{}},function(e,t,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.Factory=class extends Map{}},function(e,t,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const a=s(12),i=s(1),r=s(3);t.Enemy=class extends r.Character{constructor(e,t,s){super(e,t,s,"enemy"),this.route=new a.Route,this.pov=.85*Math.PI,this.isTarget=!1}setTarget(e){return this.isTarget=e,this}setPov(e){return this.pov=e,this}chase(){this.setState(i.EnemyState.pursuit)}fromJSON(e){return super.fromJSON(e),this.isTarget=e.isTarget,this.pov=e.pov,this.route.set(e.route),this}toJSON(){return Object.assign({},super.toJSON(),{isTarget:this.isTarget,pov:this.pov,route:this.route.toJSON()})}}},function(e,t,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.Route=class{constructor(){this.route=[]}set(e){return this.route=e,this}add(e,t){return this.route.push("number"==typeof e?[e,t]:e),this}remove(e,t){const s="number"==typeof e?[e,t]:e,a=this.route.findIndex(e=>e[0]===s[0]&&e[0]===s[1]);return-1!==a&&this.route.splice(a,1),this}reset(){return this.route.length=0,this}toJSON(){return this.route.slice()}}},function(e,t,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const a=s(1),i=s(3);t.Player=class extends i.Character{constructor(e,t,s){super(e,t,s,"player"),this.hidingSpot=null,this.directions={down:!1,left:!1,right:!1,up:!1},this.cursorKeys=this.game.input.keyboard.createCursorKeys(),this.actions={interact:!1,kill:!1},this.movementRefresh=0,this.game.camera.follow(this),this.body.immovable=!1}update(){if(Date.now()<this.movementRefresh)return;this.directions.down=this.cursorKeys.down.isDown,this.directions.left=this.cursorKeys.left.isDown,this.directions.right=this.cursorKeys.right.isDown,this.directions.up=this.cursorKeys.up.isDown;const e=this.gameManager.game.input.keyboard,t=e.isDown(Phaser.Keyboard.SHIFT);this.directions.down!==this.directions.up?(this.direction=this.directions.down?a.Direction.down:a.Direction.up,t?this.run():this.walk()):this.directions.left!==this.directions.right?(this.direction=this.directions.left?a.Direction.left:a.Direction.right,t?this.run():this.walk()):this.stand(),e.isDown(Phaser.Keyboard.X)?(this.actions.interact=!1,this.actions.kill=!0,this.triggerWalk()):e.isDown(Phaser.Keyboard.Z)?(this.actions.interact=!0,this.actions.kill=!1,this.triggerWalk()):(this.actions.interact=!1,this.actions.kill=!1)}attack(e){super.attack(e),this.movementRefresh=this.attackRefresh}collides(e){if(e instanceof i.Character)return this.actions.kill?this.attack(e):this.actions.interact&&e.interact(this),!0}hide(e){return e.hidingType!==a.HidingType.none&&(this.setState(a.PlayerState.hidden),this.hidingSpot=e),this}reveal(){return this.hidingSpot&&(this.setState(this.health?a.PlayerState.stand:a.PlayerState.dead),this.hidingSpot=null),this}fromJSON(e){return super.fromJSON(e),this}toJSON(){return Object.assign({},super.toJSON(),{hidingSpot:this.hidingSpot.toJSON()})}}},function(e,t,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const a=s(1),i=s(2);t.HidingSpot=class extends i.GameObject{constructor(e,t,s){super(e,t,s,"hidingSpot"),this.hidingType=a.HidingType.none}setHidingType(e){return this.hidingType=e,this}toJSON(){return Object.assign({},super.toJSON(),{hidingType:this.hidingType})}}},function(e,t,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const a=s(1),i=s(4);t.Boulder=class extends i.Trap{constructor(e,t,s){super(e,t,s,"boulder"),this.state=a.BoulderState.stop,this.direction=a.Direction.down,this.speed=0}move(){switch(this.state=a.BoulderState.move,this.direction){case a.Direction.down:this.body.velocity.x=0,this.body.velocity.y=this.speed;break;case a.Direction.up:this.body.velocity.x=0,this.body.velocity.y=-this.speed;break;case a.Direction.left:this.body.velocity.x=-this.speed,this.body.velocity.y=0;break;default:this.body.velocity.x=this.speed,this.body.velocity.y=0}}stop(){this.state=a.BoulderState.stop,this.body.velocity.x=0,this.body.velocity.y=0}setDirection(e){return this.direction=e,this}setSpeed(e){return this.speed=e,this}}},function(e,t,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const a=s(0);t.MenuState=class extends a.GameState{constructor(){super(...arguments),this.texts=[],this.logo=null}create(){super.create(),this.game.stage.backgroundColor="#2A1B19",this.logo=this.game.add.sprite(this.game.world.centerX,this.game.world.centerY-120,"logo"),this.logo.anchor.setTo(.5,.5),this.logo.scale.setTo(.5,.5),this.createButton("New Game",()=>{this.game.state.start("newGame")}),localStorage.getItem("level")&&this.createButton("Continue",()=>{a.GameState.gameManager.storageManager.load()})}shutdown(){for(const e of this.texts)e.destroy(!0);this.texts.length=0,this.logo.destroy(!0),super.shutdown()}createButton(e,t){const s=this.game.add.text(this.game.world.centerX,this.game.world.centerY,e,{font:"65px Arial",fill:"#CDCDCD",align:"center"});s.anchor.set(.5),s.inputEnabled=!0,s.events.onInputUp.add(t,this),s.events.onInputDown.add(()=>{s.fill="#FF0044",s.events.onInputOver.removeAll(),s.events.onInputOut.removeAll()}),s.events.onInputOver.add(()=>{s.fill="#FFFFFF"}),s.events.onInputOut.add(()=>{s.fill="#EFEFEF"}),this.texts.push(s),s.alignTo(this.texts.length?this.texts[this.texts.length-1]:this.logo,Phaser.BOTTOM_CENTER,16)}}},function(e,t,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const a=s(18),i=s(0);t.NewGameState=class extends i.GameState{preload(){this.game.load.json("Level-0-GameObjects","json/Level-0-GameObjects.json")}create(){const e=this.game.add.text(this.game.world.centerX,this.game.world.centerY-65,"Insert your name",{font:"65px Arial",fill:"#CDCDCD",align:"center"});e.anchor.setTo(.5,.5);const t=this.game.add.text(this.game.world.centerX,this.game.world.centerY,"",{font:"65px Arial",fill:"#CDCDCD",align:"center"});t.anchor.setTo(.5,.5),t.alignTo(e,Phaser.BOTTOM_CENTER,0,25),a.readLine(t,s=>{e.destroy(!0),t.destroy(!0),this.game.state.start("play");const a=i.GameState.gameManager;a.playerName=s,a.pendingOnCreate.push(()=>{console.log("Loading New Game..."),a.storageManager.loadGameObjects(this.game.cache.getJSON("Level-0-GameObjects")),console.log("Loaded!")})},{maximumLength:20})}}},function(e,t,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.chunk=function(e,t){const s=e.slice(),a=[];for(;s.length;)a.push(s.splice(0,t));return a},t.readLine=function(e,t,s){const a=[],i="maximumLength"in s?s.maximumLength:100,r=s=>{if("Enter"===s.key)return document.removeEventListener("keydown",r),void t(a.join(""));if("Backspace"===s.key)a.length&&a.pop();else{if(!(a.length<=i&&/^[\(\)\[\]\w\d\-!?¡¿ ]$/.test(s.key)))return;a.push(s.key)}e.text=a.join("")};document.addEventListener("keydown",r)}},function(e,t,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const a=s(0);t.PlayState=class extends a.GameState{constructor(){super(...arguments),this.tilemaps=new Map,this.obstacleLayer=null}preload(){super.preload(),this.game.load.tilemap("Level-0","json/Level-0.json",null,Phaser.Tilemap.TILED_JSON),this.game.load.image("overworld","images/overworld.png"),this.game.load.image("cave","images/cave.png"),this.game.load.image("objects","images/objects.png")}create(){this.getTilemap(0),this.game.input.keyboard.addKeyCapture([Phaser.Keyboard.LEFT,Phaser.Keyboard.RIGHT,Phaser.Keyboard.UP,Phaser.Keyboard.DOWN,Phaser.Keyboard.SPACEBAR]),this.game.physics.startSystem(Phaser.Physics.ARCADE),this.game.stage.backgroundColor="#99F",super.create()}update(){super.update(),this.game.physics.arcade.collide(a.GameState.gameManager.gameObjectsGroup,this.obstacleLayer)}getTilemap(e){const t=`Level-${e}`;let s=this.tilemaps.get(e);if(!s){(s=this.game.add.tilemap(t)).addTilesetImage("overworld");const a=s.createLayer(0);a.smoothed=!1,a.resizeWorld(),s.createLayer(1).smoothed=!1,this.obstacleLayer=s.createLayer(2),this.obstacleLayer.smoothed=!1,this.game.physics.arcade.enable(this.obstacleLayer),s.setCollisionByExclusion([],!0,this.obstacleLayer),this.tilemaps.set(e,s)}return s}}},function(e,t,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const a=s(0);t.PreloaderState=class extends a.GameState{preload(){this.loadingBar=this.game.add.sprite(0,240,"preloader_bar"),this.loadingBar.anchor.setTo(0,.5),this.load.setPreloadSprite(this.loadingBar),this.game.load.image("logo","images/StonesCreed.png")}create(){this.game.state.start("menu")}}},function(e,t,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.WIN_WIDTH=800,t.WIN_HEIGHT=600}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,