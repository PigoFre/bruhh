!function(e){var t={};function s(i){if(t[i])return t[i].exports;var a=t[i]={i:i,l:!1,exports:{}};return e[i].call(a.exports,a,a.exports,s),a.l=!0,a.exports}s.m=e,s.c=t,s.d=function(e,t,i){s.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:i})},s.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},s.t=function(e,t){if(1&t&&(e=s(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var i=Object.create(null);if(s.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var a in e)s.d(i,a,function(t){return e[t]}.bind(null,a));return i},s.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return s.d(t,"a",t),t},s.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},s.p="",s(s.s=5)}([function(e,t,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class i extends Phaser.State{create(){super.create(this.game);for(const e of i.pendingOnCreate)e(this);i.pendingOnCreate.length=0}}i.pendingOnCreate=[],t.GameState=i},function(e,t,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){e[e.up=0]="up",e[e.down=1]="down",e[e.right=2]="right",e[e.left=3]="left"}(t.Direction||(t.Direction={})),function(e){e[e.stop=0]="stop",e[e.move=1]="move"}(t.BoulderState||(t.BoulderState={})),function(e){e[e.none=0]="none",e[e.bushes=1]="bushes",e[e.cave=2]="cave",e[e.haystack=3]="haystack"}(t.HidingType||(t.HidingType={})),t.CharacterState={dead:0,dying:1,run:2,stand:3,walk:4},t.PlayerState=Object.assign({},t.CharacterState,{hidden:5}),t.EnemyState=Object.assign({},t.CharacterState,{onRoute:6,pursuit:7})},function(e,t,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=s(13);class a extends Phaser.Sprite{constructor(e,t,s,i,a){super(e.game,t,s,i,a),this.gameManager=e,this.game.add.existing(this),this.game.physics.arcade.enable(this),this.gameManager.gameObjectsGroup.add(this),this.body.collideWorldBounds=!0,this.body.allowRotation=!1,this.body.allowGravity=!1,this.body.immovable=!0,this.smoothed=!1}collides(e){if(!(e instanceof a))throw new TypeError('"gameObject" must be an instance of GameObject.');return!0}setPosition(e,t){return this.position.x=e,this.position.y=t,this}setVelocity(e,t){return this.body.velocity.x=e,this.body.velocity.y=t,this}interact(e){return e.interaction(this),this}interaction(e){if(!(e instanceof a))throw new TypeError("Expected gameObject to be a GameObject instance")}fromJSON(e){return this.name=e.name,this.setVelocity(e.velocity.x,e.velocity.y),this}toJSON(){return{frame:this.frame,key:this.key,name:this.name,position:{x:this.position.x,y:this.position.y},type:"GameObject",velocity:{x:this.body.velocity.x,y:this.body.velocity.y}}}}a.factory=new i.GameObjectFactory,t.GameObject=a;const r=s(3),o=s(15),n=s(17),h=s(18),c=s(19),l=s(4);a.factory.set("GameObject",a),a.factory.set("Character",r.Character),a.factory.set("Player",n.Player),a.factory.set("Enemy",o.Enemy),a.factory.set("HidingSpot",h.HidingSpot),a.factory.set("Boulder",c.Boulder),a.factory.set("Trap",l.Trap)},function(e,t,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=s(1),a=s(2);t.Character=class extends a.GameObject{constructor(e,t,s,a,r){super(e,t,s,a,r),this.walkSpeed=0,this.runSpeed=0,this.state=i.CharacterState.stand,this.direction=i.Direction.down,this.strength=0,this.attackCooldown=500,this.attackRefresh=0,this.body.setSize(.9*this.width,.4*this.height,0,.5*this.height),this.animations.add("stand.down",[0]),this.animations.add("move.down",[1,2,3,4]),this.animations.add("kill.down",[5,6,7]),this.animations.add("dead.down",[8,9,10]),this.animations.add("stand.right",[11]),this.animations.add("move.right",[12,13,14,15]),this.animations.add("kill.right",[16,17,18]),this.animations.add("dead.right",[19,20,21]),this.animations.add("stand.up",[22]),this.animations.add("move.up",[23,24,25,26]),this.animations.add("kill.up",[27,28,29]),this.animations.add("dead.up",[30,31,32]),this.animations.add("stand.left",[33]),this.animations.add("move.left",[34,35,36,37]),this.animations.add("kill.left",[38,39,40]),this.animations.add("dead.left",[41,42,43])}setStrength(e){return this.strength=e,this}setState(e){return this.state=e,this}attack(e){if(!(Date.now()<this.attackRefresh))return this.attackRefresh=Date.now()+this.attackCooldown,e.damage(this.strength),this.animations.play(`kill.${i.Direction[this.direction]}`,1e3/this.attackCooldown*3),this}kill(){return this.setVelocity(0,0),this.setState(i.CharacterState.dying),this.animations.play(`dead.${i.Direction[this.direction]}`,1.5),this.game.time.events.add(3*Phaser.Timer.SECOND,()=>{this.setState(i.CharacterState.dead),super.kill()}),this}walk(){return this.setState(i.CharacterState.walk),this.animations.play(`move.${i.Direction[this.direction]}`,5),this.updateVelocity(this.walkSpeed),this}run(){return this.setState(i.CharacterState.run),this.animations.play(`move.${i.Direction[this.direction]}`,8),this.updateVelocity(this.runSpeed),this}stand(){return this.setState(i.CharacterState.stand),this.animations.play(`stand.${i.Direction[this.direction]}`,0),this.animations.stop(),this.setVelocity(0,0),this}changeDirection(e){return this.direction=e,this}fromJSON(e){return super.fromJSON(e),this.direction=e.direction,this.runSpeed=e.runSpeed,this.walkSpeed=e.walkSpeed,this.setStrength(e.strength),this}toJSON(){return Object.assign({},super.toJSON(),{direction:this.direction,runSpeed:this.runSpeed,strength:this.strength,walkSpeed:this.walkSpeed})}triggerWalk(){this.updateVelocity(this.walkSpeed)}updateVelocity(e){switch(this.direction){case i.Direction.down:this.setVelocity(0,e);break;case i.Direction.up:this.setVelocity(0,-e);break;case i.Direction.left:this.setVelocity(-e,0);break;default:this.setVelocity(e,0)}}}},function(e,t,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=s(2);t.Trap=class extends i.GameObject{constructor(){super(...arguments),this.active=!1,this.damageStrength=0,this.lethal=!1}setDamageStrength(e){return this.damageStrength=e,this}setLethal(e){return this.lethal=e,this}setActive(e){return this.active=e,this}onContact(e){this.lethal?e.kill():e.damage(this.damageStrength)}}},function(e,t,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=s(6),a=s(7),r=s(8),o=s(10),n=s(20),h=s(21);window.onload=function(){const e=new Phaser.Game(h.WIN_WIDTH,h.WIN_HEIGHT,Phaser.AUTO,"game");e.state.add("boot",i.BootState),e.state.add("preloader",n.PreloaderState),e.state.add("play",o.PlayState),e.state.add("menu",a.MenuState),e.state.add("newGame",r.NewGameState),e.state.start("boot")}},function(e,t,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=s(0);t.BootState=class extends i.GameState{preload(){this.game.load.image("preloader_bar","images/preloader_bar.png")}create(){this.game.state.start("preloader")}}},function(e,t,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=s(0);t.MenuState=class extends i.GameState{constructor(){super(...arguments),this.texts=[],this.logo=null}create(){super.create(),this.game.stage.backgroundColor="#2A1B19",this.logo=this.game.add.sprite(this.game.world.centerX,this.game.world.centerY-120,"logo"),this.logo.anchor.setTo(.5,.5),this.logo.scale.setTo(.5,.5),this.createButton("New Game",()=>{this.game.state.start("newGame")}),localStorage.getItem("level")&&this.createButton("Continue",()=>{i.GameState.pendingOnCreate.push(e=>{e.gameManager.storageManager.load()}),this.game.state.start("play")})}shutdown(){for(const e of this.texts)e.destroy(!0);this.texts.length=0,this.logo.destroy(!0),super.shutdown(this.game)}createButton(e,t){const s=this.game.add.text(this.game.world.centerX,this.game.world.centerY,e,{font:"65px Arial",fill:"#CDCDCD",align:"center"});s.anchor.set(.5),s.inputEnabled=!0,s.events.onInputUp.add(t,this),s.events.onInputDown.add(()=>{s.fill="#FF0044",s.events.onInputOver.removeAll(),s.events.onInputOut.removeAll()}),s.events.onInputOver.add(()=>{s.fill="#FFFFFF"}),s.events.onInputOut.add(()=>{s.fill="#EFEFEF"}),this.texts.push(s),s.alignTo(this.texts.length?this.texts[this.texts.length-1]:this.logo,Phaser.BOTTOM_CENTER,16)}}},function(e,t,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=s(9),a=s(0);t.NewGameState=class extends a.GameState{preload(){super.preload(this.game),this.game.load.json("Level-0-GameObjects","json/Level-0-GameObjects.json")}create(){const e=this.game.add.text(this.game.world.centerX,this.game.world.centerY-65,"Insert your name",{font:"65px Arial",fill:"#CDCDCD",align:"center"});e.anchor.setTo(.5,.5);const t=this.game.add.text(this.game.world.centerX,this.game.world.centerY,"",{font:"65px Arial",fill:"#CDCDCD",align:"center"});t.anchor.setTo(.5,.5),t.alignTo(e,Phaser.BOTTOM_CENTER,0,25),i.readLine(t,s=>{e.destroy(!0),t.destroy(!0),this.game.state.start("play"),a.GameState.pendingOnCreate.push(e=>{console.log("Loading New Game..."),e.gameManager.playerName=s,e.gameManager.storageManager.loadGameObjects(this.game.cache.getJSON("Level-0-GameObjects")),console.log("Loaded!")})},{maximumLength:20})}}},function(e,t,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.chunk=function(e,t){const s=e.slice(),i=[];for(;s.length;)i.push(s.splice(0,t));return i},t.readLine=function(e,t,s){const i=[],a="maximumLength"in s?s.maximumLength:100,r=s=>{if("Enter"===s.key)return document.removeEventListener("keydown",r),void t(i.join(""));if("Backspace"===s.key)i.length&&i.pop();else{if(!(i.length<=a&&/^[\(\)\[\]\w\d\-!?¡¿ ]$/.test(s.key)))return;i.push(s.key)}e.text=i.join("")};document.addEventListener("keydown",r)}},function(e,t,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=s(11),a=s(0);t.PlayState=class extends a.GameState{constructor(){super(...arguments),this.gameManager=null,this.tilemaps=new Map,this.obstacleLayer=null,this.escListener=null,this.pendingForTogglePause=!1}create(){this.getTilemap(0),this.game.input.keyboard.addKeyCapture([Phaser.Keyboard.LEFT,Phaser.Keyboard.RIGHT,Phaser.Keyboard.UP,Phaser.Keyboard.DOWN,Phaser.Keyboard.SPACEBAR]),this.gameManager=new i.GameManager(this.game),this.game.physics.startSystem(Phaser.Physics.ARCADE),this.game.stage.backgroundColor="#000",super.create(),this.escListener=(e=>{"Escape"===e.key&&(this.world.setAllChildren("tint",this.game.paused?16777215:8026746),this.game.paused?this.game.paused=!1:this.pendingForTogglePause=!0)}),document.addEventListener("keydown",this.escListener)}shutdown(){document.removeEventListener("keydown",this.escListener),this.escListener=null,super.shutdown(this.game)}update(){this.pendingForTogglePause&&(this.game.paused=!0,this.pendingForTogglePause=!1),super.update(this.game),this.game.paused||(this.game.physics.arcade.collide(this.gameManager.gameObjectsGroup,this.obstacleLayer),this.gameManager.update())}getTilemap(e){const t=`Level-${e}`;let s=this.tilemaps.get(e);if(!s){(s=this.game.add.tilemap(t)).addTilesetImage("overworld");const i=s.createLayer(0);i.smoothed=!1,i.resizeWorld(),s.createLayer(1).smoothed=!1,this.obstacleLayer=s.createLayer(2),this.obstacleLayer.smoothed=!1,this.game.physics.arcade.enable(this.obstacleLayer),s.setCollisionByExclusion([],!0,this.obstacleLayer),this.tilemaps.set(e,s)}return s}}},function(e,t,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=s(12);var a;t.GameManager=class{constructor(e){this.game=e,this.mapManager=null,this.storageManager=new i.StorageManager(this),this.gameObjectsGroup=null,this.player=null,this.playerName=null,this.level=a.First,this.pendingOnCreate=[],this.gameObjectsGroup=this.game.add.group(),this.gameObjectsGroup.name="gameObjectsGroup",this.gameObjectsGroup.enableBody=!0,this.gameObjectsGroup.enableBodyDebug=!0,this.gameObjectsGroup.renderable=!0,console.log(this)}clear(){return this.gameObjectsGroup.killAll(),this}update(){for(const e of this.gameObjectsGroup.children)e.update();this.game.physics.arcade.collide(this.gameObjectsGroup,void 0,(e,t)=>e.collides(t)&&t.collides(e)),this.gameObjectsGroup.sort("y",Phaser.Group.SORT_ASCENDING)}},function(e){e[e.First=0]="First"}(a=t.GameLevels||(t.GameLevels={}))},function(e,t,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=s(2);t.StorageManager=class{constructor(e){this.gameManager=e}save(){localStorage.clear(),localStorage.setItem("gameObjects",JSON.stringify(this.gameManager.gameObjectsGroup.children)),localStorage.setItem("level",this.gameManager.level.toString()),localStorage.setItem("playerName",this.gameManager.playerName)}load(){this.gameManager.clear();const e=localStorage.getItem("level");if(null===e)throw new Error("Could not find a saved file.");const t=Number(e);this.gameManager.level=t;const s=JSON.parse(localStorage.getItem("gameObjects"));s&&this.loadGameObjects(s);const i=localStorage.getItem("playerName");i&&this.loadPlayerName(i)}loadGameObjects(e){for(const t of e){const e=i.GameObject.factory.get(t.type);if(!e)throw new Error(`Could not find a constructor for ${t.type||"unknown"}. Aborting.`);const s=new e(this.gameManager,t.position.x,t.position.y,t.key,t.frame).fromJSON(t);"Player"===t.type&&(this.gameManager.player=s)}}loadPlayerName(e){this.gameManager.playerName=e}}},function(e,t,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=s(14);t.GameObjectFactory=class extends i.Factory{}},function(e,t,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.Factory=class extends Map{}},function(e,t,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=s(16),a=s(1),r=s(3);t.Enemy=class extends r.Character{constructor(e,t,s){super(e,t,s,"enemy"),this.route=new i.Route,this.routeAt=1,this.pov=.85*Math.PI,this.isTarget=!1,this.onRoute=!0,this.reverse=!1}setTarget(e){return this.isTarget=e,this}update(){if(super.update(),this.onRoute&&this.route.size>1){const[e,t]=this.route.get(this.routeAt);this.moveTowards(e,t)||(this.routeAt===(this.reverse?0:this.route.size-1)&&(this.reverse=!this.reverse),this.routeAt+=this.reverse?-1:1)}}kill(){return this.onRoute=!1,super.kill()}moveTowards(e,t){const s=this.findNextDirection(e,t);return null===s?(this.stand(),!1):(this.changeDirection(s).walk(),!0)}findNextDirection(e,t){if(this.direction===a.Direction.up||this.direction===a.Direction.down){const s=this.findNextYDirection(t);return null===s?this.findNextXDirection(e):s}{const s=this.findNextXDirection(e);return null===s?this.findNextYDirection(t):s}}findNextXDirection(e){if(this.position.x===e)return null;const t=this.position.x-e;return t<-2?a.Direction.right:t>2?a.Direction.left:(this.setPosition(e,this.position.y),null)}findNextYDirection(e){if(this.position.y===e)return null;const t=this.position.y-e;return t<-2?a.Direction.down:t>2?a.Direction.up:(this.setPosition(this.position.x,e),null)}setPov(e){return this.pov=e,this}chase(){this.setState(a.EnemyState.pursuit)}fromJSON(e){return super.fromJSON(e),this.isTarget=e.isTarget,this.pov=e.pov,this.route.set(e.route),this}toJSON(){return Object.assign({},super.toJSON(),{isTarget:this.isTarget,pov:this.pov,route:this.route.toJSON()})}}},function(e,t,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.Route=class{constructor(){this.route=[]}get size(){return this.route.length}get(e){return e<this.route.length?this.route[e]:null}set(e){return this.route=e,this}add(e,t){return this.route.push("number"==typeof e?[e,t]:e),this}remove(e,t){const s="number"==typeof e?[e,t]:e,i=this.route.findIndex(e=>e[0]===s[0]&&e[0]===s[1]);return-1!==i&&this.route.splice(i,1),this}reset(){return this.route.length=0,this}toJSON(){return this.route.slice()}}},function(e,t,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=s(1),a=s(3);t.Player=class extends a.Character{constructor(e,t,s){super(e,t,s,"player"),this.hidingSpot=null,this.directions={down:!1,left:!1,right:!1,up:!1},this.cursorKeys=this.game.input.keyboard.createCursorKeys(),this.actions={interact:!1,kill:!1},this.movementRefresh=0,this.game.camera.follow(this,Phaser.Camera.FOLLOW_LOCKON,.1,.1),this.body.immovable=!1}update(){if(Date.now()<this.movementRefresh)return;this.directions.down=this.cursorKeys.down.isDown,this.directions.left=this.cursorKeys.left.isDown,this.directions.right=this.cursorKeys.right.isDown,this.directions.up=this.cursorKeys.up.isDown;const e=this.gameManager.game.input.keyboard,t=e.isDown(Phaser.Keyboard.SHIFT);this.directions.down!==this.directions.up?(this.direction=this.directions.down?i.Direction.down:i.Direction.up,t?this.run():this.walk()):this.directions.left!==this.directions.right?(this.direction=this.directions.left?i.Direction.left:i.Direction.right,t?this.run():this.walk()):this.stand(),e.isDown(Phaser.Keyboard.X)?(this.actions.interact=!1,this.actions.kill=!0,this.triggerWalk()):e.isDown(Phaser.Keyboard.Z)?(this.actions.interact=!0,this.actions.kill=!1,this.triggerWalk()):(this.actions.interact=!1,this.actions.kill=!1)}attack(e){return super.attack(e),e.kill(),this.movementRefresh=this.attackRefresh,this}collides(e){if(e instanceof a.Character)return this.actions.kill?this.attack(e):this.actions.interact&&e.interact(this),!0}hide(e){return e.hidingType!==i.HidingType.none&&(this.setState(i.PlayerState.hidden),this.hidingSpot=e),this}reveal(){return this.hidingSpot&&(this.setState(this.health?i.PlayerState.stand:i.PlayerState.dead),this.hidingSpot=null),this}fromJSON(e){return super.fromJSON(e),this}toJSON(){return Object.assign({},super.toJSON(),{hidingSpot:this.hidingSpot.toJSON()})}}},function(e,t,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=s(1),a=s(2);t.HidingSpot=class extends a.GameObject{constructor(e,t,s){super(e,t,s,"hidingSpot"),this.hidingType=i.HidingType.none}setHidingType(e){return this.hidingType=e,this}toJSON(){return Object.assign({},super.toJSON(),{hidingType:this.hidingType})}}},function(e,t,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=s(1),a=s(4);t.Boulder=class extends a.Trap{constructor(e,t,s){super(e,t,s,"boulder"),this.state=i.BoulderState.stop,this.direction=i.Direction.down,this.speed=0}move(){switch(this.state=i.BoulderState.move,this.direction){case i.Direction.down:this.body.velocity.x=0,this.body.velocity.y=this.speed;break;case i.Direction.up:this.body.velocity.x=0,this.body.velocity.y=-this.speed;break;case i.Direction.left:this.body.velocity.x=-this.speed,this.body.velocity.y=0;break;default:this.body.velocity.x=this.speed,this.body.velocity.y=0}}stop(){this.state=i.BoulderState.stop,this.body.velocity.x=0,this.body.velocity.y=0}setDirection(e){return this.direction=e,this}setSpeed(e){return this.speed=e,this}}},function(e,t,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=s(0);t.PreloaderState=class extends i.GameState{preload(){this.loadingBar=this.game.add.sprite(0,240,"preloader_bar"),this.loadingBar.anchor.setTo(0,.5),this.load.setPreloadSprite(this.loadingBar),this.game.load.spritesheet("player","images/player.png",48,96),this.game.load.spritesheet("enemy","images/enemy.png",48,96),this.game.load.tilemap("Level-0","json/Level-0.json",null,Phaser.Tilemap.TILED_JSON),this.game.load.image("overworld","images/overworld.png"),this.game.load.image("cave","images/cave.png"),this.game.load.image("objects","images/objects.png"),this.game.load.image("logo","images/StonesCreed.png")}create(){this.game.state.start("menu")}}},function(e,t,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.WIN_WIDTH=800,t.WIN_HEIGHT=600}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,