!function(t){var e={};function i(s){if(e[s])return e[s].exports;var a=e[s]={i:s,l:!1,exports:{}};return t[s].call(a.exports,a,a.exports,i),a.l=!0,a.exports}i.m=t,i.c=e,i.d=function(t,e,s){i.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:s})},i.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},i.t=function(t,e){if(1&e&&(t=i(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var s=Object.create(null);if(i.r(s),Object.defineProperty(s,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var a in t)i.d(s,a,function(e){return t[e]}.bind(null,a));return s},i.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return i.d(e,"a",e),e},i.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},i.p="",i(i.s=6)}([function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});class s extends Phaser.State{create(){super.create(this.game);for(const t of s.pendingOnCreate)t(this);s.pendingOnCreate.length=0}}s.pendingOnCreate=[],e.GameState=s},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),function(t){t[t.up=0]="up",t[t.down=1]="down",t[t.right=2]="right",t[t.left=3]="left"}(e.Direction||(e.Direction={})),function(t){t[t.stop=0]="stop",t[t.move=1]="move"}(e.BoulderState||(e.BoulderState={})),function(t){t[t.none=0]="none",t[t.bushes=1]="bushes",t[t.cave=2]="cave",t[t.haystack=3]="haystack"}(e.HidingType||(e.HidingType={})),e.CharacterState={0:"dead",1:"dying",2:"run",3:"stand",4:"walk",dead:0,dying:1,run:2,stand:3,walk:4},e.PlayerState=Object.assign({},e.CharacterState,{5:"hidden",hidden:5}),e.EnemyState=Object.assign({},e.CharacterState,{6:"backToRoute",7:"onRoute",8:"pursuit",9:"searching",backToRoute:6,onRoute:7,pursuit:8,searching:9})},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const s=i(15);class a extends Phaser.Sprite{constructor(t,e,i,s,a){super(t.game,e,i,s,a),this.gameManager=t,this.game.add.existing(this),this.game.physics.arcade.enable(this),this.gameManager.gameObjectsGroup.add(this),this.body.collideWorldBounds=!0,this.body.allowRotation=!1,this.body.allowGravity=!1,this.body.immovable=!0,this.smoothed=!1}collides(t){if(!(t instanceof a))throw new TypeError('"gameObject" must be an instance of GameObject.');return!0}setPosition(t,e){return this.body.position.x=t,this.body.position.y=e,this}setVelocity(t,e){return this.body.velocity.x=t,this.body.velocity.y=e,this}interact(t){return t.interaction(this),this}interaction(t){if(!(t instanceof a))throw new TypeError("Expected gameObject to be a GameObject instance")}fromJSON(t){return this.name=t.name,this.setVelocity(t.velocity.x,t.velocity.y),this}toJSON(){return{frame:this.frame,key:this.key,name:this.name,position:{x:this.position.x,y:this.position.y},type:"GameObject",velocity:{x:this.body.velocity.x,y:this.body.velocity.y}}}positionInTiles(){return new Phaser.Point(this.body.position.x/o.TILE_SIZE,this.body.position.y/o.TILE_SIZE)}distanceTo(t){return this.body.position.distance(t.body.position)}distanceInTilesTo(t){return this.distanceTo(t)/o.TILE_SIZE}angleTo(t){return Math.atan2(t.body.position.y-this.body.position.y,t.body.position.x-this.body.position.x)}}a.factory=new s.GameObjectFactory,e.GameObject=a;const o=i(3),r=i(4),n=i(17),h=i(19),l=i(20),c=i(21),d=i(5);a.factory.set("GameObject",a),a.factory.set("Character",r.Character),a.factory.set("Player",h.Player),a.factory.set("Enemy",n.Enemy),a.factory.set("HidingSpot",l.HidingSpot),a.factory.set("Boulder",c.Boulder),a.factory.set("Trap",d.Trap)},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.WIN_WIDTH=800,e.WIN_HEIGHT=600,e.TILE_SIZE=48},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const s=i(1),a=i(2);e.Character=class extends a.GameObject{constructor(t,e,i,a,o){super(t,e,i,a,o),this.walkSpeed=0,this.runSpeed=0,this.state=s.CharacterState.stand,this.direction=s.Direction.down,this.strength=0,this.attackCooldown=500,this.attackRefresh=0,this.body.setSize(.9*this.width,.3*this.height,.1*this.width/2,.6*this.height),this.animations.add("stand.down",[0]),this.animations.add("move.down",[1,2,3,4]),this.animations.add("kill.down",[5,6,7]),this.animations.add("dead.down",[8,9,10]),this.animations.add("stand.right",[11]),this.animations.add("move.right",[12,13,14,15]),this.animations.add("kill.right",[16,17,18]),this.animations.add("dead.right",[19,20,21]),this.animations.add("stand.up",[22]),this.animations.add("move.up",[23,24,25,26]),this.animations.add("kill.up",[27,28,29]),this.animations.add("dead.up",[30,31,32]),this.animations.add("stand.left",[33]),this.animations.add("move.left",[34,35,36,37]),this.animations.add("kill.left",[38,39,40]),this.animations.add("dead.left",[41,42,43])}setStrength(t){return this.strength=t,this}setState(t){return this.state=t,this}attack(t){if(!(Date.now()<this.attackRefresh))return this.attackRefresh=Date.now()+this.attackCooldown,t.damage(this.strength),this.animations.play(`kill.${s.Direction[this.direction]}`,1e3/this.attackCooldown*3),this}kill(){return this.setVelocity(0,0),this.setState(s.CharacterState.dying),this.animations.play(`dead.${s.Direction[this.direction]}`,1.5),this.game.time.events.add(3*Phaser.Timer.SECOND,()=>{this.setState(s.CharacterState.dead),super.kill()}),this}walk(){return this.animations.play(`move.${s.Direction[this.direction]}`,5),this.updateVelocity(this.walkSpeed),this}run(){return this.animations.play(`move.${s.Direction[this.direction]}`,8),this.updateVelocity(this.runSpeed),this}stand(){return this.animations.play(`stand.${s.Direction[this.direction]}`,0),this.animations.stop(),this.setVelocity(0,0),this}setDirection(t){return this.direction=t,this}relativeAngleTo(t){return this.angleTo(t)-this.relativeAngle}fromJSON(t){return super.fromJSON(t),this.direction=t.direction,this.runSpeed=t.runSpeed,this.walkSpeed=t.walkSpeed,this.setStrength(t.strength),this}toJSON(){return Object.assign({},super.toJSON(),{direction:this.direction,runSpeed:this.runSpeed,strength:this.strength,type:"Character",walkSpeed:this.walkSpeed})}triggerWalk(){this.updateVelocity(this.walkSpeed)}updateVelocity(t){switch(this.direction){case s.Direction.down:this.setVelocity(0,t);break;case s.Direction.up:this.setVelocity(0,-t);break;case s.Direction.left:this.setVelocity(-t,0);break;default:this.setVelocity(t,0)}}get relativeAngle(){switch(this.direction){case s.Direction.down:return Phaser.Math.HALF_PI;case s.Direction.left:return Math.PI;case s.Direction.right:return 0;case s.Direction.up:return-Phaser.Math.HALF_PI}}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const s=i(2);e.Trap=class extends s.GameObject{constructor(){super(...arguments),this.active=!1,this.damageStrength=0,this.lethal=!1}setDamageStrength(t){return this.damageStrength=t,this}setLethal(t){return this.lethal=t,this}setActive(t){return this.active=t,this}onContact(t){this.lethal?t.kill():t.damage(this.damageStrength)}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const s=i(7),a=i(9),o=i(10),r=i(12),n=i(22),h=i(3);window.onload=function(){const t=new Phaser.Game(h.WIN_WIDTH,h.WIN_HEIGHT,Phaser.AUTO,"game");t.state.add("boot",s.BootState),t.state.add("preloader",n.PreloaderState),t.state.add("play",r.PlayState),t.state.add("menu",a.MenuState),t.state.add("newGame",o.NewGameState),t.state.start("boot")}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const s=i(8),a=i(0);e.BootState=class extends a.GameState{preload(){this.game.load.image("preloader_bar","images/preloader_bar.png")}create(){this.game.pathFinder=this.game.plugins.add(s.PathFinderPlugin),this.game.state.start("preloader")}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});e.PathFinderPlugin=class extends Phaser.Plugin{constructor(t,e){if(super(t,e),this._easyStar=new EasyStar.js,this._grid=null,this._callback=null,this._prepared=!1,this._walkables=[0],"object"!=typeof EasyStar)throw new Error("Easystar is not defined!")}setGrid(t,e,i=null){this._grid=[];for(let e=0;e<t.length;e++){this._grid[e]=[];for(let i=0;i<t[e].length;i++)this._grid[e][i]=t[e][i]?t[e][i].index:0}this._walkables=e,this._easyStar.setGrid(this._grid),this._easyStar.setAcceptableTiles(this._walkables);for(const t of e)this.setTileCost(t,1);null!==i&&this._easyStar.setIterationsPerCalculation(i)}setTileCost(t,e){this._easyStar.setTileCost(t,e)}setCallbackFunction(t){this._callback=t}preparePathCalculation(t,e){if(!this._callback)throw new Error("No Callback set!");const[i,s]=t,[a,o]=e;this._easyStar.findPath(i,s,a,o,this._callback),this._prepared=!0}calculatePath(){if(null===this._prepared)throw new Error("no Calculation prepared!");this._easyStar.calculate()}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const s=i(0);e.MenuState=class extends s.GameState{constructor(){super(...arguments),this.texts=[],this.logo=null}create(){super.create(),this.game.stage.backgroundColor="#2A1B19",this.logo=this.game.add.sprite(this.game.world.centerX,this.game.world.centerY-120,"logo"),this.logo.anchor.setTo(.5,.5),this.logo.scale.setTo(.5,.5),this.createButton("New Game",()=>{this.game.state.start("newGame")}),localStorage.getItem("level")&&this.createButton("Continue",()=>{s.GameState.pendingOnCreate.push(t=>{t.gameManager.storage.load()}),this.game.state.start("play")})}shutdown(){for(const t of this.texts)t.destroy(!0);this.texts.length=0,this.logo.destroy(!0),super.shutdown(this.game)}createButton(t,e){const i=this.game.add.text(this.game.world.centerX,this.game.world.centerY,t,{font:"65px Arial",fill:"#CDCDCD",align:"center"});i.anchor.set(.5),i.inputEnabled=!0,i.events.onInputUp.add(e,this),i.events.onInputDown.add(()=>{i.fill="#FF0044",i.events.onInputOver.removeAll(),i.events.onInputOut.removeAll()}),i.events.onInputOver.add(()=>{i.fill="#FFFFFF"}),i.events.onInputOut.add(()=>{i.fill="#EFEFEF"}),i.alignTo(this.texts.length?this.texts[this.texts.length-1]:this.logo,Phaser.BOTTOM_CENTER,0,16),this.texts.push(i)}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const s=i(11),a=i(0);e.NewGameState=class extends a.GameState{preload(){super.preload(this.game),this.game.load.json("Level-0-GameObjects","json/Level-0-GameObjects.json")}create(){const t=this.game.add.text(this.game.world.centerX,this.game.world.centerY-65,"Insert your name",{font:"65px Arial",fill:"#CDCDCD",align:"center"});t.anchor.setTo(.5,.5);const e=this.game.add.text(this.game.world.centerX,this.game.world.centerY,"",{font:"65px Arial",fill:"#CDCDCD",align:"center"});e.anchor.setTo(.5,.5),e.alignTo(t,Phaser.BOTTOM_CENTER,0,25),s.readLine(e,i=>{t.destroy(!0),e.destroy(!0),this.game.state.start("play"),a.GameState.pendingOnCreate.push(t=>{console.log("Loading New Game..."),t.gameManager.playerName=i,t.gameManager.storage.loadGameObjects(this.game.cache.getJSON("Level-0-GameObjects")),console.log("Loaded!")})},{maximumLength:20})}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.chunk=function(t,e){const i=t.slice(),s=[];for(;i.length;)s.push(i.splice(0,e));return s},e.readLine=function(t,e,i){const s=[],a="maximumLength"in i?i.maximumLength:100,o=i=>{if("Enter"===i.key)return document.removeEventListener("keydown",o),void e(s.join(""));if("Backspace"===i.key)s.length&&s.pop();else{if(!(s.length<=a&&/^[\(\)\[\]\w\d\-!?¡¿ ]$/.test(i.key)))return;s.push(i.key)}t.text=s.join("")};document.addEventListener("keydown",o)}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const s=i(13),a=i(0);e.PlayState=class extends a.GameState{constructor(){super(...arguments),this.gameManager=null,this.tilemaps=new Map,this.obstacleLayer=null,this.events=new Map,this.escListener=null}create(){this.getTilemap(0),this.game.input.keyboard.addKeyCapture([Phaser.Keyboard.LEFT,Phaser.Keyboard.RIGHT,Phaser.Keyboard.UP,Phaser.Keyboard.DOWN,Phaser.Keyboard.SPACEBAR]),this.gameManager=new s.GameManager(this),this.game.physics.startSystem(Phaser.Physics.ARCADE),this.game.stage.backgroundColor="#000",super.create();const t=()=>{this.world.setAllChildren("tint",8026746)},e=()=>{this.world.setAllChildren("tint",16777215)};this.events.set("onPause",t),this.events.set("onResume",e),this.game.onPause.add(t),this.game.onResume.add(e),this.escListener=(t=>{"Escape"===t.key&&(this.game.paused=!this.game.paused)}),document.addEventListener("keydown",this.escListener),this.game.pathFinder.setGrid(this.obstacleLayer.layer.data,[-1])}shutdown(){document.removeEventListener("keydown",this.escListener),this.escListener=null,this.game.onPause.remove(this.events.get("onPause")),this.game.onResume.remove(this.events.get("onResume")),this.events.clear(),super.shutdown(this.game)}update(){super.update(this.game),this.game.paused||(this.game.physics.arcade.collide(this.gameManager.gameObjectsGroup,this.obstacleLayer),this.gameManager.update())}getTilemap(t){const e=`Level-${t}`;let i=this.tilemaps.get(t);if(!i){(i=this.game.add.tilemap(e)).addTilesetImage("overworld");const s=i.createLayer(0);s.smoothed=!1,s.resizeWorld(),i.createLayer(1).smoothed=!1,this.obstacleLayer=i.createLayer(2),this.obstacleLayer.smoothed=!1,this.game.physics.arcade.enable(this.obstacleLayer),i.setCollisionByExclusion([],!0,this.obstacleLayer),this.tilemaps.set(t,i)}return i}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const s=i(14);var a;e.GameManager=class{constructor(t){this.state=t,this.mapManager=null,this.game=this.state.game,this.storage=new s.StorageManager(this),this.gameObjectsGroup=null,this.player=null,this.playerName=null,this.level=a.First,this.pendingOnCreate=[],this.gameObjectsGroup=this.game.add.group(),this.gameObjectsGroup.name="gameObjectsGroup",this.gameObjectsGroup.enableBody=!0,this.gameObjectsGroup.enableBodyDebug=!0,this.gameObjectsGroup.renderable=!0,console.log(this)}clear(){return this.gameObjectsGroup.killAll(),this}update(){for(const t of this.gameObjectsGroup.children)t.update();this.game.physics.arcade.collide(this.gameObjectsGroup,void 0,(t,e)=>t.collides(e)&&e.collides(t)),this.gameObjectsGroup.sort("y",Phaser.Group.SORT_ASCENDING)}},function(t){t[t.First=0]="First"}(a=e.GameLevels||(e.GameLevels={}))},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const s=i(2);e.StorageManager=class{constructor(t){this.gameManager=t}save(){localStorage.clear(),localStorage.setItem("gameObjects",JSON.stringify(this.gameManager.gameObjectsGroup.children)),localStorage.setItem("level",this.gameManager.level.toString()),localStorage.setItem("playerName",this.gameManager.playerName)}load(){this.gameManager.clear();const t=localStorage.getItem("level");if(null===t)throw new Error("Could not find a saved file.");const e=Number(t);this.gameManager.level=e;const i=JSON.parse(localStorage.getItem("gameObjects"));i&&this.loadGameObjects(i);const s=localStorage.getItem("playerName");s&&this.loadPlayerName(s)}loadGameObjects(t){for(const e of t){const t=s.GameObject.factory.get(e.type);if(!t)throw new Error(`Could not find a constructor for ${e.type||"unknown"}. Aborting.`);const i=new t(this.gameManager,e.position.x,e.position.y,e.key,e.frame).fromJSON(e);"Player"===e.type&&(this.gameManager.player=i)}}loadPlayerName(t){this.gameManager.playerName=t}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const s=i(16);e.GameObjectFactory=class extends s.Factory{}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});e.Factory=class extends Map{}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const s=i(3),a=i(18),o=i(1),r=i(4);e.Enemy=class extends r.Character{constructor(t,e,i){super(t,e,i,"enemy"),this.route=new a.Route,this.routeAt=1,this.pov=Math.PI/180*80,this.isTarget=!1,this.reverse=!1,this.playerLastKnownPosition=null,this.pathRoute=[],this.updatedRoute=!0,this.timer=null}setTarget(t){return this.isTarget=t,this}update(){super.update(),this.state!==o.EnemyState.dying&&this.state!==o.EnemyState.dead&&(this.state!==o.EnemyState.pursuit?this.detectPlayer()?this.onBeginDetection(this.gameManager.player):this.state!==o.EnemyState.searching&&(this.state===o.EnemyState.backToRoute&&this.pathRoute.length?this.moveTowards(this.pathRoute[0])||(this.pathRoute.shift(),this.pathRoute.length||this.setState(o.EnemyState.onRoute)):this.route.size>1?this.moveTowards(this.route.get(this.routeAt))||(this.routeAt===(this.reverse?0:this.route.size-1)&&(this.reverse=!this.reverse),this.routeAt+=this.reverse?-1:1):this.stand().setState(o.EnemyState.stand)):this.onDetection(this.gameManager.player))}moveTowards(t){const e=this.findNextDirection(t.x,t.y);return null===e?(this.stand(),!1):(this.setDirection(e).walk(),!0)}findNextDirection(t,e){if(this.direction===o.Direction.up||this.direction===o.Direction.down){const i=this.findNextYDirection(e);return null===i?this.findNextXDirection(t):i}{const i=this.findNextXDirection(t);return null===i?this.findNextYDirection(e):i}}findNextXDirection(t){if(this.body.position.x===t)return null;const e=this.body.position.x-t;return e<-2?o.Direction.right:e>2?o.Direction.left:(this.setPosition(t,this.body.position.y),null)}findNextYDirection(t){if(this.body.position.y===t)return null;const e=this.body.position.y-t;return e<-2?o.Direction.down:e>2?o.Direction.up:(this.setPosition(this.body.position.x,t),null)}setPov(t){return this.pov=t,this}fromJSON(t){return super.fromJSON(t),this.isTarget=t.isTarget,this.pov=t.pov,this.route.set(t.route.map(t=>new Phaser.Point(t[0],t[1]))),this}toJSON(){return Object.assign({},super.toJSON(),{isTarget:this.isTarget,pov:this.pov,route:this.route.toJSON(),type:"Enemy"})}detectPlayer(){if(!this.seesPlayer())return!1;const{player:t}=this.gameManager,e=new Phaser.Line(this.body.position.x+this.body.halfWidth,this.body.position.y+this.body.halfHeight,t.body.position.x+t.body.halfWidth,t.body.position.y+t.body.halfHeight);return!(this.gameManager.state.obstacleLayer.getRayCastTiles(e,4,!0,!1).filter(t=>-1!==t.index).length&&t.state!==o.PlayerState.run||(this.onBeginDetection(t),0))}onBeginDetection(t){this.pathRoute.length=0,this.setState(o.EnemyState.pursuit),this.preparePathRoute(t.body.position),this.playerLastKnownPosition=t.position.clone(),this.timer&&(this.game.time.events.remove(this.timer),this.timer=null)}onDetection(t){this.pathRoute.length&&!this.moveTowards(this.pathRoute[0])&&(this.seesPlayer()&&(t.body.position.clone(this.playerLastKnownPosition),this.preparePathRoute(this.playerLastKnownPosition)),this.pathRoute.length>1?this.pathRoute.shift():this.onEndDetection())}onEndDetection(){if(this.timer)return;this.playerLastKnownPosition=null,this.pathRoute.length=0,this.setState(o.EnemyState.searching);let t=0;this.timer=this.game.time.events.repeat(Phaser.Timer.SECOND,4,()=>{if(4==++t)this.timer=null,this.setState(o.EnemyState.backToRoute),this.preparePathRoute(this.route.get(this.routeAt));else{let t;switch(this.direction){case o.Direction.down:t=o.Direction.up;break;case o.Direction.left:t=o.Direction.right;break;case o.Direction.up:t=o.Direction.left;break;default:t=o.Direction.down}this.setDirection(t),this.animations.play(`stand.${o.Direction[this.direction]}`,0)}})}preparePathRoute(t){if(!this.updatedRoute)return;this.updatedRoute=!1,this.game.pathFinder.setCallbackFunction(t=>{this.updatedRoute=!0,t?(this.pathRoute=t.map(t=>new Phaser.Point(t.x*s.TILE_SIZE,t.y*s.TILE_SIZE)),this.pathRoute.shift()):this.onEndDetection()});const e=this.positionInTiles();this.game.pathFinder.preparePathCalculation([Math.floor(e.x),Math.floor(e.y)],[Math.floor(t.x/s.TILE_SIZE),Math.floor(t.y/s.TILE_SIZE)]),this.game.pathFinder.calculatePath()}seesPlayer(){const{player:t}=this.gameManager;if(!t||t.hidingSpot)return!1;if(this.distanceInTilesTo(t)>5)return!1;const e=this.relativeAngleTo(t);return Math.abs(e)<this.pov/2}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});e.Route=class{constructor(){this.route=[]}get size(){return this.route.length}get(t){return t<this.route.length?this.route[t]:null}set(t){return this.route=t,this}add(t,e){return this.route.push("number"==typeof t?new Phaser.Point(t,e):t),this}remove(t,e){const i="number"==typeof t?[t,e]:t,s=this.route.findIndex(t=>t[0]===i[0]&&t[0]===i[1]);return-1!==s&&this.route.splice(s,1),this}reset(){return this.route.length=0,this}toJSON(){return this.route.map(t=>[t.x,t.y])}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const s=i(1),a=i(4);e.Player=class extends a.Character{constructor(t,e,i){super(t,e,i,"player"),this.hidingSpot=null,this.directions={down:!1,left:!1,right:!1,up:!1},this.cursorKeys=this.game.input.keyboard.createCursorKeys(),this.actions={interact:!1,kill:!1},this.movementRefresh=0,this.game.camera.follow(this,Phaser.Camera.FOLLOW_LOCKON,.1,.1),this.body.immovable=!1}update(){if(super.update(),Date.now()<this.movementRefresh)return;this.directions.down=this.cursorKeys.down.isDown,this.directions.left=this.cursorKeys.left.isDown,this.directions.right=this.cursorKeys.right.isDown,this.directions.up=this.cursorKeys.up.isDown;const t=this.gameManager.game.input.keyboard,e=t.isDown(Phaser.Keyboard.SHIFT);this.directions.down!==this.directions.up?(this.setDirection(this.directions.down?s.Direction.down:s.Direction.up),e?this.setState(s.PlayerState.run).run():this.setState(s.PlayerState.walk).walk()):this.directions.left!==this.directions.right?(this.setDirection(this.directions.left?s.Direction.left:s.Direction.right),e?this.setState(s.PlayerState.run).run():this.setState(s.PlayerState.walk).walk()):this.stand().setState(s.PlayerState.stand),t.isDown(Phaser.Keyboard.X)?(this.actions.interact=!1,this.actions.kill=!0,this.triggerWalk()):t.isDown(Phaser.Keyboard.Z)?(this.actions.interact=!0,this.actions.kill=!1,this.triggerWalk()):t.isDown(Phaser.Keyboard.S)?this.gameManager.storage.save():(this.actions.interact=!1,this.actions.kill=!1)}attack(t){return super.attack(t),t.kill(),this.movementRefresh=this.attackRefresh,this}collides(t){if(t instanceof a.Character)return this.actions.kill?this.attack(t):this.actions.interact&&t.interact(this),!0}hide(t){return t.hidingType!==s.HidingType.none&&(this.setState(s.PlayerState.hidden),this.hidingSpot=t),this}reveal(){return this.hidingSpot&&(this.setState(this.health?s.PlayerState.stand:s.PlayerState.dead),this.hidingSpot=null),this}fromJSON(t){return super.fromJSON(t),this}toJSON(){return Object.assign({},super.toJSON(),{hidingSpot:this.hidingSpot?this.hidingSpot.toJSON():null,type:"Player"})}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const s=i(1),a=i(2);e.HidingSpot=class extends a.GameObject{constructor(t,e,i){super(t,e,i,"hidingSpot"),this.hidingType=s.HidingType.none}setHidingType(t){return this.hidingType=t,this}toJSON(){return Object.assign({},super.toJSON(),{hidingType:this.hidingType,type:"GameObject"})}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const s=i(1),a=i(5);e.Boulder=class extends a.Trap{constructor(t,e,i){super(t,e,i,"boulder"),this.state=s.BoulderState.stop,this.direction=s.Direction.down,this.speed=0}move(){switch(this.state=s.BoulderState.move,this.direction){case s.Direction.down:this.body.velocity.x=0,this.body.velocity.y=this.speed;break;case s.Direction.up:this.body.velocity.x=0,this.body.velocity.y=-this.speed;break;case s.Direction.left:this.body.velocity.x=-this.speed,this.body.velocity.y=0;break;default:this.body.velocity.x=this.speed,this.body.velocity.y=0}}stop(){this.state=s.BoulderState.stop,this.body.velocity.x=0,this.body.velocity.y=0}setDirection(t){return this.direction=t,this}setSpeed(t){return this.speed=t,this}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const s=i(0);e.PreloaderState=class extends s.GameState{preload(){this.loadingBar=this.game.add.sprite(0,240,"preloader_bar"),this.loadingBar.anchor.setTo(0,.5),this.load.setPreloadSprite(this.loadingBar),this.game.load.spritesheet("player","images/player.png",48,96),this.game.load.spritesheet("enemy","images/enemy.png",48,96),this.game.load.tilemap("Level-0","json/Level-0.json",null,Phaser.Tilemap.TILED_JSON),this.game.load.image("overworld","images/overworld.png"),this.game.load.image("cave","images/cave.png"),this.game.load.image("objects","images/objects.png"),this.game.load.image("logo","images/StonesCreed.png")}create(){this.game.state.start("menu")}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,