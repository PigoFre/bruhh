!function(t){var e={};function i(s){if(e[s])return e[s].exports;var a=e[s]={i:s,l:!1,exports:{}};return t[s].call(a.exports,a,a.exports,i),a.l=!0,a.exports}i.m=t,i.c=e,i.d=function(t,e,s){i.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:s})},i.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},i.t=function(t,e){if(1&e&&(t=i(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var s=Object.create(null);if(i.r(s),Object.defineProperty(s,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var a in t)i.d(s,a,function(e){return t[e]}.bind(null,a));return s},i.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return i.d(e,"a",e),e},i.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},i.p="",i(i.s=6)}([function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});class s extends Phaser.State{create(){super.create(this.game);for(const t of s.pendingOnCreate)t(this);s.pendingOnCreate.length=0}}s.pendingOnCreate=[],e.GameState=s},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),function(t){t[t.up=0]="up",t[t.down=1]="down",t[t.right=2]="right",t[t.left=3]="left"}(e.Direction||(e.Direction={})),function(t){t[t.stop=0]="stop",t[t.move=1]="move"}(e.BoulderState||(e.BoulderState={})),function(t){t[t.none=0]="none",t[t.bushes=1]="bushes",t[t.cave=2]="cave",t[t.haystack=3]="haystack"}(e.HidingType||(e.HidingType={})),e.CharacterState={0:"dead",1:"dying",2:"run",3:"stand",4:"walk",dead:0,dying:1,run:2,stand:3,walk:4},e.PlayerState=Object.assign({},e.CharacterState,{5:"hidden",hidden:5}),e.EnemyState=Object.assign({},e.CharacterState,{6:"backToRoute",7:"onRoute",8:"pursuit",9:"searching",backToRoute:6,onRoute:7,pursuit:8,searching:9})},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const s=i(15);class a extends Phaser.Sprite{constructor(t,e,i,s,a){super(t.game,e,i,s,a),this.gameManager=t,this.game.add.existing(this),this.game.physics.arcade.enable(this),this.gameManager.gameObjectsGroup.add(this),this.body.collideWorldBounds=!0,this.body.allowRotation=!1,this.body.allowGravity=!1,this.body.immovable=!0,this.smoothed=!1}collides(t){if(!(t instanceof a))throw new TypeError('"gameObject" must be an instance of GameObject.');return!0}setPosition(t,e){return this.body.position.x=t,this.body.position.y=e,this}setVelocity(t,e){return this.body.velocity.x=t,this.body.velocity.y=e,this}interact(t){return t.interaction(this),this}interaction(t){if(!(t instanceof a))throw new TypeError("Expected gameObject to be a GameObject instance")}fromJSON(t){return this.name=t.name,this.setVelocity(t.velocity.x,t.velocity.y),this}toJSON(){return{frame:this.frame,key:this.key,name:this.name,position:{x:this.position.x,y:this.position.y},type:"GameObject",velocity:{x:this.body.velocity.x,y:this.body.velocity.y}}}positionInTiles(){return new Phaser.Point(this.body.position.x/r.TILE_SIZE,this.body.position.y/r.TILE_SIZE)}distanceTo(t){return this.body.position.distance(t.body.position)}distanceInTilesTo(t){return this.distanceTo(t)/r.TILE_SIZE}angleTo(t){return Math.atan2(t.body.position.y-this.body.position.y,t.body.position.x-this.body.position.x)}}a.factory=new s.GameObjectFactory,e.GameObject=a;const r=i(3),n=i(4),o=i(17),h=i(20),l=i(21),d=i(22),c=i(5);a.factory.set("GameObject",a),a.factory.set("Character",n.Character),a.factory.set("Player",h.Player),a.factory.set("Enemy",o.Enemy),a.factory.set("HidingSpot",l.HidingSpot),a.factory.set("Boulder",d.Boulder),a.factory.set("Trap",c.Trap)},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.WIN_WIDTH=800,e.WIN_HEIGHT=600,e.TILE_SIZE=48},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const s=i(1),a=i(2);e.Character=class extends a.GameObject{constructor(t,e,i,a,r){super(t,e,i,a,r),this.walkSpeed=0,this.runSpeed=0,this.state=s.CharacterState.stand,this.direction=s.Direction.down,this.strength=0,this.attackCooldown=500,this.attackRefresh=0,this.body.setSize(.9*this.width,.3*this.height,.1*this.width/2,.6*this.height),this.animations.add("stand.down",[0]),this.animations.add("move.down",[1,2,3,4]),this.animations.add("kill.down",[5,6,7]),this.animations.add("dead.down",[8,9,10]),this.animations.add("stand.right",[11]),this.animations.add("move.right",[12,13,14,15]),this.animations.add("kill.right",[16,17,18]),this.animations.add("dead.right",[19,20,21]),this.animations.add("stand.up",[22]),this.animations.add("move.up",[23,24,25,26]),this.animations.add("kill.up",[27,28,29]),this.animations.add("dead.up",[30,31,32]),this.animations.add("stand.left",[33]),this.animations.add("move.left",[34,35,36,37]),this.animations.add("kill.left",[38,39,40]),this.animations.add("dead.left",[41,42,43])}setStrength(t){return this.strength=t,this}setState(t){return this.state=t,this}attack(t){if(!(Date.now()<this.attackRefresh))return this.attackRefresh=Date.now()+this.attackCooldown,t.damage(this.strength),this.animations.play(`kill.${s.Direction[this.direction]}`,1e3/this.attackCooldown*3),this}kill(){return this.setVelocity(0,0),this.setState(s.CharacterState.dying),this.animations.play(`dead.${s.Direction[this.direction]}`,1.5),this.game.time.events.add(3*Phaser.Timer.SECOND,()=>{this.setState(s.CharacterState.dead),super.kill()}),this}walk(){return this.animations.play(`move.${s.Direction[this.direction]}`,5),this.updateVelocity(this.walkSpeed),this}run(){return this.animations.play(`move.${s.Direction[this.direction]}`,8),this.updateVelocity(this.runSpeed),this}stand(){return this.animations.play(`stand.${s.Direction[this.direction]}`,0),this.animations.stop(),this.setVelocity(0,0),this}setDirection(t){return this.direction=t,this}relativeAngleTo(t){return this.angleTo(t)-this.relativeAngle}fromJSON(t){return super.fromJSON(t),this.direction=t.direction,this.runSpeed=t.runSpeed,this.walkSpeed=t.walkSpeed,this.setStrength(t.strength),this}toJSON(){return Object.assign({},super.toJSON(),{direction:this.direction,runSpeed:this.runSpeed,strength:this.strength,type:"Character",walkSpeed:this.walkSpeed})}triggerWalk(){this.updateVelocity(this.walkSpeed)}updateVelocity(t){switch(this.direction){case s.Direction.down:this.setVelocity(0,t);break;case s.Direction.up:this.setVelocity(0,-t);break;case s.Direction.left:this.setVelocity(-t,0);break;default:this.setVelocity(t,0)}}get relativeAngle(){switch(this.direction){case s.Direction.down:return Phaser.Math.HALF_PI;case s.Direction.left:return Math.PI;case s.Direction.right:return 0;case s.Direction.up:return-Phaser.Math.HALF_PI}}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const s=i(2);e.Trap=class extends s.GameObject{constructor(){super(...arguments),this.active=!1,this.damageStrength=0,this.lethal=!1}setDamageStrength(t){return this.damageStrength=t,this}setLethal(t){return this.lethal=t,this}setActive(t){return this.active=t,this}onContact(t){this.lethal?t.kill():t.damage(this.damageStrength)}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const s=i(7),a=i(9),r=i(10),n=i(12),o=i(23),h=i(3);window.onload=function(){const t=new Phaser.Game(h.WIN_WIDTH,h.WIN_HEIGHT,Phaser.AUTO,"game");t.state.add("boot",s.BootState),t.state.add("preloader",o.PreloaderState),t.state.add("play",n.PlayState),t.state.add("menu",a.MenuState),t.state.add("newGame",r.NewGameState),t.state.start("boot")}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const s=i(8),a=i(0);e.BootState=class extends a.GameState{preload(){this.game.load.image("preloader_bar","images/preloader_bar.png")}create(){this.game.pathFinder=this.game.plugins.add(s.PathFinderPlugin),this.game.state.start("preloader")}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});e.PathFinderPlugin=class extends Phaser.Plugin{constructor(t,e){if(super(t,e),this._easyStar=new EasyStar.js,this._grid=null,this._callback=null,this._prepared=!1,this._walkables=[0],"object"!=typeof EasyStar)throw new Error("Easystar is not defined!")}setGrid(t,e,i=null){this._grid=[];for(let e=0;e<t.length;e++){this._grid[e]=[];for(let i=0;i<t[e].length;i++)this._grid[e][i]=t[e][i]?t[e][i].index:0}this._walkables=e,this._easyStar.setGrid(this._grid),this._easyStar.setAcceptableTiles(this._walkables);for(const t of e)this.setTileCost(t,1);null!==i&&this._easyStar.setIterationsPerCalculation(i)}setTileCost(t,e){this._easyStar.setTileCost(t,e)}setCallbackFunction(t){this._callback=t}preparePathCalculation(t,e){if(!this._callback)throw new Error("No Callback set!");const[i,s]=t,[a,r]=e;this._easyStar.findPath(i,s,a,r,this._callback),this._prepared=!0}calculatePath(){if(null===this._prepared)throw new Error("no Calculation prepared!");this._easyStar.calculate()}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const s=i(0);e.MenuState=class extends s.GameState{constructor(){super(...arguments),this.texts=[],this.logo=null}create(){super.create(),this.game.stage.backgroundColor="#2A1B19",this.logo=this.game.add.sprite(this.game.world.centerX,this.game.world.centerY-120,"logo"),this.logo.anchor.setTo(.5,.5),this.logo.scale.setTo(.5,.5),this.createButton("New Game",()=>{this.game.state.start("newGame")}),localStorage.getItem("level")&&this.createButton("Continue",()=>{s.GameState.pendingOnCreate.push(t=>{t.gameManager.storage.load()}),this.game.state.start("play")})}shutdown(){for(const t of this.texts)t.destroy(!0);this.texts.length=0,this.logo.destroy(!0),super.shutdown(this.game)}createButton(t,e){const i=this.game.add.text(this.game.world.centerX,this.game.world.centerY,t,{font:"65px Arial",fill:"#CDCDCD",align:"center"});i.anchor.set(.5),i.inputEnabled=!0,i.events.onInputUp.add(e,this),i.events.onInputDown.add(()=>{i.fill="#FF0044",i.events.onInputOver.removeAll(),i.events.onInputOut.removeAll()}),i.events.onInputOver.add(()=>{i.fill="#FFFFFF"}),i.events.onInputOut.add(()=>{i.fill="#EFEFEF"}),i.alignTo(this.texts.length?this.texts[this.texts.length-1]:this.logo,Phaser.BOTTOM_CENTER,0,16),this.texts.push(i)}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const s=i(11),a=i(0);e.NewGameState=class extends a.GameState{preload(){super.preload(this.game),this.game.load.json("Level-0-GameObjects","json/Level-0-GameObjects.json")}create(){const t=this.game.add.text(this.game.world.centerX,this.game.world.centerY-65,"Insert your name",{font:"65px Arial",fill:"#CDCDCD",align:"center"});t.anchor.setTo(.5,.5);const e=this.game.add.text(this.game.world.centerX,this.game.world.centerY,"",{font:"65px Arial",fill:"#CDCDCD",align:"center"});e.anchor.setTo(.5,.5),e.alignTo(t,Phaser.BOTTOM_CENTER,0,25),s.readLine(e,i=>{t.destroy(!0),e.destroy(!0),this.game.state.start("play"),a.GameState.pendingOnCreate.push(t=>{console.log("Loading New Game..."),t.gameManager.playerName=i,t.gameManager.storage.loadGameObjects(this.game.cache.getJSON("Level-0-GameObjects")),console.log("Loaded!")})},{maximumLength:20})}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.chunk=function(t,e){const i=t.slice(),s=[];for(;i.length;)s.push(i.splice(0,e));return s},e.readLine=function(t,e,i){const s=[],a="maximumLength"in i?i.maximumLength:100,r=i=>{if("Enter"===i.key)return document.removeEventListener("keydown",r),void e(s.join(""));if("Backspace"===i.key)s.length&&s.pop();else{if(!(s.length<=a&&/^[\(\)\[\]\w\d\-!?¡¿ ]$/.test(i.key)))return;s.push(i.key)}t.text=s.join("")};document.addEventListener("keydown",r)}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const s=i(13),a=i(0);e.PlayState=class extends a.GameState{constructor(){super(...arguments),this.gameManager=null,this.tilemaps=new Map,this.obstacleLayer=null,this.events=new Map,this.escListener=null}create(){this.getTilemap(0),this.game.input.keyboard.addKeyCapture([Phaser.Keyboard.LEFT,Phaser.Keyboard.RIGHT,Phaser.Keyboard.UP,Phaser.Keyboard.DOWN,Phaser.Keyboard.SPACEBAR]),this.gameManager=new s.GameManager(this),this.game.physics.startSystem(Phaser.Physics.ARCADE),this.game.stage.backgroundColor="#000",super.create();const t=()=>{this.world.setAllChildren("tint",8026746)},e=()=>{this.world.setAllChildren("tint",16777215)};this.events.set("onPause",t),this.events.set("onResume",e),this.game.onPause.add(t),this.game.onResume.add(e),this.escListener=(t=>{"Escape"===t.key&&(this.game.paused=!this.game.paused)}),document.addEventListener("keydown",this.escListener),this.game.pathFinder.setGrid(this.obstacleLayer.layer.data,[-1])}shutdown(){document.removeEventListener("keydown",this.escListener),this.escListener=null,this.game.onPause.remove(this.events.get("onPause")),this.game.onResume.remove(this.events.get("onResume")),this.events.clear(),super.shutdown(this.game)}update(){super.update(this.game),this.game.paused||(this.game.physics.arcade.collide(this.gameManager.gameObjectsGroup,this.obstacleLayer),this.gameManager.update())}getTilemap(t){const e=`Level-${t}`;let i=this.tilemaps.get(t);if(!i){(i=this.game.add.tilemap(e)).addTilesetImage("overworld");const s=i.createLayer(0);s.smoothed=!1,s.resizeWorld(),i.createLayer(1).smoothed=!1,this.obstacleLayer=i.createLayer(2),this.obstacleLayer.smoothed=!1,this.game.physics.arcade.enable(this.obstacleLayer),i.setCollisionByExclusion([],!0,this.obstacleLayer),this.tilemaps.set(t,i)}return i}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const s=i(14);var a;e.GameManager=class{constructor(t){this.state=t,this.mapManager=null,this.game=this.state.game,this.storage=new s.StorageManager(this),this.gameObjectsGroup=null,this.player=null,this.playerName=null,this.level=a.First,this.pendingOnCreate=[],this.gameObjectsGroup=this.game.add.group(),this.gameObjectsGroup.name="gameObjectsGroup",this.gameObjectsGroup.enableBody=!0,this.gameObjectsGroup.enableBodyDebug=!0,this.gameObjectsGroup.renderable=!0,console.log(this)}clear(){return this.gameObjectsGroup.killAll(),this}update(){for(const t of this.gameObjectsGroup.children)t.update();this.game.physics.arcade.collide(this.gameObjectsGroup,void 0,(t,e)=>t.collides(e)&&e.collides(t)),this.gameObjectsGroup.sort("y",Phaser.Group.SORT_ASCENDING)}},function(t){t[t.First=0]="First"}(a=e.GameLevels||(e.GameLevels={}))},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const s=i(2);e.StorageManager=class{constructor(t){this.gameManager=t}save(){localStorage.clear(),localStorage.setItem("gameObjects",JSON.stringify(this.gameManager.gameObjectsGroup.children)),localStorage.setItem("level",this.gameManager.level.toString()),localStorage.setItem("playerName",this.gameManager.playerName)}load(){this.gameManager.clear();const t=localStorage.getItem("level");if(null===t)throw new Error("Could not find a saved file.");const e=Number(t);this.gameManager.level=e;const i=JSON.parse(localStorage.getItem("gameObjects"));i&&this.loadGameObjects(i);const s=localStorage.getItem("playerName");s&&this.loadPlayerName(s)}loadGameObjects(t){for(const e of t){const t=s.GameObject.factory.get(e.type);if(!t)throw new Error(`Could not find a constructor for ${e.type||"unknown"}. Aborting.`);const i=new t(this.gameManager,e.position.x,e.position.y,e.key,e.frame).fromJSON(e);"Player"===e.type&&(this.gameManager.player=i)}}loadPlayerName(t){this.gameManager.playerName=t}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const s=i(16);e.GameObjectFactory=class extends s.Factory{}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});e.Factory=class extends Map{}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const s=i(3),a=i(18),r=i(1),n=i(19),o=i(4);e.Enemy=class extends o.Character{constructor(t,e,i){super(t,e,i,"enemy"),this.route=new a.Route,this.routeAt=1,this.pov=Math.PI/180*80,this.isTarget=!1,this.bubble=this.addChild(new n.SpeechBubble(this.gameManager,this.width/10,-25).hide()),this.reverse=!1,this.playerLastKnownPosition=null,this.pathRoute=[],this.updatedRoute=!0,this.timer=null}setTarget(t){return this.isTarget=t,this}update(){super.update(),this.state!==r.EnemyState.dying&&this.state!==r.EnemyState.dead&&(this.state!==r.EnemyState.pursuit?this.detectPlayer()?this.onBeginDetection(this.gameManager.player):this.state!==r.EnemyState.searching&&(this.state===r.EnemyState.backToRoute&&this.pathRoute.length?this.moveTowards(this.pathRoute[0])||(this.pathRoute.shift(),this.pathRoute.length||this.setState(r.EnemyState.onRoute)):this.route.size>1?this.moveTowards(this.route.get(this.routeAt))||(this.routeAt===(this.reverse?0:this.route.size-1)&&(this.reverse=!this.reverse),this.routeAt+=this.reverse?-1:1):this.stand().setState(r.EnemyState.stand)):this.onDetection(this.gameManager.player))}moveTowards(t){const e=this.findNextDirection(t.x,t.y);return null===e?(this.stand(),!1):(this.setDirection(e).walk(),!0)}findNextDirection(t,e){if(this.direction===r.Direction.up||this.direction===r.Direction.down){const i=this.findNextYDirection(e);return null===i?this.findNextXDirection(t):i}{const i=this.findNextXDirection(t);return null===i?this.findNextYDirection(e):i}}findNextXDirection(t){if(this.body.position.x===t)return null;const e=this.body.position.x-t;return e<-2?r.Direction.right:e>2?r.Direction.left:(this.setPosition(t,this.body.position.y),null)}findNextYDirection(t){if(this.body.position.y===t)return null;const e=this.body.position.y-t;return e<-2?r.Direction.down:e>2?r.Direction.up:(this.setPosition(this.body.position.x,t),null)}setPov(t){return this.pov=t,this}fromJSON(t){return super.fromJSON(t),this.isTarget=t.isTarget,this.pov=t.pov,this.route.set(t.route.map(t=>new Phaser.Point(t[0],t[1]))),this}toJSON(){return Object.assign({},super.toJSON(),{isTarget:this.isTarget,pov:this.pov,route:this.route.toJSON(),type:"Enemy"})}detectPlayer(){if(!this.seesPlayer())return!1;const{player:t}=this.gameManager,e=new Phaser.Line(this.body.position.x+this.body.halfWidth,this.body.position.y+this.body.halfHeight,t.body.position.x+t.body.halfWidth,t.body.position.y+t.body.halfHeight);return!(this.gameManager.state.obstacleLayer.getRayCastTiles(e,4,!0,!1).filter(t=>-1!==t.index).length&&t.state!==r.PlayerState.run||(this.onBeginDetection(t),0))}onBeginDetection(t){this.pathRoute.length=0,this.setState(r.EnemyState.pursuit),this.preparePathRoute(t.body.position),this.playerLastKnownPosition=t.position.clone(),this.bubble.show().display("!").fadeIn(1e3),this.timer&&(this.game.time.events.remove(this.timer),this.timer=null)}onDetection(t){this.pathRoute.length&&!this.moveTowards(this.pathRoute[0])&&(this.seesPlayer()&&(t.body.position.clone(this.playerLastKnownPosition),this.preparePathRoute(this.playerLastKnownPosition)),this.pathRoute.length>1?this.pathRoute.shift():this.onEndDetection())}onEndDetection(){if(this.timer)return;this.playerLastKnownPosition=null,this.pathRoute.length=0,this.setState(r.EnemyState.searching);let t=0;this.bubble.show().display("?"),this.timer=this.game.time.events.repeat(Phaser.Timer.SECOND,4,()=>{if(4==++t)this.timer=null,this.bubble.hide(),this.setState(r.EnemyState.backToRoute),this.preparePathRoute(this.route.get(this.routeAt));else{let t;switch(this.direction){case r.Direction.down:t=r.Direction.up;break;case r.Direction.left:t=r.Direction.right;break;case r.Direction.up:t=r.Direction.left;break;default:t=r.Direction.down}this.setDirection(t),this.animations.play(`stand.${r.Direction[this.direction]}`,0)}})}preparePathRoute(t){if(!this.updatedRoute)return;this.updatedRoute=!1,this.game.pathFinder.setCallbackFunction(t=>{this.updatedRoute=!0,t?(this.pathRoute=t.map(t=>new Phaser.Point(t.x*s.TILE_SIZE,t.y*s.TILE_SIZE)),this.pathRoute.shift()):this.onEndDetection()});const e=this.positionInTiles();this.game.pathFinder.preparePathCalculation([Math.floor(e.x),Math.floor(e.y)],[Math.floor(t.x/s.TILE_SIZE),Math.floor(t.y/s.TILE_SIZE)]),this.game.pathFinder.calculatePath()}seesPlayer(){const{player:t}=this.gameManager;if(!t||t.hidingSpot)return!1;if(this.distanceInTilesTo(t)>5)return!1;const e=this.relativeAngleTo(t);return Math.abs(e)<this.pov/2}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});e.Route=class{constructor(){this.route=[]}get size(){return this.route.length}get(t){return t<this.route.length?this.route[t]:null}set(t){return this.route=t,this}add(t,e){return this.route.push("number"==typeof t?new Phaser.Point(t,e):t),this}remove(t,e){const i="number"==typeof t?[t,e]:t,s=this.route.findIndex(t=>t[0]===i[0]&&t[0]===i[1]);return-1!==s&&this.route.splice(s,1),this}reset(){return this.route.length=0,this}toJSON(){return this.route.map(t=>[t.x,t.y])}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});e.SpeechBubble=class extends Phaser.Sprite{constructor(t,e,i){super(t.game,e,i,"objects",11),this.gameManager=t,this.timer=null,this.game.add.existing(this),this.smoothed=!1,this.animations.add("...",[11,29,30,12],2),this.animations.add("!",[47],0),this.animations.add("?",[48],0)}hide(){return this.renderable=!1,this}show(){return this.renderable=!0,this}display(t){return this.animations.play(t,"..."===t?2:0,!0),this}fadeIn(t){return t<=0?this.hide():(this.timer&&this.game.time.events.remove(this.timer),this.timer=this.game.time.events.add(t,()=>{this.timer=null,this.hide()}),this)}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const s=i(1),a=i(4);e.Player=class extends a.Character{constructor(t,e,i){super(t,e,i,"player"),this.hidingSpot=null,this.directions={down:!1,left:!1,right:!1,up:!1},this.cursorKeys=this.game.input.keyboard.createCursorKeys(),this.actions={interact:!1,kill:!1},this.movementRefresh=0,this.game.camera.follow(this,Phaser.Camera.FOLLOW_LOCKON,.1,.1),this.body.immovable=!1}update(){if(super.update(),Date.now()<this.movementRefresh)return;this.directions.down=this.cursorKeys.down.isDown,this.directions.left=this.cursorKeys.left.isDown,this.directions.right=this.cursorKeys.right.isDown,this.directions.up=this.cursorKeys.up.isDown;const t=this.gameManager.game.input.keyboard,e=t.isDown(Phaser.Keyboard.SHIFT);this.directions.down!==this.directions.up?(this.setDirection(this.directions.down?s.Direction.down:s.Direction.up),e?this.setState(s.PlayerState.run).run():this.setState(s.PlayerState.walk).walk()):this.directions.left!==this.directions.right?(this.setDirection(this.directions.left?s.Direction.left:s.Direction.right),e?this.setState(s.PlayerState.run).run():this.setState(s.PlayerState.walk).walk()):this.stand().setState(s.PlayerState.stand),t.isDown(Phaser.Keyboard.X)?(this.actions.interact=!1,this.actions.kill=!0,this.triggerWalk()):t.isDown(Phaser.Keyboard.Z)?(this.actions.interact=!0,this.actions.kill=!1,this.triggerWalk()):t.isDown(Phaser.Keyboard.S)?this.gameManager.storage.save():(this.actions.interact=!1,this.actions.kill=!1)}attack(t){return super.attack(t),t.kill(),this.movementRefresh=this.attackRefresh,this}collides(t){if(t instanceof a.Character)return this.actions.kill?this.attack(t):this.actions.interact&&t.interact(this),!0}hide(t){return t.hidingType!==s.HidingType.none&&(this.setState(s.PlayerState.hidden),this.hidingSpot=t),this}reveal(){return this.hidingSpot&&(this.setState(this.health?s.PlayerState.stand:s.PlayerState.dead),this.hidingSpot=null),this}fromJSON(t){return super.fromJSON(t),this}toJSON(){return Object.assign({},super.toJSON(),{hidingSpot:this.hidingSpot?this.hidingSpot.toJSON():null,type:"Player"})}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const s=i(1),a=i(2);e.HidingSpot=class extends a.GameObject{constructor(t,e,i){super(t,e,i,"hidingSpot"),this.hidingType=s.HidingType.none}setHidingType(t){return this.hidingType=t,this}toJSON(){return Object.assign({},super.toJSON(),{hidingType:this.hidingType,type:"GameObject"})}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const s=i(1),a=i(5);e.Boulder=class extends a.Trap{constructor(t,e,i){super(t,e,i,"boulder"),this.state=s.BoulderState.stop,this.direction=s.Direction.down,this.speed=0}move(){switch(this.state=s.BoulderState.move,this.direction){case s.Direction.down:this.body.velocity.x=0,this.body.velocity.y=this.speed;break;case s.Direction.up:this.body.velocity.x=0,this.body.velocity.y=-this.speed;break;case s.Direction.left:this.body.velocity.x=-this.speed,this.body.velocity.y=0;break;default:this.body.velocity.x=this.speed,this.body.velocity.y=0}}stop(){this.state=s.BoulderState.stop,this.body.velocity.x=0,this.body.velocity.y=0}setDirection(t){return this.direction=t,this}setSpeed(t){return this.speed=t,this}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const s=i(0);e.PreloaderState=class extends s.GameState{preload(){this.loadingBar=this.game.add.sprite(0,240,"preloader_bar"),this.loadingBar.anchor.setTo(0,.5),this.load.setPreloadSprite(this.loadingBar),this.game.load.spritesheet("player","images/player.png",48,96),this.game.load.spritesheet("enemy","images/enemy.png",48,96),this.game.load.spritesheet("objects","images/objects.png",48,48),this.game.load.tilemap("Level-0","json/Level-0.json",null,Phaser.Tilemap.TILED_JSON),this.game.load.image("overworld","images/overworld.png"),this.game.load.image("cave","images/cave.png"),this.game.load.image("logo","images/StonesCreed.png")}create(){this.game.state.start("menu")}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vc3JjL2xpYi9zdGF0ZXMvR2FtZVN0YXRlLnRzIiwid2VicGFjazovLy8uL3NyYy9saWIvc3RydWN0dXJlcy9taXNjL3R5cGVzLnRzIiwid2VicGFjazovLy8uL3NyYy9saWIvc3RydWN0dXJlcy9nYW1lT2JqZWN0cy9HYW1lT2JqZWN0LnRzIiwid2VicGFjazovLy8uL3NyYy9saWIvdXRpbC9jb25zdGFudHMudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2xpYi9zdHJ1Y3R1cmVzL2dhbWVPYmplY3RzL2NoYXJhY3RlcnMvQ2hhcmFjdGVyLnRzIiwid2VicGFjazovLy8uL3NyYy9saWIvc3RydWN0dXJlcy9nYW1lT2JqZWN0cy90cmFwcy9UcmFwLnRzIiwid2VicGFjazovLy8uL3NyYy9saWIvbWFpbi50cyIsIndlYnBhY2s6Ly8vLi9zcmMvbGliL3N0YXRlcy9Cb290U3RhdGUudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2xpYi9wbHVnaW5zL1BhdGhGaW5kZXJQbHVnaW4udHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2xpYi9zdGF0ZXMvTWVudVN0YXRlLnRzIiwid2VicGFjazovLy8uL3NyYy9saWIvc3RhdGVzL05ld0dhbWVTdGF0ZS50cyIsIndlYnBhY2s6Ly8vLi9zcmMvbGliL3V0aWwvdXRpbC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvbGliL3N0YXRlcy9QbGF5U3RhdGUudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2xpYi9zdHJ1Y3R1cmVzL21hbmFnZXJzL0dhbWVNYW5hZ2VyLnRzIiwid2VicGFjazovLy8uL3NyYy9saWIvc3RydWN0dXJlcy9tYW5hZ2Vycy9TdG9yYWdlTWFuYWdlci50cyIsIndlYnBhY2s6Ly8vLi9zcmMvbGliL3N0cnVjdHVyZXMvZ2FtZU9iamVjdHMvR2FtZU9iamVjdEZhY3RvcnkudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2xpYi9zdHJ1Y3R1cmVzL2NvbW1vbi9GYWN0b3J5LnRzIiwid2VicGFjazovLy8uL3NyYy9saWIvc3RydWN0dXJlcy9nYW1lT2JqZWN0cy9jaGFyYWN0ZXJzL0VuZW15LnRzIiwid2VicGFjazovLy8uL3NyYy9saWIvc3RydWN0dXJlcy9taXNjL1JvdXRlLnRzIiwid2VicGFjazovLy8uL3NyYy9saWIvc3RydWN0dXJlcy9nYW1lT2JqZWN0cy9vYmplY3RzL1NwZWVjaEJ1YmJsZS50cyIsIndlYnBhY2s6Ly8vLi9zcmMvbGliL3N0cnVjdHVyZXMvZ2FtZU9iamVjdHMvY2hhcmFjdGVycy9QbGF5ZXIudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2xpYi9zdHJ1Y3R1cmVzL2dhbWVPYmplY3RzL2hpZGluZ1Nwb3RzL0hpZGluZ1Nwb3QudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2xpYi9zdHJ1Y3R1cmVzL2dhbWVPYmplY3RzL3RyYXBzL0JvdWxkZXIudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2xpYi9zdGF0ZXMvUHJlbG9hZGVyU3RhdGUudHMiXSwibmFtZXMiOlsiaW5zdGFsbGVkTW9kdWxlcyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImV4cG9ydHMiLCJtb2R1bGUiLCJpIiwibCIsIm1vZHVsZXMiLCJjYWxsIiwibSIsImMiLCJkIiwibmFtZSIsImdldHRlciIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJyIiwiU3ltYm9sIiwidG9TdHJpbmdUYWciLCJ2YWx1ZSIsInQiLCJtb2RlIiwiX19lc01vZHVsZSIsIm5zIiwiY3JlYXRlIiwia2V5IiwiYmluZCIsIm4iLCJvYmplY3QiLCJwcm9wZXJ0eSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwicCIsInMiLCJHYW1lU3RhdGUiLCJQaGFzZXIiLCJTdGF0ZSIsIltvYmplY3QgT2JqZWN0XSIsInN1cGVyIiwidGhpcyIsImdhbWUiLCJ0YXNrIiwicGVuZGluZ09uQ3JlYXRlIiwibGVuZ3RoIiwiRGlyZWN0aW9uIiwiQm91bGRlclN0YXRlIiwiSGlkaW5nVHlwZSIsIkNoYXJhY3RlclN0YXRlIiwiMCIsIjEiLCIyIiwiMyIsIjQiLCJkZWFkIiwiZHlpbmciLCJydW4iLCJzdGFuZCIsIndhbGsiLCJQbGF5ZXJTdGF0ZSIsImFzc2lnbiIsIjUiLCJoaWRkZW4iLCJFbmVteVN0YXRlIiwiNiIsIjciLCI4IiwiOSIsImJhY2tUb1JvdXRlIiwib25Sb3V0ZSIsInB1cnN1aXQiLCJzZWFyY2hpbmciLCJHYW1lT2JqZWN0RmFjdG9yeV8xIiwiR2FtZU9iamVjdCIsIlNwcml0ZSIsImdhbWVNYW5hZ2VyIiwieCIsInkiLCJmcmFtZSIsImFkZCIsImV4aXN0aW5nIiwicGh5c2ljcyIsImFyY2FkZSIsImVuYWJsZSIsImdhbWVPYmplY3RzR3JvdXAiLCJib2R5IiwiY29sbGlkZVdvcmxkQm91bmRzIiwiYWxsb3dSb3RhdGlvbiIsImFsbG93R3Jhdml0eSIsImltbW92YWJsZSIsInNtb290aGVkIiwiZ2FtZU9iamVjdCIsIlR5cGVFcnJvciIsInBvc2l0aW9uIiwidmVsb2NpdHkiLCJpbnRlcmFjdGlvbiIsImRhdGEiLCJzZXRWZWxvY2l0eSIsInR5cGUiLCJQb2ludCIsImNvbnN0YW50c18xIiwiVElMRV9TSVpFIiwiZGlzdGFuY2UiLCJkaXN0YW5jZVRvIiwiTWF0aCIsImF0YW4yIiwiZmFjdG9yeSIsIkdhbWVPYmplY3RGYWN0b3J5IiwiQ2hhcmFjdGVyXzEiLCJFbmVteV8xIiwiUGxheWVyXzEiLCJIaWRpbmdTcG90XzEiLCJCb3VsZGVyXzEiLCJUcmFwXzEiLCJzZXQiLCJDaGFyYWN0ZXIiLCJQbGF5ZXIiLCJFbmVteSIsIkhpZGluZ1Nwb3QiLCJCb3VsZGVyIiwiVHJhcCIsIldJTl9XSURUSCIsIldJTl9IRUlHSFQiLCJ0eXBlc18xIiwiR2FtZU9iamVjdF8xIiwid2Fsa1NwZWVkIiwicnVuU3BlZWQiLCJzdGF0ZSIsImRpcmVjdGlvbiIsImRvd24iLCJzdHJlbmd0aCIsImF0dGFja0Nvb2xkb3duIiwiYXR0YWNrUmVmcmVzaCIsInNldFNpemUiLCJ3aWR0aCIsImhlaWdodCIsImFuaW1hdGlvbnMiLCJjaGFyYWN0ZXIiLCJEYXRlIiwibm93IiwiZGFtYWdlIiwicGxheSIsInNldFN0YXRlIiwidGltZSIsImV2ZW50cyIsIlRpbWVyIiwiU0VDT05EIiwia2lsbCIsInVwZGF0ZVZlbG9jaXR5Iiwic3RvcCIsImFuZ2xlVG8iLCJyZWxhdGl2ZUFuZ2xlIiwiZnJvbUpTT04iLCJzZXRTdHJlbmd0aCIsInRvSlNPTiIsInNwZWVkIiwidXAiLCJsZWZ0IiwiSEFMRl9QSSIsIlBJIiwicmlnaHQiLCJhY3RpdmUiLCJkYW1hZ2VTdHJlbmd0aCIsImxldGhhbCIsIkJvb3RTdGF0ZV8xIiwiTWVudVN0YXRlXzEiLCJOZXdHYW1lU3RhdGVfMSIsIlBsYXlTdGF0ZV8xIiwiUHJlbG9hZGVyU3RhdGVfMSIsIndpbmRvdyIsIm9ubG9hZCIsIkdhbWUiLCJBVVRPIiwiQm9vdFN0YXRlIiwiUHJlbG9hZGVyU3RhdGUiLCJQbGF5U3RhdGUiLCJNZW51U3RhdGUiLCJOZXdHYW1lU3RhdGUiLCJzdGFydCIsIlBhdGhGaW5kZXJQbHVnaW5fMSIsIkdhbWVTdGF0ZV8xIiwibG9hZCIsImltYWdlIiwicGF0aEZpbmRlciIsInBsdWdpbnMiLCJQYXRoRmluZGVyUGx1Z2luIiwiUGx1Z2luIiwicGFyZW50IiwiX2Vhc3lTdGFyIiwiRWFzeVN0YXIiLCJqcyIsIl9ncmlkIiwiX2NhbGxiYWNrIiwiX3ByZXBhcmVkIiwiX3dhbGthYmxlcyIsIkVycm9yIiwiZ3JpZCIsIndhbGthYmxlcyIsIml0ZXJhdGlvbnNQZXJDb3VudCIsImoiLCJpbmRleCIsInNldEdyaWQiLCJzZXRBY2NlcHRhYmxlVGlsZXMiLCJ3YWxrYWJsZSIsInNldFRpbGVDb3N0Iiwic2V0SXRlcmF0aW9uc1BlckNhbGN1bGF0aW9uIiwidGlsZVR5cGUiLCJjb3N0IiwiY2FsbGJhY2siLCJmcm9tIiwidG8iLCJzdGFydFgiLCJzdGFydFkiLCJkZXN0aW5hdGlvblgiLCJkZXN0aW5hdGlvblkiLCJmaW5kUGF0aCIsImNhbGN1bGF0ZSIsInRleHRzIiwibG9nbyIsInN0YWdlIiwiYmFja2dyb3VuZENvbG9yIiwic3ByaXRlIiwid29ybGQiLCJjZW50ZXJYIiwiY2VudGVyWSIsImFuY2hvciIsInNldFRvIiwic2NhbGUiLCJjcmVhdGVCdXR0b24iLCJsb2NhbFN0b3JhZ2UiLCJnZXRJdGVtIiwicHVzaCIsInBsYXlTdGF0ZSIsInN0b3JhZ2UiLCJ0ZXh0IiwiZGVzdHJveSIsInNodXRkb3duIiwiY2IiLCJmb250IiwiZmlsbCIsImFsaWduIiwiaW5wdXRFbmFibGVkIiwib25JbnB1dFVwIiwib25JbnB1dERvd24iLCJvbklucHV0T3ZlciIsInJlbW92ZUFsbCIsIm9uSW5wdXRPdXQiLCJhbGlnblRvIiwiQk9UVE9NX0NFTlRFUiIsInV0aWxfMSIsInByZWxvYWQiLCJqc29uIiwidGl0bGVUZXh0IiwiaW5wdXRUZXh0IiwicmVhZExpbmUiLCJjb25zb2xlIiwibG9nIiwicGxheWVyTmFtZSIsImxvYWRHYW1lT2JqZWN0cyIsImNhY2hlIiwiZ2V0SlNPTiIsIm1heGltdW1MZW5ndGgiLCJjaHVuayIsImVudHJpZXMiLCJjaHVua1NpemUiLCJjbG9uZSIsInNsaWNlIiwiY2h1bmtzIiwic3BsaWNlIiwib3B0aW9ucyIsImNvbnRlbnQiLCJtYXhpbXVtIiwibGlzdGVuZXIiLCJldmVudCIsImRvY3VtZW50IiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImpvaW4iLCJwb3AiLCJ0ZXN0IiwiYWRkRXZlbnRMaXN0ZW5lciIsIkdhbWVNYW5hZ2VyXzEiLCJ0aWxlbWFwcyIsIk1hcCIsIm9ic3RhY2xlTGF5ZXIiLCJlc2NMaXN0ZW5lciIsImdldFRpbGVtYXAiLCJpbnB1dCIsImtleWJvYXJkIiwiYWRkS2V5Q2FwdHVyZSIsIktleWJvYXJkIiwiTEVGVCIsIlJJR0hUIiwiVVAiLCJET1dOIiwiU1BBQ0VCQVIiLCJHYW1lTWFuYWdlciIsInN0YXJ0U3lzdGVtIiwiUGh5c2ljcyIsIkFSQ0FERSIsIm9uUGF1c2UiLCJzZXRBbGxDaGlsZHJlbiIsIm9uUmVzdW1lIiwicGF1c2VkIiwibGF5ZXIiLCJyZW1vdmUiLCJjbGVhciIsInVwZGF0ZSIsImNvbGxpZGUiLCJsZXZlbCIsInRpbGVtYXAiLCJhZGRUaWxlc2V0SW1hZ2UiLCJiYWNrZ3JvdW5kIiwiY3JlYXRlTGF5ZXIiLCJyZXNpemVXb3JsZCIsInNldENvbGxpc2lvbkJ5RXhjbHVzaW9uIiwiU3RvcmFnZU1hbmFnZXJfMSIsIkdhbWVMZXZlbHMiLCJtYXBNYW5hZ2VyIiwiU3RvcmFnZU1hbmFnZXIiLCJwbGF5ZXIiLCJGaXJzdCIsImdyb3VwIiwiZW5hYmxlQm9keSIsImVuYWJsZUJvZHlEZWJ1ZyIsInJlbmRlcmFibGUiLCJraWxsQWxsIiwiY2hpbGRyZW4iLCJ1bmRlZmluZWQiLCJnMSIsImcyIiwiY29sbGlkZXMiLCJzb3J0IiwiR3JvdXAiLCJTT1JUX0FTQ0VORElORyIsInNldEl0ZW0iLCJKU09OIiwic3RyaW5naWZ5IiwidG9TdHJpbmciLCJyYXdMZXZlbCIsIk51bWJlciIsImdhbWVPYmplY3RzIiwicGFyc2UiLCJsb2FkUGxheWVyTmFtZSIsIkN0b3IiLCJpbnN0YW5jZSIsIkZhY3RvcnlfMSIsIkZhY3RvcnkiLCJSb3V0ZV8xIiwiU3BlZWNoQnViYmxlXzEiLCJyb3V0ZSIsIlJvdXRlIiwicm91dGVBdCIsInBvdiIsImlzVGFyZ2V0IiwiYnViYmxlIiwiYWRkQ2hpbGQiLCJTcGVlY2hCdWJibGUiLCJoaWRlIiwicmV2ZXJzZSIsInBsYXllckxhc3RLbm93blBvc2l0aW9uIiwicGF0aFJvdXRlIiwidXBkYXRlZFJvdXRlIiwidGltZXIiLCJkZXRlY3RQbGF5ZXIiLCJvbkJlZ2luRGV0ZWN0aW9uIiwibW92ZVRvd2FyZHMiLCJzaGlmdCIsInNpemUiLCJvbkRldGVjdGlvbiIsInBvaW50IiwibmV4dERpcmVjdGlvbiIsImZpbmROZXh0RGlyZWN0aW9uIiwic2V0RGlyZWN0aW9uIiwieU5leHQiLCJmaW5kTmV4dFlEaXJlY3Rpb24iLCJmaW5kTmV4dFhEaXJlY3Rpb24iLCJ4TmV4dCIsImRpZmYiLCJzZXRQb3NpdGlvbiIsIm1hcCIsInNlZXNQbGF5ZXIiLCJsaW5lIiwiTGluZSIsImhhbGZXaWR0aCIsImhhbGZIZWlnaHQiLCJnZXRSYXlDYXN0VGlsZXMiLCJmaWx0ZXIiLCJ0aWxlIiwicHJlcGFyZVBhdGhSb3V0ZSIsInNob3ciLCJkaXNwbGF5IiwiZmFkZUluIiwib25FbmREZXRlY3Rpb24iLCJyZXBlYXQiLCJuZXh0Iiwic2V0Q2FsbGJhY2tGdW5jdGlvbiIsImVUaWxlcyIsInBvc2l0aW9uSW5UaWxlcyIsInByZXBhcmVQYXRoQ2FsY3VsYXRpb24iLCJmbG9vciIsImNhbGN1bGF0ZVBhdGgiLCJoaWRpbmdTcG90IiwiZGlzdGFuY2VJblRpbGVzVG8iLCJyZWxhdGl2ZUFuZ2xlVG8iLCJhYnMiLCJmaW5kSW5kZXgiLCJhbmltYXRpb24iLCJkZWxheSIsImRpcmVjdGlvbnMiLCJjdXJzb3JLZXlzIiwiY3JlYXRlQ3Vyc29yS2V5cyIsImFjdGlvbnMiLCJpbnRlcmFjdCIsIm1vdmVtZW50UmVmcmVzaCIsImNhbWVyYSIsImZvbGxvdyIsIkNhbWVyYSIsIkZPTExPV19MT0NLT04iLCJpc0Rvd24iLCJydW5uaW5nIiwiU0hJRlQiLCJYIiwidHJpZ2dlcldhbGsiLCJaIiwiUyIsInNhdmUiLCJhdHRhY2siLCJoaWRpbmdUeXBlIiwibm9uZSIsImhlYWx0aCIsIm1vdmUiLCJsb2FkaW5nQmFyIiwic2V0UHJlbG9hZFNwcml0ZSIsInNwcml0ZXNoZWV0IiwiVGlsZW1hcCIsIlRJTEVEX0pTT04iXSwibWFwcGluZ3MiOiJhQUNBLElBQUFBLEVBQUEsR0FHQSxTQUFBQyxFQUFBQyxHQUdBLEdBQUFGLEVBQUFFLEdBQ0EsT0FBQUYsRUFBQUUsR0FBQUMsUUFHQSxJQUFBQyxFQUFBSixFQUFBRSxHQUFBLENBQ0FHLEVBQUFILEVBQ0FJLEdBQUEsRUFDQUgsUUFBQSxJQVVBLE9BTkFJLEVBQUFMLEdBQUFNLEtBQUFKLEVBQUFELFFBQUFDLElBQUFELFFBQUFGLEdBR0FHLEVBQUFFLEdB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QUFqSixVQUk1QkcsVUFDTkUsS0FBS3VZLFdBQWF2WSxLQUFLQyxLQUFLc0MsSUFBSThJLE9BQU8sRUFBRyxJQUFLLGlCQUMvQ3JMLEtBQUt1WSxXQUFXOU0sT0FBT0MsTUFBTSxFQUFHLElBQ2hDMUwsS0FBSzZJLEtBQUsyUCxpQkFBaUJ4WSxLQUFLdVksWUFFaEN2WSxLQUFLQyxLQUFLNEksS0FBSzRQLFlBQVksU0FBVSxvQkFBcUIsR0FBSSxJQUM5RHpZLEtBQUtDLEtBQUs0SSxLQUFLNFAsWUFBWSxRQUFTLG1CQUFvQixHQUFJLElBQzVEelksS0FBS0MsS0FBSzRJLEtBQUs0UCxZQUFZLFVBQVcscUJBQXNCLEdBQUksSUFDaEV6WSxLQUFLQyxLQUFLNEksS0FBS2dJLFFBQVEsVUFBVyxvQkFBcUIsS0FBTWpSLE9BQU84WSxRQUFRQyxZQUM1RTNZLEtBQUtDLEtBQUs0SSxLQUFLQyxNQUFNLFlBQWEsd0JBQ2xDOUksS0FBS0MsS0FBSzRJLEtBQUtDLE1BQU0sT0FBUSxtQkFDN0I5SSxLQUFLQyxLQUFLNEksS0FBS0MsTUFBTSxPQUFRLDBCQUd2QmhKLFNBQ05FLEtBQUtDLEtBQUtzRixNQUFNbUQsTUFBTSIsImZpbGUiOiJqcy9idW5kbGUubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZ2V0dGVyIH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuIFx0XHR9XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3RcbiBcdC8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuIFx0Ly8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4gXHQvLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3RcbiBcdC8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbiBcdF9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4gXHRcdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IF9fd2VicGFja19yZXF1aXJlX18odmFsdWUpO1xuIFx0XHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuIFx0XHRpZigobW9kZSAmIDQpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuIFx0XHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsICdkZWZhdWx0JywgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7XG4gXHRcdGlmKG1vZGUgJiAyICYmIHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykgZm9yKHZhciBrZXkgaW4gdmFsdWUpIF9fd2VicGFja19yZXF1aXJlX18uZChucywga2V5LCBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIHZhbHVlW2tleV07IH0uYmluZChudWxsLCBrZXkpKTtcbiBcdFx0cmV0dXJuIG5zO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDYpO1xuIiwiZXhwb3J0IGNsYXNzIEdhbWVTdGF0ZSBleHRlbmRzIFBoYXNlci5TdGF0ZSB7XG5cblx0cHVibGljIGNyZWF0ZSgpIHtcblx0XHRzdXBlci5jcmVhdGUodGhpcy5nYW1lKTtcblx0XHRmb3IgKGNvbnN0IHRhc2sgb2YgR2FtZVN0YXRlLnBlbmRpbmdPbkNyZWF0ZSkgdGFzayh0aGlzKTtcblx0XHRHYW1lU3RhdGUucGVuZGluZ09uQ3JlYXRlLmxlbmd0aCA9IDA7XG5cdH1cblxuXHRwdWJsaWMgc3RhdGljIHBlbmRpbmdPbkNyZWF0ZTogRnVuY3Rpb25bXSA9IFtdO1xufVxuIiwiLyoqXG4gKiBUaGUgZGlyZWN0aW9uc1xuICovXG5leHBvcnQgZW51bSBEaXJlY3Rpb24ge1xuXHR1cCxcblx0ZG93bixcblx0cmlnaHQsXG5cdGxlZnRcbn1cblxuLyoqXG4gKiBUaGUgYm91bGRlciBzdGF0ZXNcbiAqL1xuZXhwb3J0IGVudW0gQm91bGRlclN0YXRlIHtcblx0c3RvcCxcblx0bW92ZVxufVxuXG4vKipcbiAqIFRoZSBoaWRpbmcgdHlwZXNcbiAqL1xuZXhwb3J0IGVudW0gSGlkaW5nVHlwZSB7XG5cdG5vbmUsXG5cdGJ1c2hlcyxcblx0Y2F2ZSxcblx0aGF5c3RhY2tcbn1cblxuZXhwb3J0IGNvbnN0IENoYXJhY3RlclN0YXRlOiBJQ2hhcmFjdGVyU3RhdGUgPSB7XG5cdDA6ICdkZWFkJyxcblx0MTogJ2R5aW5nJyxcblx0MjogJ3J1bicsXG5cdDM6ICdzdGFuZCcsXG5cdDQ6ICd3YWxrJyxcblx0ZGVhZDogMCxcblx0ZHlpbmc6IDEsXG5cdHJ1bjogMixcblx0c3RhbmQ6IDMsXG5cdHdhbGs6IDQsXG59O1xuXG5leHBvcnQgY29uc3QgUGxheWVyU3RhdGU6IElQbGF5ZXJTdGF0ZSA9IHtcblx0Li4uQ2hhcmFjdGVyU3RhdGUsXG5cdDU6ICdoaWRkZW4nLFxuXHRoaWRkZW46IDVcbn07XG5cbmV4cG9ydCBjb25zdCBFbmVteVN0YXRlOiBJRW5lbXlTdGF0ZSA9IHtcblx0Li4uQ2hhcmFjdGVyU3RhdGUsXG5cdDY6ICdiYWNrVG9Sb3V0ZScsXG5cdDc6ICdvblJvdXRlJyxcblx0ODogJ3B1cnN1aXQnLFxuXHQ5OiAnc2VhcmNoaW5nJyxcblx0YmFja1RvUm91dGU6IDYsXG5cdG9uUm91dGU6IDcsXG5cdHB1cnN1aXQ6IDgsXG5cdHNlYXJjaGluZzogOVxufTtcblxuLyoqXG4gKiBUaGUgY2hhcmFjdGVyIHN0YXRlc1xuICovXG5pbnRlcmZhY2UgSUNoYXJhY3RlclN0YXRlIHtcblx0MDogJ2RlYWQnO1xuXHQxOiAnZHlpbmcnO1xuXHQyOiAncnVuJztcblx0MzogJ3N0YW5kJztcblx0NDogJ3dhbGsnO1xuXHRkZWFkOiAwO1xuXHRkeWluZzogMTtcblx0cnVuOiAyO1xuXHRzdGFuZDogMztcblx0d2FsazogNDtcbn1cblxuLyoqXG4gKiBUaGUgcGxheWVyIHN0YXRlc1xuICovXG5pbnRlcmZhY2UgSVBsYXllclN0YXRlIGV4dGVuZHMgSUNoYXJhY3RlclN0YXRlIHtcblx0NTogJ2hpZGRlbic7XG5cdGhpZGRlbjogNTtcbn1cblxuLyoqXG4gKiBUaGUgZW5lbXkgc3RhdGVzXG4gKi9cbmludGVyZmFjZSBJRW5lbXlTdGF0ZSBleHRlbmRzIElDaGFyYWN0ZXJTdGF0ZSB7XG5cdDY6ICdiYWNrVG9Sb3V0ZSc7XG5cdDc6ICdvblJvdXRlJztcblx0ODogJ3B1cnN1aXQnO1xuXHQ5OiAnc2VhcmNoaW5nJztcblx0YmFja1RvUm91dGU6IDY7XG5cdG9uUm91dGU6IDc7XG5cdHB1cnN1aXQ6IDg7XG5cdHNlYXJjaGluZzogOTtcbn1cbiIsImltcG9ydCB7IEdhbWVNYW5hZ2VyIH0gZnJvbSAnLi4vbWFuYWdlcnMvR2FtZU1hbmFnZXInO1xuaW1wb3J0IHsgR2FtZU9iamVjdEZhY3RvcnkgfSBmcm9tICcuL0dhbWVPYmplY3RGYWN0b3J5JztcblxuZXhwb3J0IGNsYXNzIEdhbWVPYmplY3QgZXh0ZW5kcyBQaGFzZXIuU3ByaXRlIHtcblxuXHRwdWJsaWMgYm9keTogUGhhc2VyLlBoeXNpY3MuQXJjYWRlLkJvZHk7XG5cblx0cHVibGljIGNvbnN0cnVjdG9yKHB1YmxpYyBnYW1lTWFuYWdlcjogR2FtZU1hbmFnZXIsIHg6IG51bWJlciwgeTogbnVtYmVyLCBrZXk/OiBzdHJpbmcsIGZyYW1lPzogc3RyaW5nIHwgbnVtYmVyKSB7XG5cdFx0c3VwZXIoZ2FtZU1hbmFnZXIuZ2FtZSwgeCwgeSwga2V5LCBmcmFtZSk7XG5cdFx0Ly8gQWRkIHRoZSBnYW1lb2JqZWN0IGl0c2VsZiB0byB0aGUgZ2FtZVxuXHRcdHRoaXMuZ2FtZS5hZGQuZXhpc3RpbmcodGhpcyk7XG5cdFx0dGhpcy5nYW1lLnBoeXNpY3MuYXJjYWRlLmVuYWJsZSh0aGlzKTtcblx0XHR0aGlzLmdhbWVNYW5hZ2VyLmdhbWVPYmplY3RzR3JvdXAuYWRkKHRoaXMpO1xuXHRcdHRoaXMuYm9keS5jb2xsaWRlV29ybGRCb3VuZHMgPSB0cnVlO1xuXHRcdHRoaXMuYm9keS5hbGxvd1JvdGF0aW9uID0gZmFsc2U7XG5cdFx0dGhpcy5ib2R5LmFsbG93R3Jhdml0eSA9IGZhbHNlO1xuXHRcdHRoaXMuYm9keS5pbW1vdmFibGUgPSB0cnVlO1xuXHRcdHRoaXMuc21vb3RoZWQgPSBmYWxzZTtcblx0fVxuXG5cdHB1YmxpYyBjb2xsaWRlcyhnYW1lT2JqZWN0OiBHYW1lT2JqZWN0KSB7XG5cdFx0aWYgKCEoZ2FtZU9iamVjdCBpbnN0YW5jZW9mIEdhbWVPYmplY3QpKSB0aHJvdyBuZXcgVHlwZUVycm9yKGBcImdhbWVPYmplY3RcIiBtdXN0IGJlIGFuIGluc3RhbmNlIG9mIEdhbWVPYmplY3QuYCk7XG5cdFx0cmV0dXJuIHRydWU7XG5cdH1cblxuXHQvKipcblx0ICogU2V0IHRoZSBwb3NpdGlvbiBmb3IgdGhpcyBnYW1lIG9iamVjdFxuXHQgKiBAcGFyYW0geCBUaGUgbmV3IHggcG9zaXRpb25cblx0ICogQHBhcmFtIHkgVGhlIG5ldyB5IHBvc2l0aW9uXG5cdCAqL1xuXHRwdWJsaWMgc2V0UG9zaXRpb24oeDogbnVtYmVyLCB5OiBudW1iZXIpIHtcblx0XHR0aGlzLmJvZHkucG9zaXRpb24ueCA9IHg7XG5cdFx0dGhpcy5ib2R5LnBvc2l0aW9uLnkgPSB5O1xuXHRcdHJldHVybiB0aGlzO1xuXHR9XG5cblx0LyoqXG5cdCAqIFNldCB0aGUgdmVsb2NpdHkgZm9yIHRoaXMgZ2FtZSBvYmplY3Rcblx0ICogQHBhcmFtIHggVGhlIG5ldyB4IHZlbG9jaXR5XG5cdCAqIEBwYXJhbSB5IFRoZSBuZXcgeSB2ZWxvY2l0eVxuXHQgKi9cblx0cHVibGljIHNldFZlbG9jaXR5KHg6IG51bWJlciwgeTogbnVtYmVyKSB7XG5cdFx0dGhpcy5ib2R5LnZlbG9jaXR5LnggPSB4O1xuXHRcdHRoaXMuYm9keS52ZWxvY2l0eS55ID0geTtcblx0XHRyZXR1cm4gdGhpcztcblx0fVxuXG5cdC8qKlxuXHQgKiBJbnRlcmFjdHMgd2l0aCBhIGdhbWUgb2JqZWN0IGZyb20gdGhlIGdhbWVcblx0ICogQHBhcmFtIGdhbWVPYmplY3QgVGhlIGdhbWUgb2JqZWN0IHRvIGludGVyYWN0IHdpdGhcblx0ICovXG5cdHB1YmxpYyBpbnRlcmFjdChnYW1lT2JqZWN0OiBHYW1lT2JqZWN0KSB7XG5cdFx0Z2FtZU9iamVjdC5pbnRlcmFjdGlvbih0aGlzKTtcblx0XHRyZXR1cm4gdGhpcztcblx0fVxuXG5cdC8qKlxuXHQgKiBIYW5kbGUgdGhlIGludGVyYWN0aW9ucyB0byB0aGlzIGdhbWUgb2JqZWN0XG5cdCAqIEBwYXJhbSBnYW1lT2JqZWN0IFRoZSBnYW1lIG9iamVjdCB0aGF0IGludGVyYWN0ZWQgd2l0aCB0aGlzIGluc3RhbmNlXG5cdCAqL1xuXHRwdWJsaWMgaW50ZXJhY3Rpb24oZ2FtZU9iamVjdDogR2FtZU9iamVjdCkge1xuXHRcdGlmICghKGdhbWVPYmplY3QgaW5zdGFuY2VvZiBHYW1lT2JqZWN0KSlcblx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKGBFeHBlY3RlZCBnYW1lT2JqZWN0IHRvIGJlIGEgR2FtZU9iamVjdCBpbnN0YW5jZWApO1xuXHR9XG5cblx0cHVibGljIGZyb21KU09OKGRhdGE6IElHYW1lT2JqZWN0U2VyaWFsaXplZCkge1xuXHRcdHRoaXMubmFtZSA9IGRhdGEubmFtZTtcblx0XHR0aGlzLnNldFZlbG9jaXR5KGRhdGEudmVsb2NpdHkueCwgZGF0YS52ZWxvY2l0eS55KTtcblx0XHRyZXR1cm4gdGhpcztcblx0fVxuXG5cdHB1YmxpYyB0b0pTT04oKTogSUdhbWVPYmplY3RTZXJpYWxpemVkIHtcblx0XHRyZXR1cm4ge1xuXHRcdFx0ZnJhbWU6IHRoaXMuZnJhbWUsXG5cdFx0XHRrZXk6IHRoaXMua2V5IGFzIHN0cmluZyxcblx0XHRcdG5hbWU6IHRoaXMubmFtZSxcblx0XHRcdHBvc2l0aW9uOiB7XG5cdFx0XHRcdHg6IHRoaXMucG9zaXRpb24ueCxcblx0XHRcdFx0eTogdGhpcy5wb3NpdGlvbi55XG5cdFx0XHR9LFxuXHRcdFx0dHlwZTogJ0dhbWVPYmplY3QnLFxuXHRcdFx0dmVsb2NpdHk6IHtcblx0XHRcdFx0eDogdGhpcy5ib2R5LnZlbG9jaXR5LngsXG5cdFx0XHRcdHk6IHRoaXMuYm9keS52ZWxvY2l0eS55XG5cdFx0XHR9XG5cdFx0fTtcblx0fVxuXG5cdHB1YmxpYyBwb3NpdGlvbkluVGlsZXMoKSB7XG5cdFx0cmV0dXJuIG5ldyBQaGFzZXIuUG9pbnQodGhpcy5ib2R5LnBvc2l0aW9uLnggLyBUSUxFX1NJWkUsIHRoaXMuYm9keS5wb3NpdGlvbi55IC8gVElMRV9TSVpFKTtcblx0fVxuXG5cdHB1YmxpYyBkaXN0YW5jZVRvKGdhbWVPYmplY3Q6IEdhbWVPYmplY3QpIHtcblx0XHRyZXR1cm4gdGhpcy5ib2R5LnBvc2l0aW9uLmRpc3RhbmNlKGdhbWVPYmplY3QuYm9keS5wb3NpdGlvbik7XG5cdH1cblxuXHRwdWJsaWMgZGlzdGFuY2VJblRpbGVzVG8oZ2FtZU9iamVjdDogR2FtZU9iamVjdCkge1xuXHRcdHJldHVybiB0aGlzLmRpc3RhbmNlVG8oZ2FtZU9iamVjdCkgLyBUSUxFX1NJWkU7XG5cdH1cblxuXHRwdWJsaWMgYW5nbGVUbyhnYW1lT2JqZWN0OiBHYW1lT2JqZWN0KSB7XG5cdFx0cmV0dXJuIE1hdGguYXRhbjIoZ2FtZU9iamVjdC5ib2R5LnBvc2l0aW9uLnkgLSB0aGlzLmJvZHkucG9zaXRpb24ueSwgZ2FtZU9iamVjdC5ib2R5LnBvc2l0aW9uLnggLSB0aGlzLmJvZHkucG9zaXRpb24ueCk7XG5cdH1cblxuXHRwdWJsaWMgc3RhdGljIGZhY3RvcnkgPSBuZXcgR2FtZU9iamVjdEZhY3RvcnkoKTtcblxufVxuXG5pbXBvcnQgeyBUSUxFX1NJWkUgfSBmcm9tICcuLi8uLi91dGlsL2NvbnN0YW50cyc7XG5pbXBvcnQgeyBDaGFyYWN0ZXIgfSBmcm9tICcuL2NoYXJhY3RlcnMvQ2hhcmFjdGVyJztcbmltcG9ydCB7IEVuZW15IH0gZnJvbSAnLi9jaGFyYWN0ZXJzL0VuZW15JztcbmltcG9ydCB7IFBsYXllciB9IGZyb20gJy4vY2hhcmFjdGVycy9QbGF5ZXInO1xuaW1wb3J0IHsgSGlkaW5nU3BvdCB9IGZyb20gJy4vaGlkaW5nU3BvdHMvSGlkaW5nU3BvdCc7XG5pbXBvcnQgeyBCb3VsZGVyIH0gZnJvbSAnLi90cmFwcy9Cb3VsZGVyJztcbmltcG9ydCB7IFRyYXAgfSBmcm9tICcuL3RyYXBzL1RyYXAnO1xuXG5HYW1lT2JqZWN0LmZhY3Rvcnkuc2V0KCdHYW1lT2JqZWN0JywgR2FtZU9iamVjdCk7XG5HYW1lT2JqZWN0LmZhY3Rvcnkuc2V0KCdDaGFyYWN0ZXInLCBDaGFyYWN0ZXIpO1xuR2FtZU9iamVjdC5mYWN0b3J5LnNldCgnUGxheWVyJywgUGxheWVyKTtcbkdhbWVPYmplY3QuZmFjdG9yeS5zZXQoJ0VuZW15JywgRW5lbXkpO1xuR2FtZU9iamVjdC5mYWN0b3J5LnNldCgnSGlkaW5nU3BvdCcsIEhpZGluZ1Nwb3QpO1xuR2FtZU9iamVjdC5mYWN0b3J5LnNldCgnQm91bGRlcicsIEJvdWxkZXIpO1xuR2FtZU9iamVjdC5mYWN0b3J5LnNldCgnVHJhcCcsIFRyYXApO1xuXG4vKipcbiAqIFRoZSBzZXJpYWxpemVkIGdhbWUgb2JqZWN0IGRhdGFcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBJR2FtZU9iamVjdFNlcmlhbGl6ZWQge1xuXHRmcmFtZTogc3RyaW5nIHwgbnVtYmVyO1xuXHRrZXk6IHN0cmluZztcblx0bmFtZTogc3RyaW5nO1xuXHRwb3NpdGlvbjoge1xuXHRcdHg6IG51bWJlcjtcblx0XHR5OiBudW1iZXI7XG5cdH07XG5cdHR5cGU6IHN0cmluZztcblx0dmVsb2NpdHk6IHtcblx0XHR4OiBudW1iZXI7XG5cdFx0eTogbnVtYmVyO1xuXHR9O1xufVxuIiwiZXhwb3J0IGNvbnN0IFdJTl9XSURUSCA9IDgwMDtcbmV4cG9ydCBjb25zdCBXSU5fSEVJR0hUID0gNjAwO1xuZXhwb3J0IGNvbnN0IFRJTEVfU0laRSA9IDQ4O1xuIiwiaW1wb3J0IHsgR2FtZU1hbmFnZXIgfSBmcm9tICcuLi8uLi9tYW5hZ2Vycy9HYW1lTWFuYWdlcic7XG5pbXBvcnQgeyBDaGFyYWN0ZXJTdGF0ZSwgRGlyZWN0aW9uIH0gZnJvbSAnLi4vLi4vbWlzYy90eXBlcyc7XG5pbXBvcnQgeyBHYW1lT2JqZWN0LCBJR2FtZU9iamVjdFNlcmlhbGl6ZWQgfSBmcm9tICcuLi9HYW1lT2JqZWN0JztcblxuZXhwb3J0IGNsYXNzIENoYXJhY3RlciBleHRlbmRzIEdhbWVPYmplY3Qge1xuXHRwdWJsaWMgd2Fsa1NwZWVkID0gMDtcblx0cHVibGljIHJ1blNwZWVkID0gMDtcblx0cHVibGljIHN0YXRlOiBudW1iZXIgPSBDaGFyYWN0ZXJTdGF0ZS5zdGFuZDtcblx0cHVibGljIGRpcmVjdGlvbiA9IERpcmVjdGlvbi5kb3duO1xuXHRwdWJsaWMgc3RyZW5ndGggPSAwO1xuXHRwdWJsaWMgYXR0YWNrQ29vbGRvd24gPSA1MDA7XG5cdHByb3RlY3RlZCBhdHRhY2tSZWZyZXNoID0gMDtcblxuXHRwdWJsaWMgY29uc3RydWN0b3IoZ2FtZU1hbmFnZXI6IEdhbWVNYW5hZ2VyLCB4OiBudW1iZXIsIHk6IG51bWJlciwga2V5Pzogc3RyaW5nLCBmcmFtZT86IHN0cmluZykge1xuXHRcdHN1cGVyKGdhbWVNYW5hZ2VyLCB4LCB5LCBrZXksIGZyYW1lKTtcblx0XHR0aGlzLmJvZHkuc2V0U2l6ZSh0aGlzLndpZHRoICogMC45LCB0aGlzLmhlaWdodCAqIDAuMywgKHRoaXMud2lkdGggKiAwLjEpIC8gMiwgdGhpcy5oZWlnaHQgKiAwLjYpO1xuXG5cdFx0dGhpcy5hbmltYXRpb25zLmFkZCgnc3RhbmQuZG93bicsIFswXSk7XG5cdFx0dGhpcy5hbmltYXRpb25zLmFkZCgnbW92ZS5kb3duJywgWzEsIDIsIDMsIDRdKTtcblx0XHR0aGlzLmFuaW1hdGlvbnMuYWRkKCdraWxsLmRvd24nLCBbNSwgNiwgN10pO1xuXHRcdHRoaXMuYW5pbWF0aW9ucy5hZGQoJ2RlYWQuZG93bicsIFs4LCA5LCAxMF0pO1xuXHRcdHRoaXMuYW5pbWF0aW9ucy5hZGQoJ3N0YW5kLnJpZ2h0JywgWzExXSk7XG5cdFx0dGhpcy5hbmltYXRpb25zLmFkZCgnbW92ZS5yaWdodCcsIFsxMiwgMTMsIDE0LCAxNV0pO1xuXHRcdHRoaXMuYW5pbWF0aW9ucy5hZGQoJ2tpbGwucmlnaHQnLCBbMTYsIDE3LCAxOF0pO1xuXHRcdHRoaXMuYW5pbWF0aW9ucy5hZGQoJ2RlYWQucmlnaHQnLCBbMTksIDIwLCAyMV0pO1xuXHRcdHRoaXMuYW5pbWF0aW9ucy5hZGQoJ3N0YW5kLnVwJywgWzIyXSk7XG5cdFx0dGhpcy5hbmltYXRpb25zLmFkZCgnbW92ZS51cCcsIFsyMywgMjQsIDI1LCAyNl0pO1xuXHRcdHRoaXMuYW5pbWF0aW9ucy5hZGQoJ2tpbGwudXAnLCBbMjcsIDI4LCAyOV0pO1xuXHRcdHRoaXMuYW5pbWF0aW9ucy5hZGQoJ2RlYWQudXAnLCBbMzAsIDMxLCAzMl0pO1xuXHRcdHRoaXMuYW5pbWF0aW9ucy5hZGQoJ3N0YW5kLmxlZnQnLCBbMzNdKTtcblx0XHR0aGlzLmFuaW1hdGlvbnMuYWRkKCdtb3ZlLmxlZnQnLCBbMzQsIDM1LCAzNiwgMzddKTtcblx0XHR0aGlzLmFuaW1hdGlvbnMuYWRkKCdraWxsLmxlZnQnLCBbMzgsIDM5LCA0MF0pO1xuXHRcdHRoaXMuYW5pbWF0aW9ucy5hZGQoJ2RlYWQubGVmdCcsIFs0MSwgNDIsIDQzXSk7XG5cdH1cblxuXHRwdWJsaWMgc2V0U3RyZW5ndGgoc3RyZW5ndGg6IG51bWJlcikge1xuXHRcdHRoaXMuc3RyZW5ndGggPSBzdHJlbmd0aDtcblx0XHRyZXR1cm4gdGhpcztcblx0fVxuXG5cdHB1YmxpYyBzZXRTdGF0ZShzdGF0ZTogbnVtYmVyKSB7XG5cdFx0dGhpcy5zdGF0ZSA9IHN0YXRlO1xuXHRcdHJldHVybiB0aGlzO1xuXHR9XG5cblx0LyoqXG5cdCAqIFRyeSB0byBhdHRhY2sgYSBjaGFyYWN0ZXJcblx0ICogQHBhcmFtIGNoYXJhY3RlciBUaGUgY2hhcmFjdGVyIHRoaXMgb25lIGlzIGF0dGVtcHRpbmcgdG8gYXR0YWNrXG5cdCAqL1xuXHRwdWJsaWMgYXR0YWNrKGNoYXJhY3RlcjogQ2hhcmFjdGVyKSB7XG5cdFx0Y29uc3Qgbm93ID0gRGF0ZS5ub3coKTtcblx0XHRpZiAobm93IDwgdGhpcy5hdHRhY2tSZWZyZXNoKSByZXR1cm47XG5cdFx0dGhpcy5hdHRhY2tSZWZyZXNoID0gRGF0ZS5ub3coKSArIHRoaXMuYXR0YWNrQ29vbGRvd247XG5cdFx0Y2hhcmFjdGVyLmRhbWFnZSh0aGlzLnN0cmVuZ3RoKTtcblx0XHR0aGlzLmFuaW1hdGlvbnMucGxheShga2lsbC4ke0RpcmVjdGlvblt0aGlzLmRpcmVjdGlvbl19YCwgKDEwMDAgLyB0aGlzLmF0dGFja0Nvb2xkb3duKSAqIDMpO1xuXHRcdHJldHVybiB0aGlzO1xuXHR9XG5cblx0LyoqXG5cdCAqIEtpbGwgb3ZlcmxvYWQgdG8gc2V0IHRoZSBjaGFyYWN0ZXIncyBzdGF0ZVxuXHQgKi9cblx0cHVibGljIGtpbGwoKSB7XG5cdFx0dGhpcy5zZXRWZWxvY2l0eSgwLCAwKTtcblx0XHR0aGlzLnNldFN0YXRlKENoYXJhY3RlclN0YXRlLmR5aW5nKTtcblx0XHR0aGlzLmFuaW1hdGlvbnMucGxheShgZGVhZC4ke0RpcmVjdGlvblt0aGlzLmRpcmVjdGlvbl19YCwgMS41KTtcblx0XHR0aGlzLmdhbWUudGltZS5ldmVudHMuYWRkKFBoYXNlci5UaW1lci5TRUNPTkQgKiAzLCAoKSA9PiB7XG5cdFx0XHR0aGlzLnNldFN0YXRlKENoYXJhY3RlclN0YXRlLmRlYWQpO1xuXHRcdFx0c3VwZXIua2lsbCgpO1xuXHRcdH0pO1xuXHRcdHJldHVybiB0aGlzO1xuXHR9XG5cblx0LyoqXG5cdCAqIFNldHMgdGhlIHN0YXRlIG9mIHRoaXMgY2hhcmFjdGVyIHRvIHdhbGtcblx0ICovXG5cdHB1YmxpYyB3YWxrKCkge1xuXHRcdHRoaXMuYW5pbWF0aW9ucy5wbGF5KGBtb3ZlLiR7RGlyZWN0aW9uW3RoaXMuZGlyZWN0aW9uXX1gLCA1KTtcblx0XHR0aGlzLnVwZGF0ZVZlbG9jaXR5KHRoaXMud2Fsa1NwZWVkKTtcblx0XHRyZXR1cm4gdGhpcztcblx0fVxuXG5cdC8qKlxuXHQgKiBTZXRzIHRoZSBzdGF0ZSBvZiB0aGlzIGNoYXJhY3RlciB0byBydW5cblx0ICovXG5cdHB1YmxpYyBydW4oKSB7XG5cdFx0dGhpcy5hbmltYXRpb25zLnBsYXkoYG1vdmUuJHtEaXJlY3Rpb25bdGhpcy5kaXJlY3Rpb25dfWAsIDgpO1xuXHRcdHRoaXMudXBkYXRlVmVsb2NpdHkodGhpcy5ydW5TcGVlZCk7XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH1cblxuXHQvKipcblx0ICogU2V0cyB0aGUgc3RhdGUgb2YgdGhpcyBjaGFyYWN0ZXIgdG8gc3RhbmQsIGNoYW5naW5nXG5cdCAqL1xuXHRwdWJsaWMgc3RhbmQoKSB7XG5cdFx0dGhpcy5hbmltYXRpb25zLnBsYXkoYHN0YW5kLiR7RGlyZWN0aW9uW3RoaXMuZGlyZWN0aW9uXX1gLCAwKTtcblx0XHR0aGlzLmFuaW1hdGlvbnMuc3RvcCgpO1xuXHRcdHRoaXMuc2V0VmVsb2NpdHkoMCwgMCk7XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH1cblxuXHQvKipcblx0ICogQ2hhbmdlIHRoZSBkaXJlY3Rpb24gZm9yIHRoaXMgY2hhcmFjdGVyXG5cdCAqIEBwYXJhbSBkaXJlY3Rpb24gVGhlIG5ldyBkaXJlY3Rpb25cblx0ICovXG5cdHB1YmxpYyBzZXREaXJlY3Rpb24oZGlyZWN0aW9uOiBEaXJlY3Rpb24pIHtcblx0XHR0aGlzLmRpcmVjdGlvbiA9IGRpcmVjdGlvbjtcblx0XHRyZXR1cm4gdGhpcztcblx0fVxuXG5cdHB1YmxpYyByZWxhdGl2ZUFuZ2xlVG8oZ2FtZU9iamVjdDogR2FtZU9iamVjdCkge1xuXHRcdGNvbnN0IGFic29sdXRlQW5nbGUgPSB0aGlzLmFuZ2xlVG8oZ2FtZU9iamVjdCk7XG5cdFx0Y29uc3QgcmVsYXRpdmVBbmdsZSA9IHRoaXMucmVsYXRpdmVBbmdsZTtcblx0XHRyZXR1cm4gYWJzb2x1dGVBbmdsZSAtIHJlbGF0aXZlQW5nbGU7XG5cdH1cblxuXHRwdWJsaWMgZnJvbUpTT04oZGF0YTogSUNoYXJhY3RlclNlcmlhbGl6ZWQpIHtcblx0XHRzdXBlci5mcm9tSlNPTihkYXRhKTtcblx0XHR0aGlzLmRpcmVjdGlvbiA9IGRhdGEuZGlyZWN0aW9uO1xuXHRcdHRoaXMucnVuU3BlZWQgPSBkYXRhLnJ1blNwZWVkO1xuXHRcdHRoaXMud2Fsa1NwZWVkID0gZGF0YS53YWxrU3BlZWQ7XG5cdFx0dGhpcy5zZXRTdHJlbmd0aChkYXRhLnN0cmVuZ3RoKTtcblx0XHRyZXR1cm4gdGhpcztcblx0fVxuXG5cdHB1YmxpYyB0b0pTT04oKTogSUNoYXJhY3RlclNlcmlhbGl6ZWQge1xuXHRcdHJldHVybiB7XG5cdFx0XHQuLi5zdXBlci50b0pTT04oKSxcblx0XHRcdGRpcmVjdGlvbjogdGhpcy5kaXJlY3Rpb24sXG5cdFx0XHRydW5TcGVlZDogdGhpcy5ydW5TcGVlZCxcblx0XHRcdHN0cmVuZ3RoOiB0aGlzLnN0cmVuZ3RoLFxuXHRcdFx0dHlwZTogJ0NoYXJhY3RlcicsXG5cdFx0XHR3YWxrU3BlZWQ6IHRoaXMud2Fsa1NwZWVkLFxuXHRcdH07XG5cdH1cblxuXHRwcm90ZWN0ZWQgdHJpZ2dlcldhbGsoKSB7XG5cdFx0dGhpcy51cGRhdGVWZWxvY2l0eSh0aGlzLndhbGtTcGVlZCk7XG5cdH1cblxuXHRwcm90ZWN0ZWQgdXBkYXRlVmVsb2NpdHkoc3BlZWQ6IG51bWJlcikge1xuXHRcdHN3aXRjaCAodGhpcy5kaXJlY3Rpb24pIHtcblx0XHRcdGNhc2UgRGlyZWN0aW9uLmRvd246IHRoaXMuc2V0VmVsb2NpdHkoMCwgc3BlZWQpOyBicmVhaztcblx0XHRcdGNhc2UgRGlyZWN0aW9uLnVwOiB0aGlzLnNldFZlbG9jaXR5KDAsIC1zcGVlZCk7IGJyZWFrO1xuXHRcdFx0Y2FzZSBEaXJlY3Rpb24ubGVmdDogdGhpcy5zZXRWZWxvY2l0eSgtc3BlZWQsIDApOyBicmVhaztcblx0XHRcdGRlZmF1bHQ6IHRoaXMuc2V0VmVsb2NpdHkoc3BlZWQsIDApO1xuXHRcdH1cblx0fVxuXG5cdHByb3RlY3RlZCBnZXQgcmVsYXRpdmVBbmdsZSgpIHtcblx0XHRzd2l0Y2ggKHRoaXMuZGlyZWN0aW9uKSB7XG5cdFx0XHRjYXNlIERpcmVjdGlvbi5kb3duOiByZXR1cm4gUGhhc2VyLk1hdGguSEFMRl9QSTtcblx0XHRcdGNhc2UgRGlyZWN0aW9uLmxlZnQ6IHJldHVybiBNYXRoLlBJO1xuXHRcdFx0Y2FzZSBEaXJlY3Rpb24ucmlnaHQ6IHJldHVybiAwO1xuXHRcdFx0Y2FzZSBEaXJlY3Rpb24udXA6IHJldHVybiAtUGhhc2VyLk1hdGguSEFMRl9QSTtcblx0XHR9XG5cdH1cblxufVxuXG4vKipcbiAqIFRoZSBzZXJpYWxpemVkIGNoYXJhY3RlciBkYXRhXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgSUNoYXJhY3RlclNlcmlhbGl6ZWQgZXh0ZW5kcyBJR2FtZU9iamVjdFNlcmlhbGl6ZWQge1xuXHRkaXJlY3Rpb246IG51bWJlcjtcblx0cnVuU3BlZWQ6IG51bWJlcjtcblx0c3RyZW5ndGg6IG51bWJlcjtcblx0d2Fsa1NwZWVkOiBudW1iZXI7XG59XG4iLCJpbXBvcnQgeyBDaGFyYWN0ZXIgfSBmcm9tICcuLi9jaGFyYWN0ZXJzL0NoYXJhY3Rlcic7XG5pbXBvcnQgeyBHYW1lT2JqZWN0IH0gZnJvbSAnLi4vR2FtZU9iamVjdCc7XG5cbmV4cG9ydCBjbGFzcyBUcmFwIGV4dGVuZHMgR2FtZU9iamVjdCB7XG5cblx0cHJvdGVjdGVkIGFjdGl2ZSA9IGZhbHNlO1xuXHRwcm90ZWN0ZWQgZGFtYWdlU3RyZW5ndGggPSAwO1xuXHRwcm90ZWN0ZWQgbGV0aGFsID0gZmFsc2U7XG5cblx0cHVibGljIHNldERhbWFnZVN0cmVuZ3RoKGRhbWFnZVN0cmVuZ3RoOiBudW1iZXIpIHtcblx0XHR0aGlzLmRhbWFnZVN0cmVuZ3RoID0gZGFtYWdlU3RyZW5ndGg7XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH1cblxuXHRwdWJsaWMgc2V0TGV0aGFsKGxldGhhbDogYm9vbGVhbikge1xuXHRcdHRoaXMubGV0aGFsID0gbGV0aGFsO1xuXHRcdHJldHVybiB0aGlzO1xuXHR9XG5cblx0cHVibGljIHNldEFjdGl2ZShhY3RpdmU6IGJvb2xlYW4pIHtcblx0XHR0aGlzLmFjdGl2ZSA9IGFjdGl2ZTtcblx0XHRyZXR1cm4gdGhpcztcblx0fVxuXG5cdHB1YmxpYyBvbkNvbnRhY3QoY2hhcmFjdGVyOiBDaGFyYWN0ZXIpIHtcblx0XHRpZiAodGhpcy5sZXRoYWwpIGNoYXJhY3Rlci5raWxsKCk7XG5cdFx0ZWxzZSBjaGFyYWN0ZXIuZGFtYWdlKHRoaXMuZGFtYWdlU3RyZW5ndGgpO1xuXHR9XG5cbn1cbiIsImltcG9ydCB7IEJvb3RTdGF0ZSB9IGZyb20gJy4vc3RhdGVzL0Jvb3RTdGF0ZSc7XG5pbXBvcnQgeyBNZW51U3RhdGUgfSBmcm9tICcuL3N0YXRlcy9NZW51U3RhdGUnO1xuaW1wb3J0IHsgTmV3R2FtZVN0YXRlIH0gZnJvbSAnLi9zdGF0ZXMvTmV3R2FtZVN0YXRlJztcbmltcG9ydCB7IFBsYXlTdGF0ZSB9IGZyb20gJy4vc3RhdGVzL1BsYXlTdGF0ZSc7XG5pbXBvcnQgeyBQcmVsb2FkZXJTdGF0ZSB9IGZyb20gJy4vc3RhdGVzL1ByZWxvYWRlclN0YXRlJztcbmltcG9ydCB7IFdJTl9IRUlHSFQsIFdJTl9XSURUSCB9IGZyb20gJy4vdXRpbC9jb25zdGFudHMnO1xuXG53aW5kb3cub25sb2FkID0gZnVuY3Rpb24gb25sb2FkKCkge1xuXHRjb25zdCBnYW1lID0gbmV3IFBoYXNlci5HYW1lKFdJTl9XSURUSCwgV0lOX0hFSUdIVCwgUGhhc2VyLkFVVE8sICdnYW1lJyk7XG5cblx0Z2FtZS5zdGF0ZS5hZGQoJ2Jvb3QnLCBCb290U3RhdGUpO1xuXHRnYW1lLnN0YXRlLmFkZCgncHJlbG9hZGVyJywgUHJlbG9hZGVyU3RhdGUpO1xuXHRnYW1lLnN0YXRlLmFkZCgncGxheScsIFBsYXlTdGF0ZSk7XG5cdGdhbWUuc3RhdGUuYWRkKCdtZW51JywgTWVudVN0YXRlKTtcblx0Z2FtZS5zdGF0ZS5hZGQoJ25ld0dhbWUnLCBOZXdHYW1lU3RhdGUpO1xuXG5cdGdhbWUuc3RhdGUuc3RhcnQoJ2Jvb3QnKTtcbn07XG4iLCJpbXBvcnQgeyBQYXRoRmluZGVyUGx1Z2luIH0gZnJvbSAnLi4vcGx1Z2lucy9QYXRoRmluZGVyUGx1Z2luJztcbmltcG9ydCB7IEdhbWVTdGF0ZSB9IGZyb20gJy4vR2FtZVN0YXRlJztcblxuZXhwb3J0IGNsYXNzIEJvb3RTdGF0ZSBleHRlbmRzIEdhbWVTdGF0ZSB7XG5cdHB1YmxpYyBwcmVsb2FkKCkge1xuXHRcdC8vIGxvYWQgaGVyZSBhc3NldHMgcmVxdWlyZWQgZm9yIHRoZSBsb2FkaW5nIHNjcmVlblxuXHRcdHRoaXMuZ2FtZS5sb2FkLmltYWdlKCdwcmVsb2FkZXJfYmFyJywgJ2ltYWdlcy9wcmVsb2FkZXJfYmFyLnBuZycpO1xuXHR9XG5cblx0cHVibGljIGNyZWF0ZSgpIHtcblx0XHR0aGlzLmdhbWUucGF0aEZpbmRlciA9IHRoaXMuZ2FtZS5wbHVnaW5zLmFkZChQYXRoRmluZGVyUGx1Z2luKTtcblx0XHR0aGlzLmdhbWUuc3RhdGUuc3RhcnQoJ3ByZWxvYWRlcicpO1xuXHR9XG59XG4iLCIvLyBDb3B5cmlnaHQgKGMpIDIwMTMgYXBwc2J1LWRlLiBNSVQgbGljZW5zZS5cbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9hcHBzYnUtZGUvcGhhc2VyX3BsdWdpbl9wYXRoZmluZGluZ1xuXG5leHBvcnQgY2xhc3MgUGF0aEZpbmRlclBsdWdpbiBleHRlbmRzIFBoYXNlci5QbHVnaW4ge1xuXG5cdHByaXZhdGUgcmVhZG9ubHkgX2Vhc3lTdGFyID0gbmV3IEVhc3lTdGFyLmpzKCk7XG5cdHByaXZhdGUgX2dyaWQ6IG51bWJlcltdW10gPSBudWxsO1xuXHRwcml2YXRlIF9jYWxsYmFjazogUGhhc2VyLkVhc3lTdGFyQ2FsbGJhY2sgPSBudWxsO1xuXHRwcml2YXRlIF9wcmVwYXJlZCA9IGZhbHNlO1xuXHRwcml2YXRlIF93YWxrYWJsZXMgPSBbMF07XG5cblx0cHVibGljIGNvbnN0cnVjdG9yKGdhbWU6IFBoYXNlci5HYW1lLCBwYXJlbnQ6IFBoYXNlci5QbHVnaW5NYW5hZ2VyKSB7XG5cdFx0c3VwZXIoZ2FtZSwgcGFyZW50KTtcblx0XHRpZiAodHlwZW9mIEVhc3lTdGFyICE9PSAnb2JqZWN0Jykge1xuXHRcdFx0dGhyb3cgbmV3IEVycm9yKCdFYXN5c3RhciBpcyBub3QgZGVmaW5lZCEnKTtcblx0XHR9XG5cdH1cblxuXHQvKipcblx0ICogU2V0IEdyaWQgZm9yIFBhdGhmaW5kaW5nLlxuXHQgKlxuXHQgKiBAcGFyYW0gZ3JpZCBNYXBkYXRhIGFzIGEgdHdvIGRpbWVuc2lvbmFsIGFycmF5LlxuXHQgKiBAcGFyYW0gd2Fsa2FibGVzIFRpbGVzIHdoaWNoIGFyZSB3YWxrYWJsZS4gRXZlcnkgb3RoZXIgdGlsZSBpcyBtYXJrZWQgYXMgYmxvY2tlZC5cblx0ICogQHBhcmFtIGl0ZXJhdGlvbnNQZXJDb3VudCBUaGUgYW1vdW50IG9mIGl0ZXJhdGlvbnMgcGVyIGNvdW50XG5cdCAqL1xuXHRwdWJsaWMgc2V0R3JpZChncmlkOiBQaGFzZXIuVGlsZVtdW10sIHdhbGthYmxlczogbnVtYmVyW10sIGl0ZXJhdGlvbnNQZXJDb3VudDogbnVtYmVyID0gbnVsbCkge1xuXHRcdHRoaXMuX2dyaWQgPSBbXTtcblx0XHRmb3IgKGxldCBpID0gMDsgaSA8IGdyaWQubGVuZ3RoOyBpKyspIHtcblx0XHRcdHRoaXMuX2dyaWRbaV0gPSBbXTtcblx0XHRcdGZvciAobGV0IGogPSAwOyBqIDwgZ3JpZFtpXS5sZW5ndGg7IGorKykge1xuXHRcdFx0XHR0aGlzLl9ncmlkW2ldW2pdID0gZ3JpZFtpXVtqXSA/IGdyaWRbaV1bal0uaW5kZXggOiAwO1xuXHRcdFx0fVxuXHRcdH1cblx0XHR0aGlzLl93YWxrYWJsZXMgPSB3YWxrYWJsZXM7XG5cblx0XHR0aGlzLl9lYXN5U3Rhci5zZXRHcmlkKHRoaXMuX2dyaWQpO1xuXHRcdHRoaXMuX2Vhc3lTdGFyLnNldEFjY2VwdGFibGVUaWxlcyh0aGlzLl93YWxrYWJsZXMpO1xuXG5cdFx0Ly8gaW5pdGlhdGUgYWxsIHdhbGthYmxlIHRpbGVzIHdpdGggY29zdCAxIHNvIHRoZXkgd2lsbCBiZSB3YWxrYWJsZSBldmVuIGlmIHRoZXkgYXJlIG5vdCBvbiB0aGUgZ3JpZCBtYXAsIGpldC5cblx0XHRmb3IgKGNvbnN0IHdhbGthYmxlIG9mIHdhbGthYmxlcykge1xuXHRcdFx0dGhpcy5zZXRUaWxlQ29zdCh3YWxrYWJsZSwgMSk7XG5cdFx0fVxuXG5cdFx0aWYgKGl0ZXJhdGlvbnNQZXJDb3VudCAhPT0gbnVsbCkge1xuXHRcdFx0dGhpcy5fZWFzeVN0YXIuc2V0SXRlcmF0aW9uc1BlckNhbGN1bGF0aW9uKGl0ZXJhdGlvbnNQZXJDb3VudCk7XG5cdFx0fVxuXHR9XG5cblx0LyoqXG5cdCAqIFNldHMgdGhlIHRpbGUgY29zdCBmb3IgYSBwYXJ0aWN1bGFyIHRpbGUgdHlwZS5cblx0ICpcblx0ICogQHBhcmFtIHRpbGVUeXBlIFRoZSB0aWxlIHR5cGUgdG8gc2V0IHRoZSBjb3N0IGZvci5cblx0ICogQHBhcmFtIGNvc3QgVGhlIG11bHRpcGxpY2F0aXZlIGNvc3QgYXNzb2NpYXRlZCB3aXRoIHRoZSBnaXZlbiB0aWxlLlxuXHQgKi9cblx0cHVibGljIHNldFRpbGVDb3N0KHRpbGVUeXBlOiBudW1iZXIsIGNvc3Q6IG51bWJlcikge1xuXHRcdHRoaXMuX2Vhc3lTdGFyLnNldFRpbGVDb3N0KHRpbGVUeXBlLCBjb3N0KTtcblx0fVxuXG5cdC8qKlxuXHQgKiBTZXQgY2FsbGJhY2sgZnVuY3Rpb24gKFVoLCByZWFsbHk/KVxuXHQgKiBAcGFyYW0gY2FsbGJhY2sgVGhlIGNhbGxiYWNrIHRvIHNldFxuXHQgKi9cblx0cHVibGljIHNldENhbGxiYWNrRnVuY3Rpb24oY2FsbGJhY2s6IFBoYXNlci5FYXN5U3RhckNhbGxiYWNrKSB7XG5cdFx0dGhpcy5fY2FsbGJhY2sgPSBjYWxsYmFjaztcblx0fVxuXG5cdC8qKlxuXHQgKiBQcmVwYXJlIHBhdGhjYWxjdWxhdGlvbiBmb3IgZWFzeXN0YXIuXG5cdCAqXG5cdCAqIEBwYXJhbSBmcm9tIGFycmF5IDA6IHgtY29vcmRzLCAxOiB5LWNvb3JkcyAoW3gseV0pXG5cdCAqIEBwYXJhbSB0byBhcnJheSAwOiB4LWNvb3JkcywgMTogeS1jb29yZHMgKFt4LHldKVxuXHQgKi9cblx0cHVibGljIHByZXBhcmVQYXRoQ2FsY3VsYXRpb24oZnJvbTogW251bWJlciwgbnVtYmVyXSwgdG86IFtudW1iZXIsIG51bWJlcl0pIHtcblx0XHRpZiAoIXRoaXMuX2NhbGxiYWNrKSB0aHJvdyBuZXcgRXJyb3IoJ05vIENhbGxiYWNrIHNldCEnKTtcblxuXHRcdGNvbnN0IFtzdGFydFgsIHN0YXJ0WV0gPSBmcm9tO1xuXHRcdGNvbnN0IFtkZXN0aW5hdGlvblgsIGRlc3RpbmF0aW9uWV0gPSB0bztcblx0XHR0aGlzLl9lYXN5U3Rhci5maW5kUGF0aChzdGFydFgsIHN0YXJ0WSwgZGVzdGluYXRpb25YLCBkZXN0aW5hdGlvblksIHRoaXMuX2NhbGxiYWNrKTtcblx0XHR0aGlzLl9wcmVwYXJlZCA9IHRydWU7XG5cdH1cblxuXHQvKipcblx0ICogU3RhcnQgcGF0aCBjYWxjdWxhdGlvbi5cblx0ICovXG5cdHB1YmxpYyBjYWxjdWxhdGVQYXRoKCkge1xuXHRcdGlmICh0aGlzLl9wcmVwYXJlZCA9PT0gbnVsbCkge1xuXHRcdFx0dGhyb3cgbmV3IEVycm9yKCdubyBDYWxjdWxhdGlvbiBwcmVwYXJlZCEnKTtcblx0XHR9XG5cblx0XHR0aGlzLl9lYXN5U3Rhci5jYWxjdWxhdGUoKTtcblx0fVxuXG59XG4iLCJpbXBvcnQgeyBHYW1lU3RhdGUgfSBmcm9tICcuL0dhbWVTdGF0ZSc7XG5pbXBvcnQgeyBQbGF5U3RhdGUgfSBmcm9tICcuL1BsYXlTdGF0ZSc7XG5cbmV4cG9ydCBjbGFzcyBNZW51U3RhdGUgZXh0ZW5kcyBHYW1lU3RhdGUge1xuXHRwdWJsaWMgdGV4dHM6IFBoYXNlci5UZXh0W10gPSBbXTtcblx0cHVibGljIGxvZ286IFBoYXNlci5TcHJpdGUgPSBudWxsO1xuXG5cdHB1YmxpYyBjcmVhdGUoKSB7XG5cdFx0c3VwZXIuY3JlYXRlKCk7XG5cdFx0dGhpcy5nYW1lLnN0YWdlLmJhY2tncm91bmRDb2xvciA9ICcjMkExQjE5Jztcblx0XHR0aGlzLmxvZ28gPSB0aGlzLmdhbWUuYWRkLnNwcml0ZSh0aGlzLmdhbWUud29ybGQuY2VudGVyWCwgdGhpcy5nYW1lLndvcmxkLmNlbnRlclkgLSAxMjAsICdsb2dvJyk7XG5cdFx0dGhpcy5sb2dvLmFuY2hvci5zZXRUbygwLjUsIDAuNSk7XG5cdFx0dGhpcy5sb2dvLnNjYWxlLnNldFRvKDAuNSwgMC41KTtcblxuXHRcdHRoaXMuY3JlYXRlQnV0dG9uKCdOZXcgR2FtZScsICgpID0+IHtcblx0XHRcdHRoaXMuZ2FtZS5zdGF0ZS5zdGFydCgnbmV3R2FtZScpO1xuXHRcdH0pO1xuXHRcdGlmIChsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnbGV2ZWwnKSkgdGhpcy5jcmVhdGVCdXR0b24oJ0NvbnRpbnVlJywgKCkgPT4ge1xuXHRcdFx0R2FtZVN0YXRlLnBlbmRpbmdPbkNyZWF0ZS5wdXNoKChwbGF5U3RhdGU6IFBsYXlTdGF0ZSkgPT4ge1xuXHRcdFx0XHRwbGF5U3RhdGUuZ2FtZU1hbmFnZXIuc3RvcmFnZS5sb2FkKCk7XG5cdFx0XHR9KTtcblx0XHRcdHRoaXMuZ2FtZS5zdGF0ZS5zdGFydCgncGxheScpO1xuXHRcdH0pO1xuXHR9XG5cblx0cHVibGljIHNodXRkb3duKCkge1xuXHRcdGZvciAoY29uc3QgdGV4dCBvZiB0aGlzLnRleHRzKSB0ZXh0LmRlc3Ryb3kodHJ1ZSk7XG5cdFx0dGhpcy50ZXh0cy5sZW5ndGggPSAwO1xuXHRcdHRoaXMubG9nby5kZXN0cm95KHRydWUpO1xuXHRcdHN1cGVyLnNodXRkb3duKHRoaXMuZ2FtZSk7XG5cdH1cblxuXHRwcml2YXRlIGNyZWF0ZUJ1dHRvbihuYW1lOiBzdHJpbmcsIGNiOiBGdW5jdGlvbikge1xuXHRcdGNvbnN0IHRleHQgPSB0aGlzLmdhbWUuYWRkLnRleHQodGhpcy5nYW1lLndvcmxkLmNlbnRlclgsIHRoaXMuZ2FtZS53b3JsZC5jZW50ZXJZLCBuYW1lLCB7IGZvbnQ6ICc2NXB4IEFyaWFsJywgZmlsbDogJyNDRENEQ0QnLCBhbGlnbjogJ2NlbnRlcicgfSk7XG5cdFx0dGV4dC5hbmNob3Iuc2V0KDAuNSk7XG5cdFx0dGV4dC5pbnB1dEVuYWJsZWQgPSB0cnVlO1xuXHRcdHRleHQuZXZlbnRzLm9uSW5wdXRVcC5hZGQoY2IsIHRoaXMpO1xuXHRcdHRleHQuZXZlbnRzLm9uSW5wdXREb3duLmFkZCgoKSA9PiB7XG5cdFx0XHR0ZXh0LmZpbGwgPSAnI0ZGMDA0NCc7XG5cdFx0XHR0ZXh0LmV2ZW50cy5vbklucHV0T3Zlci5yZW1vdmVBbGwoKTtcblx0XHRcdHRleHQuZXZlbnRzLm9uSW5wdXRPdXQucmVtb3ZlQWxsKCk7XG5cdFx0fSk7XG5cdFx0dGV4dC5ldmVudHMub25JbnB1dE92ZXIuYWRkKCgpID0+IHsgdGV4dC5maWxsID0gJyNGRkZGRkYnOyB9KTtcblx0XHR0ZXh0LmV2ZW50cy5vbklucHV0T3V0LmFkZCgoKSA9PiB7IHRleHQuZmlsbCA9ICcjRUZFRkVGJzsgfSk7XG5cdFx0dGV4dC5hbGlnblRvKHRoaXMudGV4dHMubGVuZ3RoID8gdGhpcy50ZXh0c1t0aGlzLnRleHRzLmxlbmd0aCAtIDFdIDogdGhpcy5sb2dvLCBQaGFzZXIuQk9UVE9NX0NFTlRFUiwgMCwgMTYpO1xuXHRcdHRoaXMudGV4dHMucHVzaCh0ZXh0KTtcblx0fVxuXG59XG4iLCJpbXBvcnQgeyByZWFkTGluZSB9IGZyb20gJy4uL3V0aWwvdXRpbCc7XG5pbXBvcnQgeyBHYW1lU3RhdGUgfSBmcm9tICcuL0dhbWVTdGF0ZSc7XG5pbXBvcnQgeyBQbGF5U3RhdGUgfSBmcm9tICcuL1BsYXlTdGF0ZSc7XG5cbmV4cG9ydCBjbGFzcyBOZXdHYW1lU3RhdGUgZXh0ZW5kcyBHYW1lU3RhdGUge1xuXG5cdHB1YmxpYyBwcmVsb2FkKCkge1xuXHRcdHN1cGVyLnByZWxvYWQodGhpcy5nYW1lKTtcblx0XHR0aGlzLmdhbWUubG9hZC5qc29uKCdMZXZlbC0wLUdhbWVPYmplY3RzJywgJ2pzb24vTGV2ZWwtMC1HYW1lT2JqZWN0cy5qc29uJyk7XG5cdH1cblxuXHRwdWJsaWMgY3JlYXRlKCkge1xuXHRcdGNvbnN0IHRpdGxlVGV4dCA9IHRoaXMuZ2FtZS5hZGQudGV4dCh0aGlzLmdhbWUud29ybGQuY2VudGVyWCwgdGhpcy5nYW1lLndvcmxkLmNlbnRlclkgLSA2NSwgJ0luc2VydCB5b3VyIG5hbWUnLFxuXHRcdFx0eyBmb250OiAnNjVweCBBcmlhbCcsIGZpbGw6ICcjQ0RDRENEJywgYWxpZ246ICdjZW50ZXInIH0pO1xuXHRcdHRpdGxlVGV4dC5hbmNob3Iuc2V0VG8oMC41LCAwLjUpO1xuXG5cdFx0Y29uc3QgaW5wdXRUZXh0ID0gdGhpcy5nYW1lLmFkZC50ZXh0KHRoaXMuZ2FtZS53b3JsZC5jZW50ZXJYLCB0aGlzLmdhbWUud29ybGQuY2VudGVyWSwgJycsXG5cdFx0XHR7IGZvbnQ6ICc2NXB4IEFyaWFsJywgZmlsbDogJyNDRENEQ0QnLCBhbGlnbjogJ2NlbnRlcicgfSk7XG5cdFx0aW5wdXRUZXh0LmFuY2hvci5zZXRUbygwLjUsIDAuNSk7XG5cdFx0aW5wdXRUZXh0LmFsaWduVG8odGl0bGVUZXh0LCBQaGFzZXIuQk9UVE9NX0NFTlRFUiwgMCwgMjUpO1xuXG5cdFx0cmVhZExpbmUoaW5wdXRUZXh0LCAobmFtZSkgPT4ge1xuXHRcdFx0dGl0bGVUZXh0LmRlc3Ryb3kodHJ1ZSk7XG5cdFx0XHRpbnB1dFRleHQuZGVzdHJveSh0cnVlKTtcblx0XHRcdHRoaXMuZ2FtZS5zdGF0ZS5zdGFydCgncGxheScpO1xuXHRcdFx0R2FtZVN0YXRlLnBlbmRpbmdPbkNyZWF0ZS5wdXNoKChwbGF5U3RhdGU6IFBsYXlTdGF0ZSkgPT4ge1xuXHRcdFx0XHRjb25zb2xlLmxvZygnTG9hZGluZyBOZXcgR2FtZS4uLicpO1xuXHRcdFx0XHRwbGF5U3RhdGUuZ2FtZU1hbmFnZXIucGxheWVyTmFtZSA9IG5hbWU7XG5cdFx0XHRcdHBsYXlTdGF0ZS5nYW1lTWFuYWdlci5zdG9yYWdlLmxvYWRHYW1lT2JqZWN0cyh0aGlzLmdhbWUuY2FjaGUuZ2V0SlNPTignTGV2ZWwtMC1HYW1lT2JqZWN0cycpKTtcblx0XHRcdFx0Y29uc29sZS5sb2coJ0xvYWRlZCEnKTtcblx0XHRcdH0pO1xuXHRcdH0sIHsgbWF4aW11bUxlbmd0aDogMjAgfSk7XG5cdH1cblxufVxuIiwiZXhwb3J0IGZ1bmN0aW9uIGNodW5rPFQ+KGVudHJpZXM6IFRbXSwgY2h1bmtTaXplOiBudW1iZXIpOiBUW11bXSB7XG5cdGNvbnN0IGNsb25lID0gZW50cmllcy5zbGljZSgpO1xuXHRjb25zdCBjaHVua3MgPSBbXTtcblx0d2hpbGUgKGNsb25lLmxlbmd0aCkgY2h1bmtzLnB1c2goY2xvbmUuc3BsaWNlKDAsIGNodW5rU2l6ZSkpO1xuXHRyZXR1cm4gY2h1bmtzO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcmVhZExpbmUodGV4dDogUGhhc2VyLlRleHQsIGNiOiAodGV4dDogc3RyaW5nKSA9PiB2b2lkLCBvcHRpb25zPzogUGhhc2VyUmVhZExpbmVPcHRpb25zKSB7XG5cdGNvbnN0IGNvbnRlbnQgPSBbXTtcblx0Y29uc3QgbWF4aW11bSA9ICdtYXhpbXVtTGVuZ3RoJyBpbiBvcHRpb25zID8gb3B0aW9ucy5tYXhpbXVtTGVuZ3RoIDogMTAwO1xuXG5cdGNvbnN0IGxpc3RlbmVyID0gKGV2ZW50OiBLZXlib2FyZEV2ZW50KSA9PiB7XG5cdFx0aWYgKGV2ZW50LmtleSA9PT0gJ0VudGVyJykge1xuXHRcdFx0ZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIGxpc3RlbmVyKTtcblx0XHRcdGNiKGNvbnRlbnQuam9pbignJykpO1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGlmIChldmVudC5rZXkgPT09ICdCYWNrc3BhY2UnKSB7XG5cdFx0XHRpZiAoY29udGVudC5sZW5ndGgpIGNvbnRlbnQucG9wKCk7XG5cdFx0fSBlbHNlIGlmIChjb250ZW50Lmxlbmd0aCA8PSBtYXhpbXVtICYmIC9eW1xcKFxcKVxcW1xcXVxcd1xcZFxcLSE/wqHCvyBdJC8udGVzdChldmVudC5rZXkpKSB7XG5cdFx0XHRjb250ZW50LnB1c2goZXZlbnQua2V5KTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdHRleHQudGV4dCA9IGNvbnRlbnQuam9pbignJyk7XG5cdH07XG5cdGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCBsaXN0ZW5lcik7XG59XG5cbi8qKlxuICogVGhlIHJlYWRsaW5lIG9wdGlvbnNcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBQaGFzZXJSZWFkTGluZU9wdGlvbnMge1xuXHRtYXhpbXVtTGVuZ3RoPzogbnVtYmVyO1xufVxuIiwiaW1wb3J0IHsgR2FtZU1hbmFnZXIgfSBmcm9tICcuLi9zdHJ1Y3R1cmVzL21hbmFnZXJzL0dhbWVNYW5hZ2VyJztcbmltcG9ydCB7IEdhbWVTdGF0ZSB9IGZyb20gJy4vR2FtZVN0YXRlJztcblxuZXhwb3J0IGNsYXNzIFBsYXlTdGF0ZSBleHRlbmRzIEdhbWVTdGF0ZSB7XG5cdHB1YmxpYyBnYW1lTWFuYWdlcjogR2FtZU1hbmFnZXIgPSBudWxsO1xuXHRwdWJsaWMgdGlsZW1hcHM6IE1hcDxudW1iZXIsIFBoYXNlci5UaWxlbWFwPiA9IG5ldyBNYXAoKTtcblx0cHVibGljIG9ic3RhY2xlTGF5ZXI6IFBoYXNlci5UaWxlbWFwTGF5ZXIgPSBudWxsO1xuXHRwcm90ZWN0ZWQgZXZlbnRzOiBNYXA8c3RyaW5nLCBGdW5jdGlvbj4gPSBuZXcgTWFwKCk7XG5cdHByaXZhdGUgZXNjTGlzdGVuZXI6IChldmVudDogS2V5Ym9hcmRFdmVudCkgPT4gdm9pZCA9IG51bGw7XG5cblx0cHVibGljIGNyZWF0ZSgpIHtcblx0XHR0aGlzLmdldFRpbGVtYXAoMCk7XG5cblx0XHQvLyBQcmV2ZW50IGRpcmVjdGlvbnMgYW5kIHNwYWNlIGtleSBldmVudHMgYnViYmxpbmcgdXAgdG8gYnJvd3Nlcixcblx0XHQvLyBzaW5jZSB0aGVzZSBrZXlzIHdpbGwgbWFrZSB3ZWIgcGFnZSBzY3JvbGwgd2hpY2ggaXMgbm90XG5cdFx0Ly8gZXhwZWN0ZWQuXG5cdFx0dGhpcy5nYW1lLmlucHV0LmtleWJvYXJkLmFkZEtleUNhcHR1cmUoW1xuXHRcdFx0UGhhc2VyLktleWJvYXJkLkxFRlQsXG5cdFx0XHRQaGFzZXIuS2V5Ym9hcmQuUklHSFQsXG5cdFx0XHRQaGFzZXIuS2V5Ym9hcmQuVVAsXG5cdFx0XHRQaGFzZXIuS2V5Ym9hcmQuRE9XTixcblx0XHRcdFBoYXNlci5LZXlib2FyZC5TUEFDRUJBUlxuXHRcdF0pO1xuXG5cdFx0dGhpcy5nYW1lTWFuYWdlciA9IG5ldyBHYW1lTWFuYWdlcih0aGlzKTtcblx0XHR0aGlzLmdhbWUucGh5c2ljcy5zdGFydFN5c3RlbShQaGFzZXIuUGh5c2ljcy5BUkNBREUpO1xuXHRcdHRoaXMuZ2FtZS5zdGFnZS5iYWNrZ3JvdW5kQ29sb3IgPSAnIzAwMCc7XG5cdFx0c3VwZXIuY3JlYXRlKCk7XG5cblx0XHRjb25zdCBvblBhdXNlID0gKCkgPT4ge1xuXHRcdFx0dGhpcy53b3JsZC5zZXRBbGxDaGlsZHJlbigndGludCcsIDB4N0E3QTdBKTtcblx0XHR9O1xuXHRcdGNvbnN0IG9uUmVzdW1lID0gKCkgPT4ge1xuXHRcdFx0dGhpcy53b3JsZC5zZXRBbGxDaGlsZHJlbigndGludCcsIDB4RkZGRkZGKTtcblx0XHR9O1xuXHRcdHRoaXMuZXZlbnRzLnNldCgnb25QYXVzZScsIG9uUGF1c2UpO1xuXHRcdHRoaXMuZXZlbnRzLnNldCgnb25SZXN1bWUnLCBvblJlc3VtZSk7XG5cdFx0dGhpcy5nYW1lLm9uUGF1c2UuYWRkKG9uUGF1c2UpO1xuXHRcdHRoaXMuZ2FtZS5vblJlc3VtZS5hZGQob25SZXN1bWUpO1xuXG5cdFx0dGhpcy5lc2NMaXN0ZW5lciA9IChldmVudDogS2V5Ym9hcmRFdmVudCkgPT4ge1xuXHRcdFx0aWYgKGV2ZW50LmtleSA9PT0gJ0VzY2FwZScpIHtcblx0XHRcdFx0dGhpcy5nYW1lLnBhdXNlZCA9ICF0aGlzLmdhbWUucGF1c2VkO1xuXHRcdFx0fVxuXHRcdH07XG5cdFx0ZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIHRoaXMuZXNjTGlzdGVuZXIpO1xuXG5cdFx0Ly8gU2V0IHVwIHRoZSBwYXRoIGZpbmRlclxuXHRcdHRoaXMuZ2FtZS5wYXRoRmluZGVyLnNldEdyaWQodGhpcy5vYnN0YWNsZUxheWVyLmxheWVyLmRhdGEsIFstMV0pO1xuXHR9XG5cblx0cHVibGljIHNodXRkb3duKCkge1xuXHRcdC8vIENsZWFuIHVwIGV2ZXJ5dGhpbmcgdG8gYXZvaWQgbWVtb3J5IGxlYWtzXG5cdFx0ZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIHRoaXMuZXNjTGlzdGVuZXIpO1xuXHRcdHRoaXMuZXNjTGlzdGVuZXIgPSBudWxsO1xuXHRcdHRoaXMuZ2FtZS5vblBhdXNlLnJlbW92ZSh0aGlzLmV2ZW50cy5nZXQoJ29uUGF1c2UnKSk7XG5cdFx0dGhpcy5nYW1lLm9uUmVzdW1lLnJlbW92ZSh0aGlzLmV2ZW50cy5nZXQoJ29uUmVzdW1lJykpO1xuXHRcdHRoaXMuZXZlbnRzLmNsZWFyKCk7XG5cdFx0c3VwZXIuc2h1dGRvd24odGhpcy5nYW1lKTtcblx0fVxuXG5cdHB1YmxpYyB1cGRhdGUoKSB7XG5cdFx0c3VwZXIudXBkYXRlKHRoaXMuZ2FtZSk7XG5cblx0XHRpZiAoIXRoaXMuZ2FtZS5wYXVzZWQpIHtcblx0XHRcdHRoaXMuZ2FtZS5waHlzaWNzLmFyY2FkZS5jb2xsaWRlKHRoaXMuZ2FtZU1hbmFnZXIuZ2FtZU9iamVjdHNHcm91cCwgdGhpcy5vYnN0YWNsZUxheWVyKTtcblx0XHRcdHRoaXMuZ2FtZU1hbmFnZXIudXBkYXRlKCk7XG5cdFx0fVxuXHR9XG5cblx0cHJvdGVjdGVkIGdldFRpbGVtYXAobGV2ZWw6IG51bWJlcikge1xuXHRcdGNvbnN0IG5hbWUgPSBgTGV2ZWwtJHtsZXZlbH1gO1xuXHRcdGxldCB0aWxlbWFwID0gdGhpcy50aWxlbWFwcy5nZXQobGV2ZWwpO1xuXHRcdGlmICghdGlsZW1hcCkge1xuXHRcdFx0dGlsZW1hcCA9IHRoaXMuZ2FtZS5hZGQudGlsZW1hcChuYW1lKTtcblx0XHRcdHRpbGVtYXAuYWRkVGlsZXNldEltYWdlKCdvdmVyd29ybGQnKTtcblxuXHRcdFx0Ly8gQmFja2dyb3VuZFxuXHRcdFx0Y29uc3QgYmFja2dyb3VuZCA9IHRpbGVtYXAuY3JlYXRlTGF5ZXIoMCk7XG5cdFx0XHRiYWNrZ3JvdW5kLnNtb290aGVkID0gZmFsc2U7XG5cdFx0XHRiYWNrZ3JvdW5kLnJlc2l6ZVdvcmxkKCk7XG5cdFx0XHQvLyAvLyBEZWNvcmF0aW9uXG5cdFx0XHRjb25zdCBkZWNvcmF0aW9uID0gdGlsZW1hcC5jcmVhdGVMYXllcigxKTtcblx0XHRcdGRlY29yYXRpb24uc21vb3RoZWQgPSBmYWxzZTtcblx0XHRcdC8vIC8vIE9ic3RhY2xlc1xuXHRcdFx0dGhpcy5vYnN0YWNsZUxheWVyID0gdGlsZW1hcC5jcmVhdGVMYXllcigyKTtcblx0XHRcdHRoaXMub2JzdGFjbGVMYXllci5zbW9vdGhlZCA9IGZhbHNlO1xuXHRcdFx0dGhpcy5nYW1lLnBoeXNpY3MuYXJjYWRlLmVuYWJsZSh0aGlzLm9ic3RhY2xlTGF5ZXIpO1xuXHRcdFx0dGlsZW1hcC5zZXRDb2xsaXNpb25CeUV4Y2x1c2lvbihbXSwgdHJ1ZSwgdGhpcy5vYnN0YWNsZUxheWVyKTtcblxuXHRcdFx0dGhpcy50aWxlbWFwcy5zZXQobGV2ZWwsIHRpbGVtYXApO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aWxlbWFwO1xuXHR9XG5cbn1cbiIsImltcG9ydCB7IFBsYXlTdGF0ZSB9IGZyb20gJy4uLy4uL3N0YXRlcy9QbGF5U3RhdGUnO1xuaW1wb3J0IHsgUGxheWVyIH0gZnJvbSAnLi4vZ2FtZU9iamVjdHMvY2hhcmFjdGVycy9QbGF5ZXInO1xuaW1wb3J0IHsgR2FtZU9iamVjdCB9IGZyb20gJy4uL2dhbWVPYmplY3RzL0dhbWVPYmplY3QnO1xuaW1wb3J0IHsgTWFwTWFuYWdlciB9IGZyb20gJy4vTWFwTWFuYWdlcic7XG5pbXBvcnQgeyBTdG9yYWdlTWFuYWdlciB9IGZyb20gJy4vU3RvcmFnZU1hbmFnZXInO1xuXG5leHBvcnQgY2xhc3MgR2FtZU1hbmFnZXIge1xuXHRwdWJsaWMgbWFwTWFuYWdlcjogTWFwTWFuYWdlciA9IG51bGw7XG5cdHB1YmxpYyBnYW1lID0gdGhpcy5zdGF0ZS5nYW1lO1xuXHRwdWJsaWMgc3RvcmFnZSA9IG5ldyBTdG9yYWdlTWFuYWdlcih0aGlzKTtcblx0cHVibGljIGdhbWVPYmplY3RzR3JvdXA6IFBoYXNlci5Hcm91cCA9IG51bGw7XG5cdHB1YmxpYyBwbGF5ZXI6IFBsYXllciA9IG51bGw7XG5cdHB1YmxpYyBwbGF5ZXJOYW1lOiBzdHJpbmcgPSBudWxsO1xuXHRwdWJsaWMgbGV2ZWwgPSBHYW1lTGV2ZWxzLkZpcnN0O1xuXHRwdWJsaWMgcGVuZGluZ09uQ3JlYXRlOiBGdW5jdGlvbltdID0gW107XG5cblx0cHVibGljIGNvbnN0cnVjdG9yKHB1YmxpYyBzdGF0ZTogUGxheVN0YXRlKSB7XG5cdFx0Ly8gdGhpcy5nYW1lT2JqZWN0c0dyb3VwID0gZ2FtZS5hZGQuZ3JvdXAobnVsbCwgJ2dhbWVPYmplY3RzJywgdW5kZWZpbmVkLCB0cnVlLCBQaGFzZXIuUGh5c2ljcy5BUkNBREUpO1xuXHRcdC8vIHRoaXMub2JzdGFjbGVzR3JvdXAgPSBnYW1lLmFkZC5ncm91cChudWxsLCAnb2JzdGFjbGVzJywgdW5kZWZpbmVkLCB0cnVlLCBQaGFzZXIuUGh5c2ljcy5BUkNBREUpO1xuXHRcdC8vIHRoaXMuZ2FtZU9iamVjdHNHcm91cCA9IGdhbWUuYWRkLmdyb3VwKG51bGwsICdnYW1lT2JqZWN0c0dyb3VwJywgdHJ1ZSwgZmFsc2UsIFBoYXNlci5QaHlzaWNzLkFSQ0FERSk7XG5cdFx0dGhpcy5nYW1lT2JqZWN0c0dyb3VwID0gdGhpcy5nYW1lLmFkZC5ncm91cCgpO1xuXHRcdHRoaXMuZ2FtZU9iamVjdHNHcm91cC5uYW1lID0gJ2dhbWVPYmplY3RzR3JvdXAnO1xuXHRcdHRoaXMuZ2FtZU9iamVjdHNHcm91cC5lbmFibGVCb2R5ID0gdHJ1ZTtcblx0XHR0aGlzLmdhbWVPYmplY3RzR3JvdXAuZW5hYmxlQm9keURlYnVnID0gdHJ1ZTtcblx0XHR0aGlzLmdhbWVPYmplY3RzR3JvdXAucmVuZGVyYWJsZSA9IHRydWU7XG5cdFx0Y29uc29sZS5sb2codGhpcyk7XG5cdH1cblxuXHRwdWJsaWMgY2xlYXIoKSB7XG5cdFx0dGhpcy5nYW1lT2JqZWN0c0dyb3VwLmtpbGxBbGwoKTtcblx0XHRyZXR1cm4gdGhpcztcblx0fVxuXG5cdHB1YmxpYyB1cGRhdGUoKSB7XG5cdFx0Zm9yIChjb25zdCBnYW1lT2JqZWN0IG9mIHRoaXMuZ2FtZU9iamVjdHNHcm91cC5jaGlsZHJlbiBhcyBHYW1lT2JqZWN0W10pIHtcblx0XHRcdGdhbWVPYmplY3QudXBkYXRlKCk7XG5cdFx0fVxuXHRcdHRoaXMuZ2FtZS5waHlzaWNzLmFyY2FkZS5jb2xsaWRlKHRoaXMuZ2FtZU9iamVjdHNHcm91cCwgdW5kZWZpbmVkLCAoZzE6IEdhbWVPYmplY3QsIGcyOiBHYW1lT2JqZWN0KSA9PiBnMS5jb2xsaWRlcyhnMikgJiYgZzIuY29sbGlkZXMoZzEpKTtcblx0XHR0aGlzLmdhbWVPYmplY3RzR3JvdXAuc29ydCgneScsIFBoYXNlci5Hcm91cC5TT1JUX0FTQ0VORElORyk7XG5cdH1cblxufVxuXG4vKipcbiAqIFRoZSBnYW1lJ3MgbGV2ZWxzXG4gKi9cbmV4cG9ydCBlbnVtIEdhbWVMZXZlbHMge1xuXHRGaXJzdFxufVxuIiwiaW1wb3J0IHsgUGxheWVyIH0gZnJvbSAnLi4vZ2FtZU9iamVjdHMvY2hhcmFjdGVycy9QbGF5ZXInO1xuaW1wb3J0IHsgR2FtZU9iamVjdCwgSUdhbWVPYmplY3RTZXJpYWxpemVkIH0gZnJvbSAnLi4vZ2FtZU9iamVjdHMvR2FtZU9iamVjdCc7XG5pbXBvcnQgeyBHYW1lTWFuYWdlciB9IGZyb20gJy4vR2FtZU1hbmFnZXInO1xuXG5leHBvcnQgY2xhc3MgU3RvcmFnZU1hbmFnZXIge1xuXG5cdHB1YmxpYyBjb25zdHJ1Y3Rvcihwcml2YXRlIHJlYWRvbmx5IGdhbWVNYW5hZ2VyOiBHYW1lTWFuYWdlcikgeyB9XG5cblx0cHVibGljIHNhdmUoKSB7XG5cdFx0bG9jYWxTdG9yYWdlLmNsZWFyKCk7XG5cdFx0bG9jYWxTdG9yYWdlLnNldEl0ZW0oJ2dhbWVPYmplY3RzJywgSlNPTi5zdHJpbmdpZnkodGhpcy5nYW1lTWFuYWdlci5nYW1lT2JqZWN0c0dyb3VwLmNoaWxkcmVuKSk7XG5cdFx0bG9jYWxTdG9yYWdlLnNldEl0ZW0oJ2xldmVsJywgdGhpcy5nYW1lTWFuYWdlci5sZXZlbC50b1N0cmluZygpKTtcblx0XHRsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgncGxheWVyTmFtZScsIHRoaXMuZ2FtZU1hbmFnZXIucGxheWVyTmFtZSk7XG5cdH1cblxuXHRwdWJsaWMgbG9hZCgpIHtcblx0XHQvLyBDbGVhciB0aGUgZ2FtZSBtYW5hZ2VyXG5cdFx0dGhpcy5nYW1lTWFuYWdlci5jbGVhcigpO1xuXG5cdFx0Ly8gTG9hZCB0aGUgZGF0YVxuXHRcdGNvbnN0IHJhd0xldmVsID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oJ2xldmVsJyk7XG5cdFx0aWYgKHJhd0xldmVsID09PSBudWxsKSB0aHJvdyBuZXcgRXJyb3IoYENvdWxkIG5vdCBmaW5kIGEgc2F2ZWQgZmlsZS5gKTtcblx0XHRjb25zdCBsZXZlbCA9IE51bWJlcihyYXdMZXZlbCk7XG5cblx0XHR0aGlzLmdhbWVNYW5hZ2VyLmxldmVsID0gbGV2ZWw7XG5cblx0XHRjb25zdCBnYW1lT2JqZWN0cyA9IEpTT04ucGFyc2UobG9jYWxTdG9yYWdlLmdldEl0ZW0oJ2dhbWVPYmplY3RzJykpIGFzIElHYW1lT2JqZWN0U2VyaWFsaXplZFtdO1xuXHRcdGlmIChnYW1lT2JqZWN0cykgdGhpcy5sb2FkR2FtZU9iamVjdHMoZ2FtZU9iamVjdHMpO1xuXG5cdFx0Y29uc3QgcGxheWVyTmFtZSA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdwbGF5ZXJOYW1lJyk7XG5cdFx0aWYgKHBsYXllck5hbWUpIHRoaXMubG9hZFBsYXllck5hbWUocGxheWVyTmFtZSk7XG5cdH1cblxuXHRwdWJsaWMgbG9hZEdhbWVPYmplY3RzKGdhbWVPYmplY3RzOiBJR2FtZU9iamVjdFNlcmlhbGl6ZWRbXSkge1xuXHRcdGZvciAoY29uc3QgZ2FtZU9iamVjdCBvZiBnYW1lT2JqZWN0cykge1xuXHRcdFx0Y29uc3QgQ3RvciA9IEdhbWVPYmplY3QuZmFjdG9yeS5nZXQoZ2FtZU9iamVjdC50eXBlKTtcblx0XHRcdGlmICghQ3RvcikgdGhyb3cgbmV3IEVycm9yKGBDb3VsZCBub3QgZmluZCBhIGNvbnN0cnVjdG9yIGZvciAke2dhbWVPYmplY3QudHlwZSB8fCAndW5rbm93bid9LiBBYm9ydGluZy5gKTtcblx0XHRcdGNvbnN0IGluc3RhbmNlID0gbmV3IEN0b3IodGhpcy5nYW1lTWFuYWdlciwgZ2FtZU9iamVjdC5wb3NpdGlvbi54LCBnYW1lT2JqZWN0LnBvc2l0aW9uLnksIGdhbWVPYmplY3Qua2V5LCBnYW1lT2JqZWN0LmZyYW1lKS5mcm9tSlNPTihnYW1lT2JqZWN0KTtcblx0XHRcdGlmIChnYW1lT2JqZWN0LnR5cGUgPT09ICdQbGF5ZXInKSB0aGlzLmdhbWVNYW5hZ2VyLnBsYXllciA9IGluc3RhbmNlIGFzIFBsYXllcjtcblx0XHR9XG5cdH1cblxuXHRwdWJsaWMgbG9hZFBsYXllck5hbWUocGxheWVyTmFtZTogc3RyaW5nKSB7XG5cdFx0dGhpcy5nYW1lTWFuYWdlci5wbGF5ZXJOYW1lID0gcGxheWVyTmFtZTtcblx0fVxuXG59XG4iLCJpbXBvcnQgeyBGYWN0b3J5IH0gZnJvbSAnLi4vY29tbW9uL0ZhY3RvcnknO1xuaW1wb3J0IHsgR2FtZU9iamVjdCB9IGZyb20gJy4vR2FtZU9iamVjdCc7XG5cbmV4cG9ydCBjbGFzcyBHYW1lT2JqZWN0RmFjdG9yeSBleHRlbmRzIEZhY3Rvcnk8R2FtZU9iamVjdCwgdHlwZW9mIEdhbWVPYmplY3Q+eyB9XG4iLCJleHBvcnQgY2xhc3MgRmFjdG9yeTxWLCBDIGV4dGVuZHMgbmV3ICguLi5hcmdzOiBhbnlbXSkgPT4gVj4gZXh0ZW5kcyBNYXA8c3RyaW5nLCBDPiB7fVxuIiwiaW1wb3J0IHsgVElMRV9TSVpFIH0gZnJvbSAnLi4vLi4vLi4vdXRpbC9jb25zdGFudHMnO1xuaW1wb3J0IHsgR2FtZU1hbmFnZXIgfSBmcm9tICcuLi8uLi9tYW5hZ2Vycy9HYW1lTWFuYWdlcic7XG5pbXBvcnQgeyBSb3V0ZSB9IGZyb20gJy4uLy4uL21pc2MvUm91dGUnO1xuaW1wb3J0IHsgRGlyZWN0aW9uLCBFbmVteVN0YXRlLCBQbGF5ZXJTdGF0ZSB9IGZyb20gJy4uLy4uL21pc2MvdHlwZXMnO1xuaW1wb3J0IHsgU3BlZWNoQnViYmxlIH0gZnJvbSAnLi4vLi4vb2JqZWN0cy9TcGVlY2hCdWJibGUnO1xuaW1wb3J0IHsgQ2hhcmFjdGVyLCBJQ2hhcmFjdGVyU2VyaWFsaXplZCB9IGZyb20gJy4vQ2hhcmFjdGVyJztcbmltcG9ydCB7IFBsYXllciB9IGZyb20gJy4vUGxheWVyJztcblxuZXhwb3J0IGNsYXNzIEVuZW15IGV4dGVuZHMgQ2hhcmFjdGVyIHtcblx0cHVibGljIHJvdXRlID0gbmV3IFJvdXRlKCk7XG5cdHByb3RlY3RlZCByb3V0ZUF0ID0gMTtcblx0cHJvdGVjdGVkIHBvdiA9IDgwICogKE1hdGguUEkgLyAxODApO1xuXHRwcm90ZWN0ZWQgaXNUYXJnZXQgPSBmYWxzZTtcblx0cHJvdGVjdGVkIGJ1YmJsZSA9IHRoaXMuYWRkQ2hpbGQobmV3IFNwZWVjaEJ1YmJsZSh0aGlzLmdhbWVNYW5hZ2VyLCB0aGlzLndpZHRoIC8gMTAsIC0yNSkuaGlkZSgpKSBhcyBTcGVlY2hCdWJibGU7XG5cdHByaXZhdGUgcmV2ZXJzZSA9IGZhbHNlO1xuXHRwcml2YXRlIHBsYXllckxhc3RLbm93blBvc2l0aW9uOiBQaGFzZXIuUG9pbnQgPSBudWxsO1xuXHRwcml2YXRlIHBhdGhSb3V0ZTogUGhhc2VyLlBvaW50W10gPSBbXTtcblx0cHJpdmF0ZSB1cGRhdGVkUm91dGUgPSB0cnVlO1xuXHRwcml2YXRlIHRpbWVyOiBQaGFzZXIuVGltZXJFdmVudCA9IG51bGw7XG5cblx0cHVibGljIGNvbnN0cnVjdG9yKGdhbWVNYW5hZ2VyOiBHYW1lTWFuYWdlciwgeDogbnVtYmVyLCB5OiBudW1iZXIpIHtcblx0XHRzdXBlcihnYW1lTWFuYWdlciwgeCwgeSwgJ2VuZW15Jyk7XG5cdH1cblxuXHRwdWJsaWMgc2V0VGFyZ2V0KGlzVGFyZ2V0OiBib29sZWFuKSB7XG5cdFx0dGhpcy5pc1RhcmdldCA9IGlzVGFyZ2V0O1xuXHRcdHJldHVybiB0aGlzO1xuXHR9XG5cblx0cHVibGljIHVwZGF0ZSgpIHtcblx0XHRzdXBlci51cGRhdGUoKTtcblxuXHRcdC8vIElmIGl0J3MgZHlpbmcgb3IgZGVhZCwgZG8gbm90aGluZ1xuXHRcdGlmICh0aGlzLnN0YXRlID09PSBFbmVteVN0YXRlLmR5aW5nIHx8IHRoaXMuc3RhdGUgPT09IEVuZW15U3RhdGUuZGVhZCkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIElmIGl0J3Mgc3RpbGwgb24gcHVyc3VpdCwgY2FsbCBvbkRldGVjdGlvblxuXHRcdGlmICh0aGlzLnN0YXRlID09PSBFbmVteVN0YXRlLnB1cnN1aXQpIHtcblx0XHRcdHRoaXMub25EZXRlY3Rpb24odGhpcy5nYW1lTWFuYWdlci5wbGF5ZXIpO1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIElmIGl0IGRldGVjdGVkIHRoZSBwbGF5ZXIsIGJlZ2luIHB1cnN1aXRcblx0XHRpZiAodGhpcy5kZXRlY3RQbGF5ZXIoKSkge1xuXHRcdFx0dGhpcy5vbkJlZ2luRGV0ZWN0aW9uKHRoaXMuZ2FtZU1hbmFnZXIucGxheWVyKTtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBJZiBpdCdzIHNlYXJjaGluZywgbGV0IHRoZSBjb25jdXJyZW50IHN5c3RlbSBvcGVyYXRlXG5cdFx0aWYgKHRoaXMuc3RhdGUgPT09IEVuZW15U3RhdGUuc2VhcmNoaW5nKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0aWYgKHRoaXMuc3RhdGUgPT09IEVuZW15U3RhdGUuYmFja1RvUm91dGUgJiYgdGhpcy5wYXRoUm91dGUubGVuZ3RoKSB7XG5cdFx0XHRpZiAoIXRoaXMubW92ZVRvd2FyZHModGhpcy5wYXRoUm91dGVbMF0pKSB7XG5cdFx0XHRcdHRoaXMucGF0aFJvdXRlLnNoaWZ0KCk7XG5cdFx0XHRcdGlmICghdGhpcy5wYXRoUm91dGUubGVuZ3RoKSB0aGlzLnNldFN0YXRlKEVuZW15U3RhdGUub25Sb3V0ZSk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0aWYgKHRoaXMucm91dGUuc2l6ZSA+IDEpIHtcblx0XHRcdGlmICghdGhpcy5tb3ZlVG93YXJkcyh0aGlzLnJvdXRlLmdldCh0aGlzLnJvdXRlQXQpKSkge1xuXHRcdFx0XHRpZiAodGhpcy5yb3V0ZUF0ID09PSAodGhpcy5yZXZlcnNlID8gMCA6IHRoaXMucm91dGUuc2l6ZSAtIDEpKSB0aGlzLnJldmVyc2UgPSAhdGhpcy5yZXZlcnNlO1xuXHRcdFx0XHR0aGlzLnJvdXRlQXQgKz0gdGhpcy5yZXZlcnNlID8gLTEgOiAxO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdHRoaXMuc3RhbmQoKS5zZXRTdGF0ZShFbmVteVN0YXRlLnN0YW5kKTtcblx0fVxuXG5cdHB1YmxpYyBtb3ZlVG93YXJkcyhwb2ludDogUGhhc2VyLlBvaW50KSB7XG5cdFx0Y29uc3QgbmV4dERpcmVjdGlvbiA9IHRoaXMuZmluZE5leHREaXJlY3Rpb24ocG9pbnQueCwgcG9pbnQueSk7XG5cdFx0aWYgKG5leHREaXJlY3Rpb24gPT09IG51bGwpIHtcblx0XHRcdHRoaXMuc3RhbmQoKTtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHR0aGlzLnNldERpcmVjdGlvbihuZXh0RGlyZWN0aW9uKS53YWxrKCk7XG5cdFx0cmV0dXJuIHRydWU7XG5cdH1cblxuXHRwdWJsaWMgZmluZE5leHREaXJlY3Rpb24oeDogbnVtYmVyLCB5OiBudW1iZXIpIHtcblx0XHRpZiAodGhpcy5kaXJlY3Rpb24gPT09IERpcmVjdGlvbi51cCB8fCB0aGlzLmRpcmVjdGlvbiA9PT0gRGlyZWN0aW9uLmRvd24pIHtcblx0XHRcdGNvbnN0IHlOZXh0ID0gdGhpcy5maW5kTmV4dFlEaXJlY3Rpb24oeSk7XG5cdFx0XHRyZXR1cm4geU5leHQgPT09IG51bGwgPyB0aGlzLmZpbmROZXh0WERpcmVjdGlvbih4KSA6IHlOZXh0O1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRjb25zdCB4TmV4dCA9IHRoaXMuZmluZE5leHRYRGlyZWN0aW9uKHgpO1xuXHRcdFx0cmV0dXJuIHhOZXh0ID09PSBudWxsID8gdGhpcy5maW5kTmV4dFlEaXJlY3Rpb24oeSkgOiB4TmV4dDtcblx0XHR9XG5cdH1cblxuXHRwdWJsaWMgZmluZE5leHRYRGlyZWN0aW9uKHg6IG51bWJlcikge1xuXHRcdGlmICh0aGlzLmJvZHkucG9zaXRpb24ueCA9PT0geCkgcmV0dXJuIG51bGw7XG5cblx0XHRjb25zdCBkaWZmID0gdGhpcy5ib2R5LnBvc2l0aW9uLnggLSB4O1xuXHRcdGlmIChkaWZmIDwgLTIpIHJldHVybiBEaXJlY3Rpb24ucmlnaHQ7XG5cdFx0aWYgKGRpZmYgPiAyKSByZXR1cm4gRGlyZWN0aW9uLmxlZnQ7XG5cdFx0dGhpcy5zZXRQb3NpdGlvbih4LCB0aGlzLmJvZHkucG9zaXRpb24ueSk7XG5cdFx0cmV0dXJuIG51bGw7XG5cdH1cblxuXHRwdWJsaWMgZmluZE5leHRZRGlyZWN0aW9uKHk6IG51bWJlcikge1xuXHRcdGlmICh0aGlzLmJvZHkucG9zaXRpb24ueSA9PT0geSkgcmV0dXJuIG51bGw7XG5cblx0XHRjb25zdCBkaWZmID0gdGhpcy5ib2R5LnBvc2l0aW9uLnkgLSB5O1xuXHRcdGlmIChkaWZmIDwgLTIpIHJldHVybiBEaXJlY3Rpb24uZG93bjtcblx0XHRpZiAoZGlmZiA+IDIpIHJldHVybiBEaXJlY3Rpb24udXA7XG5cdFx0dGhpcy5zZXRQb3NpdGlvbih0aGlzLmJvZHkucG9zaXRpb24ueCwgeSk7XG5cdFx0cmV0dXJuIG51bGw7XG5cdH1cblxuXHRwdWJsaWMgc2V0UG92KHBvdjogbnVtYmVyKSB7XG5cdFx0dGhpcy5wb3YgPSBwb3Y7XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH1cblxuXHRwdWJsaWMgZnJvbUpTT04oZGF0YTogSUVuZW15U2VyaWFsaXplZCkge1xuXHRcdHN1cGVyLmZyb21KU09OKGRhdGEpO1xuXHRcdHRoaXMuaXNUYXJnZXQgPSBkYXRhLmlzVGFyZ2V0O1xuXHRcdHRoaXMucG92ID0gZGF0YS5wb3Y7XG5cdFx0dGhpcy5yb3V0ZS5zZXQoZGF0YS5yb3V0ZS5tYXAoKHBvaW50KSA9PiBuZXcgUGhhc2VyLlBvaW50KHBvaW50WzBdLCBwb2ludFsxXSkpKTtcblx0XHRyZXR1cm4gdGhpcztcblx0fVxuXG5cdHB1YmxpYyB0b0pTT04oKTogSUVuZW15U2VyaWFsaXplZCB7XG5cdFx0cmV0dXJuIHtcblx0XHRcdC4uLnN1cGVyLnRvSlNPTigpLFxuXHRcdFx0aXNUYXJnZXQ6IHRoaXMuaXNUYXJnZXQsXG5cdFx0XHRwb3Y6IHRoaXMucG92LFxuXHRcdFx0cm91dGU6IHRoaXMucm91dGUudG9KU09OKCksXG5cdFx0XHR0eXBlOiAnRW5lbXknXG5cdFx0fTtcblx0fVxuXG5cdHByaXZhdGUgZGV0ZWN0UGxheWVyKCkge1xuXHRcdC8vIElmIHRoZSBlbmVteSBkb2Vzbid0IHNlZSB0aGUgcGxheWVyLCByZXR1cm4gZmFsc2Vcblx0XHRpZiAoIXRoaXMuc2Vlc1BsYXllcigpKSByZXR1cm4gZmFsc2U7XG5cdFx0Y29uc3QgeyBwbGF5ZXIgfSA9IHRoaXMuZ2FtZU1hbmFnZXI7XG5cblx0XHQvLyBEcmF3IGEgbGluZSBiZXR3ZWVuIHRoZSBlbmVteSBhbmQgdGhlIHBsYXllclxuXHRcdGNvbnN0IGxpbmUgPSBuZXcgUGhhc2VyLkxpbmUoXG5cdFx0XHR0aGlzLmJvZHkucG9zaXRpb24ueCArIHRoaXMuYm9keS5oYWxmV2lkdGgsXG5cdFx0XHR0aGlzLmJvZHkucG9zaXRpb24ueSArIHRoaXMuYm9keS5oYWxmSGVpZ2h0LFxuXHRcdFx0cGxheWVyLmJvZHkucG9zaXRpb24ueCArIHBsYXllci5ib2R5LmhhbGZXaWR0aCxcblx0XHRcdHBsYXllci5ib2R5LnBvc2l0aW9uLnkgKyBwbGF5ZXIuYm9keS5oYWxmSGVpZ2h0KTtcblx0XHRjb25zdCB0aWxlcyA9IHRoaXMuZ2FtZU1hbmFnZXIuc3RhdGUub2JzdGFjbGVMYXllci5nZXRSYXlDYXN0VGlsZXMobGluZSwgNCwgdHJ1ZSwgZmFsc2UpXG5cdFx0XHQuZmlsdGVyKCh0aWxlKSA9PiB0aWxlLmluZGV4ICE9PSAtMSk7XG5cblx0XHQvLyBJZiB0aGVyZSBpcyBhIHRpbGUgb3IgbW9yZSBiZXR3ZWVuIHRoZSBlbmVteSBhbmQgdGhlIHBsYXllcixcblx0XHQvLyBpdCB3b24ndCBcInNlZVwiIHRoZSBwbGF5ZXIgdW5sZXNzIGl0J3MgcnVubmluZ1xuXHRcdGlmICh0aWxlcy5sZW5ndGggJiYgcGxheWVyLnN0YXRlICE9PSBQbGF5ZXJTdGF0ZS5ydW4pIHJldHVybiBmYWxzZTtcblxuXHRcdC8vIENhbGwgb25EZXRlY3Rpb25cblx0XHR0aGlzLm9uQmVnaW5EZXRlY3Rpb24ocGxheWVyKTtcblxuXHRcdHJldHVybiB0cnVlO1xuXHR9XG5cblx0cHJpdmF0ZSBvbkJlZ2luRGV0ZWN0aW9uKHBsYXllcjogUGxheWVyKSB7XG5cdFx0dGhpcy5wYXRoUm91dGUubGVuZ3RoID0gMDtcblx0XHR0aGlzLnNldFN0YXRlKEVuZW15U3RhdGUucHVyc3VpdCk7XG5cdFx0dGhpcy5wcmVwYXJlUGF0aFJvdXRlKHBsYXllci5ib2R5LnBvc2l0aW9uKTtcblx0XHR0aGlzLnBsYXllckxhc3RLbm93blBvc2l0aW9uID0gcGxheWVyLnBvc2l0aW9uLmNsb25lKCk7XG5cdFx0dGhpcy5idWJibGUuc2hvdygpLmRpc3BsYXkoJyEnKS5mYWRlSW4oMTAwMCk7XG5cdFx0aWYgKHRoaXMudGltZXIpIHtcblx0XHRcdHRoaXMuZ2FtZS50aW1lLmV2ZW50cy5yZW1vdmUodGhpcy50aW1lcik7XG5cdFx0XHR0aGlzLnRpbWVyID0gbnVsbDtcblx0XHR9XG5cdH1cblxuXHRwcml2YXRlIG9uRGV0ZWN0aW9uKHBsYXllcjogUGxheWVyKSB7XG5cdFx0Ly8gSWYgdGhlIHBsYXllciBpcyBhbHJlYWR5IGluIHRoZSBjdXJyZW50IHBhdGgsXG5cdFx0aWYgKHRoaXMucGF0aFJvdXRlLmxlbmd0aCAmJiAhdGhpcy5tb3ZlVG93YXJkcyh0aGlzLnBhdGhSb3V0ZVswXSkpIHtcblx0XHRcdC8vIElmIHRoZSBlbmVteSBzZWVzIHRoZSBwbGF5ZXIsIHByZXBhcmUgdGhlIG5ldyByb3V0ZVxuXHRcdFx0aWYgKHRoaXMuc2Vlc1BsYXllcigpKSB7XG5cdFx0XHRcdHBsYXllci5ib2R5LnBvc2l0aW9uLmNsb25lKHRoaXMucGxheWVyTGFzdEtub3duUG9zaXRpb24pO1xuXHRcdFx0XHR0aGlzLnByZXBhcmVQYXRoUm91dGUodGhpcy5wbGF5ZXJMYXN0S25vd25Qb3NpdGlvbik7XG5cdFx0XHR9XG5cdFx0XHQvLyBJZiB0aGUgcm91dGUgaGFzIG1vcmUgdGhhbiBvbmUgdGlsZSwgc2hpZnQgdW50aWwgdGhlcmUncyBvbmx5IG9uZSBlbGVtZW50XG5cdFx0XHRpZiAodGhpcy5wYXRoUm91dGUubGVuZ3RoID4gMSkgdGhpcy5wYXRoUm91dGUuc2hpZnQoKTtcblx0XHRcdC8vIElmIHRoZSBlbmVteSByZWFjaGVkIExLUCwgY2FsbCBlbmQgZGV0ZWN0aW9uXG5cdFx0XHRlbHNlIHRoaXMub25FbmREZXRlY3Rpb24oKTtcblx0XHR9XG5cdFx0Ly8gMy4gQ2FsY3VsYXRlIHRoZSBzaG9ydGVzdCBwYXRoIHRvIHRoZSBwbGF5ZXJcblx0XHQvLyA0LiBXYWxrIG9uZSB0aWxlXG5cdFx0Ly8gNS4gUmVwZWF0IGZyb20gdGhlIHN0ZXAgMyB1bnRpbCB0aGUgZW5lbXkgZG9lcyBub3QgZmluZFxuXHRcdC8vICAgIHRoZSBwbGF5ZXIgYW55bW9yZVxuXHR9XG5cblx0cHJpdmF0ZSBvbkVuZERldGVjdGlvbigpIHtcblx0XHRpZiAodGhpcy50aW1lcikgcmV0dXJuO1xuXG5cdFx0Ly8gQ2xlYW5zIHVwIHRoZSBMS1AgYW5kIHBhdGggcm91dGVcblx0XHR0aGlzLnBsYXllckxhc3RLbm93blBvc2l0aW9uID0gbnVsbDtcblx0XHR0aGlzLnBhdGhSb3V0ZS5sZW5ndGggPSAwO1xuXHRcdC8vIFNldCBzdGF0ZSB0byBzZWFyY2hpbmcsIGFuZCBob2xkcyBvbiBmb3IgYSBzZWNvbmRcblx0XHR0aGlzLnNldFN0YXRlKEVuZW15U3RhdGUuc2VhcmNoaW5nKTtcblx0XHRsZXQgcmVwZWF0ID0gMDtcblx0XHR0aGlzLmJ1YmJsZS5zaG93KCkuZGlzcGxheSgnPycpO1xuXHRcdHRoaXMudGltZXIgPSB0aGlzLmdhbWUudGltZS5ldmVudHMucmVwZWF0KFBoYXNlci5UaW1lci5TRUNPTkQsIDQsICgpID0+IHtcblx0XHRcdC8vIEluIHRoZSBsYXN0IGl0ZXJhdGlvblxuXHRcdFx0aWYgKCsrcmVwZWF0ID09PSA0KSB7XG5cdFx0XHRcdHRoaXMudGltZXIgPSBudWxsO1xuXHRcdFx0XHR0aGlzLmJ1YmJsZS5oaWRlKCk7XG5cdFx0XHRcdC8vIEFmdGVyIGEgc2Vjb25kIGhhcyBlbGFwc2VkLCBjaGFuZ2Ugc3RhdGUgdG8gYmFja1RvUm91dGUgYW5kXG5cdFx0XHRcdC8vIGNhbGN1bGF0ZSB0aGUgcGF0aCByb3V0ZSB0byB0aGUgbGFzdCBwb2ludCBmcm9tIHRoZSByb3V0ZVxuXHRcdFx0XHR0aGlzLnNldFN0YXRlKEVuZW15U3RhdGUuYmFja1RvUm91dGUpO1xuXHRcdFx0XHR0aGlzLnByZXBhcmVQYXRoUm91dGUodGhpcy5yb3V0ZS5nZXQodGhpcy5yb3V0ZUF0KSk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHQvLyBSb3RhdGUgdGhlIGNoYXJhY3RlciBpbiB0aHJlZSBkaXJlY3Rpb25zXG5cdFx0XHRcdGxldCBuZXh0OiBEaXJlY3Rpb247XG5cdFx0XHRcdHN3aXRjaCAodGhpcy5kaXJlY3Rpb24pIHtcblx0XHRcdFx0XHRjYXNlIERpcmVjdGlvbi5kb3duOiBuZXh0ID0gRGlyZWN0aW9uLnVwOyBicmVhaztcblx0XHRcdFx0XHRjYXNlIERpcmVjdGlvbi5sZWZ0OiBuZXh0ID0gRGlyZWN0aW9uLnJpZ2h0OyBicmVhaztcblx0XHRcdFx0XHRjYXNlIERpcmVjdGlvbi51cDogbmV4dCA9IERpcmVjdGlvbi5sZWZ0OyBicmVhaztcblx0XHRcdFx0XHRkZWZhdWx0OiBuZXh0ID0gRGlyZWN0aW9uLmRvd247XG5cdFx0XHRcdH1cblx0XHRcdFx0dGhpcy5zZXREaXJlY3Rpb24obmV4dCk7XG5cdFx0XHRcdHRoaXMuYW5pbWF0aW9ucy5wbGF5KGBzdGFuZC4ke0RpcmVjdGlvblt0aGlzLmRpcmVjdGlvbl19YCwgMCk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdH1cblxuXHRwcml2YXRlIHByZXBhcmVQYXRoUm91dGUocG9pbnQ6IFBoYXNlci5Qb2ludCkge1xuXHRcdC8vIElmIHRoZSByb3V0ZSBoYXMgbm90IGJlZW4gdXBkYXRlZCB5ZXQsIGNhbmNlbCB0aGUgcHJlcGFyYXRpb25cblx0XHRpZiAoIXRoaXMudXBkYXRlZFJvdXRlKSByZXR1cm47XG5cblx0XHR0aGlzLnVwZGF0ZWRSb3V0ZSA9IGZhbHNlO1xuXHRcdHRoaXMuZ2FtZS5wYXRoRmluZGVyLnNldENhbGxiYWNrRnVuY3Rpb24oKHJvdXRlKSA9PiB7XG5cdFx0XHR0aGlzLnVwZGF0ZWRSb3V0ZSA9IHRydWU7XG5cdFx0XHQvLyBJZiBudWxsLCBlbmQgdGhlIGRldGVjdGlvblxuXHRcdFx0aWYgKHJvdXRlKSB7XG5cdFx0XHRcdHRoaXMucGF0aFJvdXRlID0gcm91dGUubWFwKCh2YWx1ZSkgPT4gbmV3IFBoYXNlci5Qb2ludCh2YWx1ZS54ICogVElMRV9TSVpFLCB2YWx1ZS55ICogVElMRV9TSVpFKSk7XG5cdFx0XHRcdHRoaXMucGF0aFJvdXRlLnNoaWZ0KCk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR0aGlzLm9uRW5kRGV0ZWN0aW9uKCk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0Y29uc3QgZVRpbGVzID0gdGhpcy5wb3NpdGlvbkluVGlsZXMoKTtcblx0XHR0aGlzLmdhbWUucGF0aEZpbmRlci5wcmVwYXJlUGF0aENhbGN1bGF0aW9uKFxuXHRcdFx0W01hdGguZmxvb3IoZVRpbGVzLngpLCBNYXRoLmZsb29yKGVUaWxlcy55KV0sXG5cdFx0XHRbTWF0aC5mbG9vcihwb2ludC54IC8gVElMRV9TSVpFKSwgTWF0aC5mbG9vcihwb2ludC55IC8gVElMRV9TSVpFKV1cblx0XHQpO1xuXHRcdHRoaXMuZ2FtZS5wYXRoRmluZGVyLmNhbGN1bGF0ZVBhdGgoKTtcblx0fVxuXG5cdHByaXZhdGUgc2Vlc1BsYXllcigpIHtcblx0XHRjb25zdCB7IHBsYXllciB9ID0gdGhpcy5nYW1lTWFuYWdlcjtcblxuXHRcdC8vIElmIHRoZXJlIGlzIG5vIHBsYXllciBvciBpdCBpcyBoaWRkZW4sIHJldHVybiBmYWxzZVxuXHRcdGlmICghcGxheWVyIHx8IHBsYXllci5oaWRpbmdTcG90KSByZXR1cm4gZmFsc2U7XG5cblx0XHQvLyBJZiB0aGUgcGxheWVyIGlzIG91dCBvZiB0aGUgNS10aWxlIHJhbmdlLCByZXR1cm4gZmFsc2Vcblx0XHRpZiAodGhpcy5kaXN0YW5jZUluVGlsZXNUbyhwbGF5ZXIpID4gNSkgcmV0dXJuIGZhbHNlO1xuXG5cdFx0Ly8gR2V0IHRoZSByZWxhdGl2ZSBhbmdsZSBmcm9tIHRoaXMgZW5lbXkgdG8gdGhlIHBsYXllclxuXHRcdC8vIElmIHRoZSBwbGF5ZXIgaXMgbm90IGluc2lkZSB0aGUgUE9WIHJhZGl1cywgcmV0dXJuIGZhbHNlXG5cdFx0Y29uc3QgZGlyZWN0aW9uID0gdGhpcy5yZWxhdGl2ZUFuZ2xlVG8ocGxheWVyKTtcblx0XHRjb25zdCBpblBPViA9IE1hdGguYWJzKGRpcmVjdGlvbikgPCB0aGlzLnBvdiAvIDI7XG5cdFx0cmV0dXJuIGluUE9WO1xuXHR9XG5cbn1cblxuLyoqXG4gKiBUaGUgc2VyaWFsaXplZCBlbmVteSBkYXRhXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgSUVuZW15U2VyaWFsaXplZCBleHRlbmRzIElDaGFyYWN0ZXJTZXJpYWxpemVkIHtcblx0aXNUYXJnZXQ6IGJvb2xlYW47XG5cdHBvdjogbnVtYmVyO1xuXHRyb3V0ZTogW251bWJlciwgbnVtYmVyXVtdO1xufVxuIiwiLyoqXG4gKiBUaGUgYXJyYXkgcm91dGUgZGF0YVxuICovXG5leHBvcnQgaW50ZXJmYWNlIEFycmF5Um91dGUgZXh0ZW5kcyBBcnJheTxQaGFzZXIuUG9pbnQ+IHsgfVxuXG5leHBvcnQgY2xhc3MgUm91dGUge1xuXHRwcml2YXRlIHJvdXRlOiBBcnJheVJvdXRlID0gW107XG5cblx0cHVibGljIGdldCBzaXplKCkge1xuXHRcdHJldHVybiB0aGlzLnJvdXRlLmxlbmd0aDtcblx0fVxuXG5cdHB1YmxpYyBnZXQocG9zaXRpb246IG51bWJlcikge1xuXHRcdHJldHVybiBwb3NpdGlvbiA8IHRoaXMucm91dGUubGVuZ3RoID8gdGhpcy5yb3V0ZVtwb3NpdGlvbl0gOiBudWxsO1xuXHR9XG5cblx0LyoqXG5cdCAqIFNldCBhIG5ldyByb3V0ZSBmb3IgdGhpcyBpbnN0YW5jZVxuXHQgKiBAcGFyYW0gcm91dGUgVGhlIG5ldyByb3V0ZVxuXHQgKi9cblx0cHVibGljIHNldChyb3V0ZTogQXJyYXlSb3V0ZSkge1xuXHRcdHRoaXMucm91dGUgPSByb3V0ZTtcblx0XHRyZXR1cm4gdGhpcztcblx0fVxuXG5cdC8qKlxuXHQgKiBBZGQgYSBuZXcgcm91dGUgcG9zaXRpb25cblx0ICogQHBhcmFtIHggVGhlIG5ldyB4IHBvc2l0aW9uXG5cdCAqIEBwYXJhbSB5IFRoZSBuZXcgeSBwb3NpdGlvblxuXHQgKi9cblx0cHVibGljIGFkZCh4OiBudW1iZXIsIHk6IG51bWJlcik6IHRoaXM7XG5cdHB1YmxpYyBhZGQocG9pbnQ6IFBoYXNlci5Qb2ludCk6IHRoaXM7XG5cdHB1YmxpYyBhZGQoeDogbnVtYmVyIHwgUGhhc2VyLlBvaW50LCB5PzogbnVtYmVyKSB7XG5cdFx0dGhpcy5yb3V0ZS5wdXNoKHR5cGVvZiB4ID09PSAnbnVtYmVyJyA/IG5ldyBQaGFzZXIuUG9pbnQoeCwgeSkgOiB4KTtcblx0XHRyZXR1cm4gdGhpcztcblx0fVxuXG5cdC8qKlxuXHQgKiBSZW1vdmUgYSByb3V0ZSBwb3NpdGlvblxuXHQgKiBAcGFyYW0geCBUaGUgeCBwb3NpdGlvblxuXHQgKiBAcGFyYW0geSBUaGUgeSBwb3NpdGlvblxuXHQgKi9cblx0cHVibGljIHJlbW92ZSh4OiBudW1iZXIsIHk6IG51bWJlcik6IHRoaXM7XG5cdHB1YmxpYyByZW1vdmUocG9zaXRpb246IFtudW1iZXIsIG51bWJlcl0pOiB0aGlzO1xuXHRwdWJsaWMgcmVtb3ZlKHg6IG51bWJlciB8IFtudW1iZXIsIG51bWJlcl0sIHk/OiBudW1iZXIpIHtcblx0XHRjb25zdCBwb3NpdGlvbiA9IHR5cGVvZiB4ID09PSAnbnVtYmVyJyA/IFt4LCB5XSBhcyBbbnVtYmVyLCBudW1iZXJdIDogeDtcblx0XHRjb25zdCBpbmRleCA9IHRoaXMucm91dGUuZmluZEluZGV4KChyb3V0ZSkgPT4gcm91dGVbMF0gPT09IHBvc2l0aW9uWzBdICYmIHJvdXRlWzBdID09PSBwb3NpdGlvblsxXSk7XG5cdFx0aWYgKGluZGV4ICE9PSAtMSkgdGhpcy5yb3V0ZS5zcGxpY2UoaW5kZXgsIDEpO1xuXHRcdHJldHVybiB0aGlzO1xuXHR9XG5cblx0LyoqXG5cdCAqIFJlc2V0IHRoaXMgcm91dGVcblx0ICovXG5cdHB1YmxpYyByZXNldCgpIHtcblx0XHR0aGlzLnJvdXRlLmxlbmd0aCA9IDA7XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH1cblxuXHRwdWJsaWMgdG9KU09OKCkge1xuXHRcdHJldHVybiB0aGlzLnJvdXRlLm1hcCgocG9pbnQpID0+IFtwb2ludC54LCBwb2ludC55XSkgYXMgW251bWJlciwgbnVtYmVyXVtdO1xuXHR9XG5cbn1cbiIsImltcG9ydCB7IEdhbWVNYW5hZ2VyIH0gZnJvbSAnLi4vLi4vbWFuYWdlcnMvR2FtZU1hbmFnZXInO1xuXG5leHBvcnQgY2xhc3MgU3BlZWNoQnViYmxlIGV4dGVuZHMgUGhhc2VyLlNwcml0ZSB7XG5cblx0cHJpdmF0ZSB0aW1lcjogUGhhc2VyLlRpbWVyRXZlbnQgPSBudWxsO1xuXG5cdHB1YmxpYyBjb25zdHJ1Y3RvcihwdWJsaWMgZ2FtZU1hbmFnZXI6IEdhbWVNYW5hZ2VyLCB4OiBudW1iZXIsIHk6IG51bWJlcikge1xuXHRcdHN1cGVyKGdhbWVNYW5hZ2VyLmdhbWUsIHgsIHksICdvYmplY3RzJywgMTEpO1xuXHRcdC8vIEFkZCB0aGUgZ2FtZW9iamVjdCBpdHNlbGYgdG8gdGhlIGdhbWVcblx0XHR0aGlzLmdhbWUuYWRkLmV4aXN0aW5nKHRoaXMpO1xuXHRcdHRoaXMuc21vb3RoZWQgPSBmYWxzZTtcblxuXHRcdHRoaXMuYW5pbWF0aW9ucy5hZGQoJy4uLicsIFsxMSwgMjksIDMwLCAxMl0sIDIpO1xuXHRcdHRoaXMuYW5pbWF0aW9ucy5hZGQoJyEnLCBbNDddLCAwKTtcblx0XHR0aGlzLmFuaW1hdGlvbnMuYWRkKCc/JywgWzQ4XSwgMCk7XG5cdH1cblxuXHRwdWJsaWMgaGlkZSgpIHtcblx0XHR0aGlzLnJlbmRlcmFibGUgPSBmYWxzZTtcblx0XHRyZXR1cm4gdGhpcztcblx0fVxuXG5cdHB1YmxpYyBzaG93KCkge1xuXHRcdHRoaXMucmVuZGVyYWJsZSA9IHRydWU7XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH1cblxuXHRwdWJsaWMgZGlzcGxheShhbmltYXRpb246ICcuLi4nIHwgJyEnIHwgJz8nKSB7XG5cdFx0dGhpcy5hbmltYXRpb25zLnBsYXkoYW5pbWF0aW9uLCBhbmltYXRpb24gPT09ICcuLi4nID8gMiA6IDAsIHRydWUpO1xuXHRcdHJldHVybiB0aGlzO1xuXHR9XG5cblx0cHVibGljIGZhZGVJbihkZWxheTogbnVtYmVyKSB7XG5cdFx0aWYgKGRlbGF5IDw9IDApIHJldHVybiB0aGlzLmhpZGUoKTtcblx0XHRpZiAodGhpcy50aW1lcikgdGhpcy5nYW1lLnRpbWUuZXZlbnRzLnJlbW92ZSh0aGlzLnRpbWVyKTtcblx0XHR0aGlzLnRpbWVyID0gdGhpcy5nYW1lLnRpbWUuZXZlbnRzLmFkZChkZWxheSwgKCkgPT4ge1xuXHRcdFx0dGhpcy50aW1lciA9IG51bGw7XG5cdFx0XHR0aGlzLmhpZGUoKTtcblx0XHR9KTtcblx0XHRyZXR1cm4gdGhpcztcblx0fVxuXG59XG4iLCJpbXBvcnQgeyBHYW1lTWFuYWdlciB9IGZyb20gJy4uLy4uL21hbmFnZXJzL0dhbWVNYW5hZ2VyJztcbmltcG9ydCB7IERpcmVjdGlvbiwgSGlkaW5nVHlwZSwgUGxheWVyU3RhdGUgfSBmcm9tICcuLi8uLi9taXNjL3R5cGVzJztcbmltcG9ydCB7IEhpZGluZ1Nwb3QsIElIaWRpbmdTcG90U2VyaWFsaXplZCB9IGZyb20gJy4uL2hpZGluZ1Nwb3RzL0hpZGluZ1Nwb3QnO1xuaW1wb3J0IHsgQ2hhcmFjdGVyLCBJQ2hhcmFjdGVyU2VyaWFsaXplZCB9IGZyb20gJy4vQ2hhcmFjdGVyJztcblxuZXhwb3J0IGNsYXNzIFBsYXllciBleHRlbmRzIENoYXJhY3RlciB7XG5cblx0cHVibGljIGhpZGluZ1Nwb3Q6IEhpZGluZ1Nwb3QgPSBudWxsO1xuXHRwcml2YXRlIHJlYWRvbmx5IGRpcmVjdGlvbnMgPSB7XG5cdFx0ZG93bjogZmFsc2UsXG5cdFx0bGVmdDogZmFsc2UsXG5cdFx0cmlnaHQ6IGZhbHNlLFxuXHRcdHVwOiBmYWxzZVxuXHR9O1xuXHRwcml2YXRlIHJlYWRvbmx5IGN1cnNvcktleXM6IFBoYXNlci5DdXJzb3JLZXlzID0gdGhpcy5nYW1lLmlucHV0LmtleWJvYXJkLmNyZWF0ZUN1cnNvcktleXMoKTtcblx0cHJpdmF0ZSByZWFkb25seSBhY3Rpb25zID0ge1xuXHRcdGludGVyYWN0OiBmYWxzZSxcblx0XHRraWxsOiBmYWxzZVxuXHR9O1xuXHRwcml2YXRlIG1vdmVtZW50UmVmcmVzaCA9IDA7XG5cblx0cHVibGljIGNvbnN0cnVjdG9yKGdhbWVNYW5hZ2VyOiBHYW1lTWFuYWdlciwgeDogbnVtYmVyLCB5OiBudW1iZXIpIHtcblx0XHRzdXBlcihnYW1lTWFuYWdlciwgeCwgeSwgJ3BsYXllcicpO1xuXHRcdHRoaXMuZ2FtZS5jYW1lcmEuZm9sbG93KHRoaXMsIFBoYXNlci5DYW1lcmEuRk9MTE9XX0xPQ0tPTiwgMC4xLCAwLjEpO1xuXHRcdHRoaXMuYm9keS5pbW1vdmFibGUgPSBmYWxzZTtcblx0fVxuXG5cdHB1YmxpYyB1cGRhdGUoKSB7XG5cdFx0c3VwZXIudXBkYXRlKCk7XG5cdFx0aWYgKERhdGUubm93KCkgPCB0aGlzLm1vdmVtZW50UmVmcmVzaCkgcmV0dXJuO1xuXG5cdFx0dGhpcy5kaXJlY3Rpb25zLmRvd24gPSB0aGlzLmN1cnNvcktleXMuZG93bi5pc0Rvd247XG5cdFx0dGhpcy5kaXJlY3Rpb25zLmxlZnQgPSB0aGlzLmN1cnNvcktleXMubGVmdC5pc0Rvd247XG5cdFx0dGhpcy5kaXJlY3Rpb25zLnJpZ2h0ID0gdGhpcy5jdXJzb3JLZXlzLnJpZ2h0LmlzRG93bjtcblx0XHR0aGlzLmRpcmVjdGlvbnMudXAgPSB0aGlzLmN1cnNvcktleXMudXAuaXNEb3duO1xuXG5cdFx0Y29uc3Qga2V5Ym9hcmQgPSB0aGlzLmdhbWVNYW5hZ2VyLmdhbWUuaW5wdXQua2V5Ym9hcmQ7XG5cdFx0Y29uc3QgcnVubmluZyA9IGtleWJvYXJkLmlzRG93bihQaGFzZXIuS2V5Ym9hcmQuU0hJRlQpO1xuXG5cdFx0aWYgKHRoaXMuZGlyZWN0aW9ucy5kb3duICE9PSB0aGlzLmRpcmVjdGlvbnMudXApIHtcblx0XHRcdHRoaXMuc2V0RGlyZWN0aW9uKHRoaXMuZGlyZWN0aW9ucy5kb3duID8gRGlyZWN0aW9uLmRvd24gOiBEaXJlY3Rpb24udXApO1xuXHRcdFx0aWYgKHJ1bm5pbmcpIHRoaXMuc2V0U3RhdGUoUGxheWVyU3RhdGUucnVuKS5ydW4oKTtcblx0XHRcdGVsc2UgdGhpcy5zZXRTdGF0ZShQbGF5ZXJTdGF0ZS53YWxrKS53YWxrKCk7XG5cdFx0fSBlbHNlIGlmICh0aGlzLmRpcmVjdGlvbnMubGVmdCAhPT0gdGhpcy5kaXJlY3Rpb25zLnJpZ2h0KSB7XG5cdFx0XHR0aGlzLnNldERpcmVjdGlvbih0aGlzLmRpcmVjdGlvbnMubGVmdCA/IERpcmVjdGlvbi5sZWZ0IDogRGlyZWN0aW9uLnJpZ2h0KTtcblx0XHRcdGlmIChydW5uaW5nKSB0aGlzLnNldFN0YXRlKFBsYXllclN0YXRlLnJ1bikucnVuKCk7XG5cdFx0XHRlbHNlIHRoaXMuc2V0U3RhdGUoUGxheWVyU3RhdGUud2Fsaykud2FsaygpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR0aGlzLnN0YW5kKCkuc2V0U3RhdGUoUGxheWVyU3RhdGUuc3RhbmQpO1xuXHRcdH1cblxuXHRcdGlmIChrZXlib2FyZC5pc0Rvd24oUGhhc2VyLktleWJvYXJkLlgpKSB7XG5cdFx0XHR0aGlzLmFjdGlvbnMuaW50ZXJhY3QgPSBmYWxzZTtcblx0XHRcdHRoaXMuYWN0aW9ucy5raWxsID0gdHJ1ZTtcblx0XHRcdHRoaXMudHJpZ2dlcldhbGsoKTtcblx0XHR9IGVsc2UgaWYgKGtleWJvYXJkLmlzRG93bihQaGFzZXIuS2V5Ym9hcmQuWikpIHtcblx0XHRcdHRoaXMuYWN0aW9ucy5pbnRlcmFjdCA9IHRydWU7XG5cdFx0XHR0aGlzLmFjdGlvbnMua2lsbCA9IGZhbHNlO1xuXHRcdFx0dGhpcy50cmlnZ2VyV2FsaygpO1xuXHRcdH0gZWxzZSBpZiAoa2V5Ym9hcmQuaXNEb3duKFBoYXNlci5LZXlib2FyZC5TKSkge1xuXHRcdFx0dGhpcy5nYW1lTWFuYWdlci5zdG9yYWdlLnNhdmUoKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dGhpcy5hY3Rpb25zLmludGVyYWN0ID0gZmFsc2U7XG5cdFx0XHR0aGlzLmFjdGlvbnMua2lsbCA9IGZhbHNlO1xuXHRcdH1cblx0fVxuXG5cdHB1YmxpYyBhdHRhY2soY2hhcmFjdGVyOiBDaGFyYWN0ZXIpIHtcblx0XHRzdXBlci5hdHRhY2soY2hhcmFjdGVyKTtcblx0XHRjaGFyYWN0ZXIua2lsbCgpO1xuXHRcdHRoaXMubW92ZW1lbnRSZWZyZXNoID0gdGhpcy5hdHRhY2tSZWZyZXNoO1xuXHRcdHJldHVybiB0aGlzO1xuXHR9XG5cblx0cHVibGljIGNvbGxpZGVzKGdhbWVPYmplY3Q6IENoYXJhY3Rlcikge1xuXHRcdGlmICghKGdhbWVPYmplY3QgaW5zdGFuY2VvZiBDaGFyYWN0ZXIpKSByZXR1cm47XG5cdFx0aWYgKHRoaXMuYWN0aW9ucy5raWxsKSB0aGlzLmF0dGFjayhnYW1lT2JqZWN0KTtcblx0XHRlbHNlIGlmICh0aGlzLmFjdGlvbnMuaW50ZXJhY3QpIGdhbWVPYmplY3QuaW50ZXJhY3QodGhpcyk7XG5cdFx0cmV0dXJuIHRydWU7XG5cdH1cblxuXHQvKipcblx0ICogSGlkZXMgdGhlIHBsYXllciwgY2hhbmdpbmcgdGhlIHN0YXRlIGFuZCBzZXR0aW5nIHRoZSBoaWRpbmcgc3BvdFxuXHQgKiBAcGFyYW0gaGlkaW5nU3BvdCBUaGUgaGlkaW5nIHNwb3Rcblx0ICovXG5cdHB1YmxpYyBoaWRlKGhpZGluZ1Nwb3Q6IEhpZGluZ1Nwb3QpIHtcblx0XHRpZiAoaGlkaW5nU3BvdC5oaWRpbmdUeXBlICE9PSBIaWRpbmdUeXBlLm5vbmUpIHtcblx0XHRcdHRoaXMuc2V0U3RhdGUoUGxheWVyU3RhdGUuaGlkZGVuKTtcblx0XHRcdHRoaXMuaGlkaW5nU3BvdCA9IGhpZGluZ1Nwb3Q7XG5cdFx0fVxuXHRcdHJldHVybiB0aGlzO1xuXHR9XG5cblx0LyoqXG5cdCAqIFJldmVhbHMgdGhlIHBsYXllciwgbGVhdmluZyB0aGUgaGlkaW5nIHBsYWNlIGlmIHRoZXJlIHdhcyBhbnlcblx0ICovXG5cdHB1YmxpYyByZXZlYWwoKSB7XG5cdFx0aWYgKHRoaXMuaGlkaW5nU3BvdCkge1xuXHRcdFx0dGhpcy5zZXRTdGF0ZSh0aGlzLmhlYWx0aCA/IFBsYXllclN0YXRlLnN0YW5kIDogUGxheWVyU3RhdGUuZGVhZCk7XG5cdFx0XHR0aGlzLmhpZGluZ1Nwb3QgPSBudWxsO1xuXHRcdH1cblx0XHRyZXR1cm4gdGhpcztcblx0fVxuXG5cdHB1YmxpYyBmcm9tSlNPTihkYXRhOiBJUGxheWVyU2VyaWFsaXplZCkge1xuXHRcdHN1cGVyLmZyb21KU09OKGRhdGEpO1xuXHRcdHJldHVybiB0aGlzO1xuXHR9XG5cblx0cHVibGljIHRvSlNPTigpOiBJUGxheWVyU2VyaWFsaXplZCB7XG5cdFx0cmV0dXJuIHtcblx0XHRcdC4uLnN1cGVyLnRvSlNPTigpLFxuXHRcdFx0aGlkaW5nU3BvdDogdGhpcy5oaWRpbmdTcG90ID8gdGhpcy5oaWRpbmdTcG90LnRvSlNPTigpIDogbnVsbCxcblx0XHRcdHR5cGU6ICdQbGF5ZXInXG5cdFx0fTtcblx0fVxuXG59XG5cbi8qKlxuICogVGhlIHNlcmlhbGl6ZWQgcGxheWVyIGRhdGFcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBJUGxheWVyU2VyaWFsaXplZCBleHRlbmRzIElDaGFyYWN0ZXJTZXJpYWxpemVkIHtcblx0aGlkaW5nU3BvdDogSUhpZGluZ1Nwb3RTZXJpYWxpemVkO1xufVxuIiwiaW1wb3J0IHsgR2FtZU1hbmFnZXIgfSBmcm9tICcuLi8uLi9tYW5hZ2Vycy9HYW1lTWFuYWdlcic7XG5pbXBvcnQgeyBIaWRpbmdUeXBlIH0gZnJvbSAnLi4vLi4vbWlzYy90eXBlcyc7XG5pbXBvcnQgeyBHYW1lT2JqZWN0LCBJR2FtZU9iamVjdFNlcmlhbGl6ZWQgfSBmcm9tICcuLi9HYW1lT2JqZWN0JztcblxuZXhwb3J0IGNsYXNzIEhpZGluZ1Nwb3QgZXh0ZW5kcyBHYW1lT2JqZWN0IHtcblxuXHQvKipcblx0ICogVGhlIGhpZGluZyB0eXBlXG5cdCAqL1xuXHRwdWJsaWMgaGlkaW5nVHlwZSA9IEhpZGluZ1R5cGUubm9uZTtcblxuXHRwdWJsaWMgY29uc3RydWN0b3IoZ2FtZU1hbmFnZXI6IEdhbWVNYW5hZ2VyLCB4OiBudW1iZXIsIHk6IG51bWJlcikge1xuXHRcdHN1cGVyKGdhbWVNYW5hZ2VyLCB4LCB5LCAnaGlkaW5nU3BvdCcpO1xuXHR9XG5cblx0LyoqXG5cdCAqIFNldCB0aGUgaGlkaW5nIHR5cGUgZm9yIHRoaXMgc3BvdFxuXHQgKiBAcGFyYW0gaGlkaW5nVHlwZSBUaGUgaGlkaW5nIHR5cGVcblx0ICovXG5cdHB1YmxpYyBzZXRIaWRpbmdUeXBlKGhpZGluZ1R5cGU6IEhpZGluZ1R5cGUpIHtcblx0XHR0aGlzLmhpZGluZ1R5cGUgPSBoaWRpbmdUeXBlO1xuXHRcdHJldHVybiB0aGlzO1xuXHR9XG5cblx0cHVibGljIHRvSlNPTigpOiBJSGlkaW5nU3BvdFNlcmlhbGl6ZWQge1xuXHRcdHJldHVybiB7XG5cdFx0XHQuLi5zdXBlci50b0pTT04oKSxcblx0XHRcdGhpZGluZ1R5cGU6IHRoaXMuaGlkaW5nVHlwZSxcblx0XHRcdHR5cGU6ICdHYW1lT2JqZWN0J1xuXHRcdH07XG5cdH1cblxufVxuXG4vKipcbiAqIFRoZSBzZXJpYWxpemVkIGhpZGluZyBzcG90IGRhdGFcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBJSGlkaW5nU3BvdFNlcmlhbGl6ZWQgZXh0ZW5kcyBJR2FtZU9iamVjdFNlcmlhbGl6ZWQge1xuXHRoaWRpbmdUeXBlOiBudW1iZXI7XG59XG4iLCJpbXBvcnQgeyBHYW1lTWFuYWdlciB9IGZyb20gJy4uLy4uL21hbmFnZXJzL0dhbWVNYW5hZ2VyJztcbmltcG9ydCB7IEJvdWxkZXJTdGF0ZSwgRGlyZWN0aW9uIH0gZnJvbSAnLi4vLi4vbWlzYy90eXBlcyc7XG5pbXBvcnQgeyBUcmFwIH0gZnJvbSAnLi9UcmFwJztcblxuZXhwb3J0IGNsYXNzIEJvdWxkZXIgZXh0ZW5kcyBUcmFwIHtcblxuXHRwcm90ZWN0ZWQgc3RhdGUgPSBCb3VsZGVyU3RhdGUuc3RvcDtcblx0cHJvdGVjdGVkIGRpcmVjdGlvbiA9IERpcmVjdGlvbi5kb3duO1xuXHRwcm90ZWN0ZWQgc3BlZWQgPSAwO1xuXG5cdHB1YmxpYyBjb25zdHJ1Y3RvcihnYW1lTWFuYWdlcjogR2FtZU1hbmFnZXIsIHg6IG51bWJlciwgeTogbnVtYmVyKSB7XG5cdFx0c3VwZXIoZ2FtZU1hbmFnZXIsIHgsIHksICdib3VsZGVyJyk7XG5cdH1cblxuXHQvKipcblx0ICogQ2hhbmdlIHRoZSBib3VsZGVyJ3MgY3VycmVudCB2ZWxvY2l0eSBhbmQgc3RhdHVzIHRvIHRoZSBjdXJyZW50IGRpcmVjdGlvblxuXHQgKi9cblx0cHVibGljIG1vdmUoKSB7XG5cdFx0dGhpcy5zdGF0ZSA9IEJvdWxkZXJTdGF0ZS5tb3ZlO1xuXHRcdHN3aXRjaCAodGhpcy5kaXJlY3Rpb24pIHtcblx0XHRcdGNhc2UgRGlyZWN0aW9uLmRvd246XG5cdFx0XHRcdHRoaXMuYm9keS52ZWxvY2l0eS54ID0gMDtcblx0XHRcdFx0dGhpcy5ib2R5LnZlbG9jaXR5LnkgPSB0aGlzLnNwZWVkO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdGNhc2UgRGlyZWN0aW9uLnVwOlxuXHRcdFx0XHR0aGlzLmJvZHkudmVsb2NpdHkueCA9IDA7XG5cdFx0XHRcdHRoaXMuYm9keS52ZWxvY2l0eS55ID0gLXRoaXMuc3BlZWQ7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0Y2FzZSBEaXJlY3Rpb24ubGVmdDpcblx0XHRcdFx0dGhpcy5ib2R5LnZlbG9jaXR5LnggPSAtdGhpcy5zcGVlZDtcblx0XHRcdFx0dGhpcy5ib2R5LnZlbG9jaXR5LnkgPSAwO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdHRoaXMuYm9keS52ZWxvY2l0eS54ID0gdGhpcy5zcGVlZDtcblx0XHRcdFx0dGhpcy5ib2R5LnZlbG9jaXR5LnkgPSAwO1xuXHRcdH1cblx0fVxuXG5cdC8qKlxuXHQgKiBDaGFuZ2UgdGhlIGJvdWxkZXIncyBjdXJyZW50IHZlbG9jaXR5IGFuZCBzdGF0dXMgdG8gemVyb1xuXHQgKi9cblx0cHVibGljIHN0b3AoKSB7XG5cdFx0dGhpcy5zdGF0ZSA9IEJvdWxkZXJTdGF0ZS5zdG9wO1xuXHRcdHRoaXMuYm9keS52ZWxvY2l0eS54ID0gMDtcblx0XHR0aGlzLmJvZHkudmVsb2NpdHkueSA9IDA7XG5cdH1cblxuXHQvKipcblx0ICogQ2hhbmdlIHRoZSBtb3ZpbmcgZGlyZWN0aW9uIGZvciB0aGlzIGJvdWxkZXJcblx0ICogQHBhcmFtIGRpcmVjdGlvbiBUaGUgbmV3IGRpcmVjdGlvblxuXHQgKi9cblx0cHVibGljIHNldERpcmVjdGlvbihkaXJlY3Rpb246IERpcmVjdGlvbikge1xuXHRcdHRoaXMuZGlyZWN0aW9uID0gZGlyZWN0aW9uO1xuXHRcdHJldHVybiB0aGlzO1xuXHR9XG5cblx0LyoqXG5cdCAqIENoYW5nZSB0aGUgc3BlZWQgZm9yIHRoaXMgYm91bGRlclxuXHQgKiBAcGFyYW0gc3BlZWQgVGhlIG5ldyBzcGVlZFxuXHQgKi9cblx0cHVibGljIHNldFNwZWVkKHNwZWVkOiBudW1iZXIpIHtcblx0XHR0aGlzLnNwZWVkID0gc3BlZWQ7XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH1cblxufVxuIiwiaW1wb3J0IHsgR2FtZVN0YXRlIH0gZnJvbSAnLi9HYW1lU3RhdGUnO1xuXG5leHBvcnQgY2xhc3MgUHJlbG9hZGVyU3RhdGUgZXh0ZW5kcyBHYW1lU3RhdGUge1xuXG5cdHByaXZhdGUgbG9hZGluZ0JhcjogUGhhc2VyLlNwcml0ZTtcblxuXHRwdWJsaWMgcHJlbG9hZCgpIHtcblx0XHR0aGlzLmxvYWRpbmdCYXIgPSB0aGlzLmdhbWUuYWRkLnNwcml0ZSgwLCAyNDAsICdwcmVsb2FkZXJfYmFyJyk7XG5cdFx0dGhpcy5sb2FkaW5nQmFyLmFuY2hvci5zZXRUbygwLCAwLjUpO1xuXHRcdHRoaXMubG9hZC5zZXRQcmVsb2FkU3ByaXRlKHRoaXMubG9hZGluZ0Jhcik7XG5cblx0XHR0aGlzLmdhbWUubG9hZC5zcHJpdGVzaGVldCgncGxheWVyJywgJ2ltYWdlcy9wbGF5ZXIucG5nJywgNDgsIDk2KTtcblx0XHR0aGlzLmdhbWUubG9hZC5zcHJpdGVzaGVldCgnZW5lbXknLCAnaW1hZ2VzL2VuZW15LnBuZycsIDQ4LCA5Nik7XG5cdFx0dGhpcy5nYW1lLmxvYWQuc3ByaXRlc2hlZXQoJ29iamVjdHMnLCAnaW1hZ2VzL29iamVjdHMucG5nJywgNDgsIDQ4KTtcblx0XHR0aGlzLmdhbWUubG9hZC50aWxlbWFwKCdMZXZlbC0wJywgJ2pzb24vTGV2ZWwtMC5qc29uJywgbnVsbCwgUGhhc2VyLlRpbGVtYXAuVElMRURfSlNPTik7XG5cdFx0dGhpcy5nYW1lLmxvYWQuaW1hZ2UoJ292ZXJ3b3JsZCcsICdpbWFnZXMvb3ZlcndvcmxkLnBuZycpO1xuXHRcdHRoaXMuZ2FtZS5sb2FkLmltYWdlKCdjYXZlJywgJ2ltYWdlcy9jYXZlLnBuZycpO1xuXHRcdHRoaXMuZ2FtZS5sb2FkLmltYWdlKCdsb2dvJywgJ2ltYWdlcy9TdG9uZXNDcmVlZC5wbmcnKTtcblx0fVxuXG5cdHB1YmxpYyBjcmVhdGUoKSB7XG5cdFx0dGhpcy5nYW1lLnN0YXRlLnN0YXJ0KCdtZW51Jyk7XG5cdH1cbn1cbiJdLCJzb3VyY2VSb290IjoiIn0=