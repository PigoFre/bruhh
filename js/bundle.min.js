!function(t){var e={};function s(i){if(e[i])return e[i].exports;var a=e[i]={i:i,l:!1,exports:{}};return t[i].call(a.exports,a,a.exports,s),a.l=!0,a.exports}s.m=t,s.c=e,s.d=function(t,e,i){s.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:i})},s.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},s.t=function(t,e){if(1&e&&(t=s(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var i=Object.create(null);if(s.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var a in t)s.d(i,a,function(e){return t[e]}.bind(null,a));return i},s.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return s.d(e,"a",e),e},s.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},s.p="",s(s.s=5)}([function(t,e,s){"use strict";Object.defineProperty(e,"__esModule",{value:!0});class i extends Phaser.State{create(){super.create(this.game);for(const t of i.pendingOnCreate)t(this);i.pendingOnCreate.length=0}}i.pendingOnCreate=[],e.GameState=i},function(t,e,s){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),function(t){t[t.up=0]="up",t[t.down=1]="down",t[t.right=2]="right",t[t.left=3]="left"}(e.Direction||(e.Direction={})),function(t){t[t.stop=0]="stop",t[t.move=1]="move"}(e.BoulderState||(e.BoulderState={})),function(t){t[t.none=0]="none",t[t.bushes=1]="bushes",t[t.cave=2]="cave",t[t.haystack=3]="haystack"}(e.HidingType||(e.HidingType={})),e.CharacterState={dead:0,dying:1,run:2,stand:3,walk:4},e.PlayerState=Object.assign({},e.CharacterState,{hidden:5}),e.EnemyState=Object.assign({},e.CharacterState,{onRoute:6,pursuit:7})},function(t,e,s){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const i=s(13);class a extends Phaser.Sprite{constructor(t,e,s,i,a){super(t.game,e,s,i,a),this.gameManager=t,this.game.add.existing(this),this.game.physics.arcade.enable(this),this.gameManager.gameObjectsGroup.add(this),this.body.collideWorldBounds=!0,this.body.allowRotation=!1,this.body.allowGravity=!1,this.body.immovable=!0,this.smoothed=!1}collides(t){if(!(t instanceof a))throw new TypeError('"gameObject" must be an instance of GameObject.');return!0}setPosition(t,e){return this.position.x=t,this.position.y=e,this}setVelocity(t,e){return this.body.velocity.x=t,this.body.velocity.y=e,this}interact(t){return t.interaction(this),this}interaction(t){if(!(t instanceof a))throw new TypeError("Expected gameObject to be a GameObject instance")}fromJSON(t){return this.name=t.name,this.setVelocity(t.velocity.x,t.velocity.y),this}toJSON(){return{frame:this.frame,key:this.key,name:this.name,position:{x:this.position.x,y:this.position.y},type:"GameObject",velocity:{x:this.body.velocity.x,y:this.body.velocity.y}}}}a.factory=new i.GameObjectFactory,e.GameObject=a;const r=s(3),o=s(15),n=s(17),h=s(18),c=s(19),l=s(4);a.factory.set("GameObject",a),a.factory.set("Character",r.Character),a.factory.set("Player",n.Player),a.factory.set("Enemy",o.Enemy),a.factory.set("HidingSpot",h.HidingSpot),a.factory.set("Boulder",c.Boulder),a.factory.set("Trap",l.Trap)},function(t,e,s){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const i=s(1),a=s(2);e.Character=class extends a.GameObject{constructor(t,e,s,a,r){super(t,e,s,a,r),this.walkSpeed=0,this.runSpeed=0,this.state=i.CharacterState.stand,this.direction=i.Direction.down,this.strength=0,this.attackCooldown=500,this.attackRefresh=0,this.body.setSize(.9*this.width,.4*this.height,0,.5*this.height),this.animations.add("stand.down",[0]),this.animations.add("move.down",[1,2,3,4]),this.animations.add("kill.down",[5,6,7]),this.animations.add("dead.down",[8,9,10]),this.animations.add("stand.right",[11]),this.animations.add("move.right",[12,13,14,15]),this.animations.add("kill.right",[16,17,18]),this.animations.add("dead.right",[19,20,21]),this.animations.add("stand.up",[22]),this.animations.add("move.up",[23,24,25,26]),this.animations.add("kill.up",[27,28,29]),this.animations.add("dead.up",[30,31,32]),this.animations.add("stand.left",[33]),this.animations.add("move.left",[34,35,36,37]),this.animations.add("kill.left",[38,39,40]),this.animations.add("dead.left",[41,42,43])}setStrength(t){return this.strength=t,this}setState(t){return this.state=t,this}attack(t){if(!(Date.now()<this.attackRefresh))return this.attackRefresh=Date.now()+this.attackCooldown,t.damage(this.strength),this.animations.play(`kill.${i.Direction[this.direction]}`,1e3/this.attackCooldown*3),this}kill(){return this.setVelocity(0,0),this.setState(i.CharacterState.dying),this.animations.play(`dead.${i.Direction[this.direction]}`,1.5),this.game.time.events.add(3*Phaser.Timer.SECOND,()=>{this.setState(i.CharacterState.dead),super.kill()}),this}walk(){return this.setState(i.CharacterState.walk),this.animations.play(`move.${i.Direction[this.direction]}`,5),this.updateVelocity(this.walkSpeed),this}run(){return this.setState(i.CharacterState.run),this.animations.play(`move.${i.Direction[this.direction]}`,8),this.updateVelocity(this.runSpeed),this}stand(){return this.setState(i.CharacterState.stand),this.animations.play(`stand.${i.Direction[this.direction]}`,0),this.animations.stop(),this.setVelocity(0,0),this}changeDirection(t){return this.direction=t,this}fromJSON(t){return super.fromJSON(t),this.direction=t.direction,this.runSpeed=t.runSpeed,this.walkSpeed=t.walkSpeed,this.setStrength(t.strength),this}toJSON(){return Object.assign({},super.toJSON(),{direction:this.direction,runSpeed:this.runSpeed,strength:this.strength,walkSpeed:this.walkSpeed})}triggerWalk(){this.updateVelocity(this.walkSpeed)}updateVelocity(t){switch(this.direction){case i.Direction.down:this.setVelocity(0,t);break;case i.Direction.up:this.setVelocity(0,-t);break;case i.Direction.left:this.setVelocity(-t,0);break;default:this.setVelocity(t,0)}}}},function(t,e,s){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const i=s(2);e.Trap=class extends i.GameObject{constructor(){super(...arguments),this.active=!1,this.damageStrength=0,this.lethal=!1}setDamageStrength(t){return this.damageStrength=t,this}setLethal(t){return this.lethal=t,this}setActive(t){return this.active=t,this}onContact(t){this.lethal?t.kill():t.damage(this.damageStrength)}}},function(t,e,s){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const i=s(6),a=s(7),r=s(8),o=s(10),n=s(20),h=s(21);window.onload=function(){const t=new Phaser.Game(h.WIN_WIDTH,h.WIN_HEIGHT,Phaser.AUTO,"game");t.state.add("boot",i.BootState),t.state.add("preloader",n.PreloaderState),t.state.add("play",o.PlayState),t.state.add("menu",a.MenuState),t.state.add("newGame",r.NewGameState),t.state.start("boot")}},function(t,e,s){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const i=s(0);e.BootState=class extends i.GameState{preload(){this.game.load.image("preloader_bar","images/preloader_bar.png"),this.game.load.spritesheet("player","images/player.png",48,96),this.game.load.spritesheet("enemy","images/enemy.png",48,96)}create(){this.game.state.start("preloader")}}},function(t,e,s){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const i=s(0);e.MenuState=class extends i.GameState{constructor(){super(...arguments),this.texts=[],this.logo=null}create(){super.create(),this.game.stage.backgroundColor="#2A1B19",this.logo=this.game.add.sprite(this.game.world.centerX,this.game.world.centerY-120,"logo"),this.logo.anchor.setTo(.5,.5),this.logo.scale.setTo(.5,.5),this.createButton("New Game",()=>{this.game.state.start("newGame")}),localStorage.getItem("level")&&this.createButton("Continue",()=>{i.GameState.pendingOnCreate.push(t=>{t.gameManager.storageManager.load()}),this.game.state.start("play")})}shutdown(){for(const t of this.texts)t.destroy(!0);this.texts.length=0,this.logo.destroy(!0),super.shutdown(this.game)}createButton(t,e){const s=this.game.add.text(this.game.world.centerX,this.game.world.centerY,t,{font:"65px Arial",fill:"#CDCDCD",align:"center"});s.anchor.set(.5),s.inputEnabled=!0,s.events.onInputUp.add(e,this),s.events.onInputDown.add(()=>{s.fill="#FF0044",s.events.onInputOver.removeAll(),s.events.onInputOut.removeAll()}),s.events.onInputOver.add(()=>{s.fill="#FFFFFF"}),s.events.onInputOut.add(()=>{s.fill="#EFEFEF"}),this.texts.push(s),s.alignTo(this.texts.length?this.texts[this.texts.length-1]:this.logo,Phaser.BOTTOM_CENTER,16)}}},function(t,e,s){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const i=s(9),a=s(0);e.NewGameState=class extends a.GameState{preload(){super.preload(this.game),this.game.load.json("Level-0-GameObjects","json/Level-0-GameObjects.json")}create(){const t=this.game.add.text(this.game.world.centerX,this.game.world.centerY-65,"Insert your name",{font:"65px Arial",fill:"#CDCDCD",align:"center"});t.anchor.setTo(.5,.5);const e=this.game.add.text(this.game.world.centerX,this.game.world.centerY,"",{font:"65px Arial",fill:"#CDCDCD",align:"center"});e.anchor.setTo(.5,.5),e.alignTo(t,Phaser.BOTTOM_CENTER,0,25),i.readLine(e,s=>{t.destroy(!0),e.destroy(!0),this.game.state.start("play"),a.GameState.pendingOnCreate.push(t=>{console.log("Loading New Game..."),t.gameManager.playerName=s,t.gameManager.storageManager.loadGameObjects(this.game.cache.getJSON("Level-0-GameObjects")),console.log("Loaded!")})},{maximumLength:20})}}},function(t,e,s){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.chunk=function(t,e){const s=t.slice(),i=[];for(;s.length;)i.push(s.splice(0,e));return i},e.readLine=function(t,e,s){const i=[],a="maximumLength"in s?s.maximumLength:100,r=s=>{if("Enter"===s.key)return document.removeEventListener("keydown",r),void e(i.join(""));if("Backspace"===s.key)i.length&&i.pop();else{if(!(i.length<=a&&/^[\(\)\[\]\w\d\-!?¡¿ ]$/.test(s.key)))return;i.push(s.key)}t.text=i.join("")};document.addEventListener("keydown",r)}},function(t,e,s){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const i=s(11),a=s(0);e.PlayState=class extends a.GameState{constructor(){super(...arguments),this.gameManager=null,this.tilemaps=new Map,this.obstacleLayer=null}preload(){super.preload(this.game),this.game.load.tilemap("Level-0","json/Level-0.json",null,Phaser.Tilemap.TILED_JSON),this.game.load.image("overworld","images/overworld.png"),this.game.load.image("cave","images/cave.png"),this.game.load.image("objects","images/objects.png")}create(){this.getTilemap(0),this.game.input.keyboard.addKeyCapture([Phaser.Keyboard.LEFT,Phaser.Keyboard.RIGHT,Phaser.Keyboard.UP,Phaser.Keyboard.DOWN,Phaser.Keyboard.SPACEBAR]),this.gameManager=new i.GameManager(this.game),this.game.physics.startSystem(Phaser.Physics.ARCADE),this.game.stage.backgroundColor="#99F",super.create()}update(){super.update(this.game),this.game.physics.arcade.collide(this.gameManager.gameObjectsGroup,this.obstacleLayer),this.gameManager.update()}getTilemap(t){const e=`Level-${t}`;let s=this.tilemaps.get(t);if(!s){(s=this.game.add.tilemap(e)).addTilesetImage("overworld");const i=s.createLayer(0);i.smoothed=!1,i.resizeWorld(),s.createLayer(1).smoothed=!1,this.obstacleLayer=s.createLayer(2),this.obstacleLayer.smoothed=!1,this.game.physics.arcade.enable(this.obstacleLayer),s.setCollisionByExclusion([],!0,this.obstacleLayer),this.tilemaps.set(t,s)}return s}}},function(t,e,s){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const i=s(12);var a;e.GameManager=class{constructor(t){this.game=t,this.mapManager=null,this.storageManager=new i.StorageManager(this),this.gameObjectsGroup=null,this.player=null,this.playerName=null,this.level=a.First,this.pendingOnCreate=[],this.gameObjectsGroup=this.game.add.group(),this.gameObjectsGroup.name="gameObjectsGroup",this.gameObjectsGroup.enableBody=!0,this.gameObjectsGroup.enableBodyDebug=!0,this.gameObjectsGroup.renderable=!0,console.log(this)}clear(){return this.gameObjectsGroup.killAll(),this}update(){for(const t of this.gameObjectsGroup.children)t.update();this.game.physics.arcade.collide(this.gameObjectsGroup,void 0,(t,e)=>t.collides(e)&&e.collides(t)),this.gameObjectsGroup.sort("y",Phaser.Group.SORT_ASCENDING)}},function(t){t[t.First=0]="First"}(a=e.GameLevels||(e.GameLevels={}))},function(t,e,s){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const i=s(2);e.StorageManager=class{constructor(t){this.gameManager=t}save(){localStorage.clear(),localStorage.setItem("gameObjects",JSON.stringify(this.gameManager.gameObjectsGroup.children)),localStorage.setItem("level",this.gameManager.level.toString()),localStorage.setItem("playerName",this.gameManager.playerName)}load(){this.gameManager.clear();const t=localStorage.getItem("level");if(null===t)throw new Error("Could not find a saved file.");const e=Number(t);this.gameManager.level=e;const s=JSON.parse(localStorage.getItem("gameObjects"));s&&this.loadGameObjects(s);const i=localStorage.getItem("playerName");i&&this.loadPlayerName(i)}loadGameObjects(t){for(const e of t){const t=i.GameObject.factory.get(e.type);if(!t)throw new Error(`Could not find a constructor for ${e.type||"unknown"}. Aborting.`);const s=new t(this.gameManager,e.position.x,e.position.y,e.key,e.frame).fromJSON(e);"Player"===e.type&&(this.gameManager.player=s)}}loadPlayerName(t){this.gameManager.playerName=t}}},function(t,e,s){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const i=s(14);e.GameObjectFactory=class extends i.Factory{}},function(t,e,s){"use strict";Object.defineProperty(e,"__esModule",{value:!0});e.Factory=class extends Map{}},function(t,e,s){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const i=s(16),a=s(1),r=s(3);e.Enemy=class extends r.Character{constructor(t,e,s){super(t,e,s,"enemy"),this.route=new i.Route,this.routeAt=1,this.pov=.85*Math.PI,this.isTarget=!1,this.onRoute=!0,this.reverse=!1}setTarget(t){return this.isTarget=t,this}update(){if(super.update(),this.onRoute&&this.route.size>1){const[t,e]=this.route.get(this.routeAt);this.moveTowards(t,e)||(this.routeAt===(this.reverse?0:this.route.size-1)&&(this.reverse=!this.reverse),this.routeAt+=this.reverse?-1:1)}}kill(){return this.onRoute=!1,super.kill()}moveTowards(t,e){const s=this.findNextDirection(t,e);return null===s?(this.stand(),!1):(this.changeDirection(s).walk(),!0)}findNextDirection(t,e){if(this.direction===a.Direction.up||this.direction===a.Direction.down){const s=this.findNextYDirection(e);return null===s?this.findNextXDirection(t):s}{const s=this.findNextXDirection(t);return null===s?this.findNextYDirection(e):s}}findNextXDirection(t){if(this.position.x===t)return null;const e=this.position.x-t;return e<-2?a.Direction.right:e>2?a.Direction.left:(this.setPosition(t,this.position.y),null)}findNextYDirection(t){if(this.position.y===t)return null;const e=this.position.y-t;return e<-2?a.Direction.down:e>2?a.Direction.up:(this.setPosition(this.position.x,t),null)}setPov(t){return this.pov=t,this}chase(){this.setState(a.EnemyState.pursuit)}fromJSON(t){return super.fromJSON(t),this.isTarget=t.isTarget,this.pov=t.pov,this.route.set(t.route),this}toJSON(){return Object.assign({},super.toJSON(),{isTarget:this.isTarget,pov:this.pov,route:this.route.toJSON()})}}},function(t,e,s){"use strict";Object.defineProperty(e,"__esModule",{value:!0});e.Route=class{constructor(){this.route=[]}get size(){return this.route.length}get(t){return t<this.route.length?this.route[t]:null}set(t){return this.route=t,this}add(t,e){return this.route.push("number"==typeof t?[t,e]:t),this}remove(t,e){const s="number"==typeof t?[t,e]:t,i=this.route.findIndex(t=>t[0]===s[0]&&t[0]===s[1]);return-1!==i&&this.route.splice(i,1),this}reset(){return this.route.length=0,this}toJSON(){return this.route.slice()}}},function(t,e,s){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const i=s(1),a=s(3);e.Player=class extends a.Character{constructor(t,e,s){super(t,e,s,"player"),this.hidingSpot=null,this.directions={down:!1,left:!1,right:!1,up:!1},this.cursorKeys=this.game.input.keyboard.createCursorKeys(),this.actions={interact:!1,kill:!1},this.movementRefresh=0,this.game.camera.follow(this,Phaser.Camera.FOLLOW_LOCKON,.1,.1),this.body.immovable=!1}update(){if(Date.now()<this.movementRefresh)return;this.directions.down=this.cursorKeys.down.isDown,this.directions.left=this.cursorKeys.left.isDown,this.directions.right=this.cursorKeys.right.isDown,this.directions.up=this.cursorKeys.up.isDown;const t=this.gameManager.game.input.keyboard,e=t.isDown(Phaser.Keyboard.SHIFT);this.directions.down!==this.directions.up?(this.direction=this.directions.down?i.Direction.down:i.Direction.up,e?this.run():this.walk()):this.directions.left!==this.directions.right?(this.direction=this.directions.left?i.Direction.left:i.Direction.right,e?this.run():this.walk()):this.stand(),t.isDown(Phaser.Keyboard.X)?(this.actions.interact=!1,this.actions.kill=!0,this.triggerWalk()):t.isDown(Phaser.Keyboard.Z)?(this.actions.interact=!0,this.actions.kill=!1,this.triggerWalk()):(this.actions.interact=!1,this.actions.kill=!1)}attack(t){return super.attack(t),t.kill(),this.movementRefresh=this.attackRefresh,this}collides(t){if(t instanceof a.Character)return this.actions.kill?this.attack(t):this.actions.interact&&t.interact(this),!0}hide(t){return t.hidingType!==i.HidingType.none&&(this.setState(i.PlayerState.hidden),this.hidingSpot=t),this}reveal(){return this.hidingSpot&&(this.setState(this.health?i.PlayerState.stand:i.PlayerState.dead),this.hidingSpot=null),this}fromJSON(t){return super.fromJSON(t),this}toJSON(){return Object.assign({},super.toJSON(),{hidingSpot:this.hidingSpot.toJSON()})}}},function(t,e,s){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const i=s(1),a=s(2);e.HidingSpot=class extends a.GameObject{constructor(t,e,s){super(t,e,s,"hidingSpot"),this.hidingType=i.HidingType.none}setHidingType(t){return this.hidingType=t,this}toJSON(){return Object.assign({},super.toJSON(),{hidingType:this.hidingType})}}},function(t,e,s){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const i=s(1),a=s(4);e.Boulder=class extends a.Trap{constructor(t,e,s){super(t,e,s,"boulder"),this.state=i.BoulderState.stop,this.direction=i.Direction.down,this.speed=0}move(){switch(this.state=i.BoulderState.move,this.direction){case i.Direction.down:this.body.velocity.x=0,this.body.velocity.y=this.speed;break;case i.Direction.up:this.body.velocity.x=0,this.body.velocity.y=-this.speed;break;case i.Direction.left:this.body.velocity.x=-this.speed,this.body.velocity.y=0;break;default:this.body.velocity.x=this.speed,this.body.velocity.y=0}}stop(){this.state=i.BoulderState.stop,this.body.velocity.x=0,this.body.velocity.y=0}setDirection(t){return this.direction=t,this}setSpeed(t){return this.speed=t,this}}},function(t,e,s){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const i=s(0);e.PreloaderState=class extends i.GameState{preload(){this.loadingBar=this.game.add.sprite(0,240,"preloader_bar"),this.loadingBar.anchor.setTo(0,.5),this.load.setPreloadSprite(this.loadingBar),this.game.load.image("logo","images/StonesCreed.png")}create(){this.game.state.start("menu")}}},function(t,e,s){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.WIN_WIDTH=800,e.WIN_HEIGHT=600}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,